// Code generated by ogen, DO NOT EDIT.

package mediamtx

import (
	"github.com/go-faster/errors"
)

// Ref: #/components/schemas/AuthInternalUser
type AuthInternalUser struct {
	User        OptString                    `json:"user"`
	Pass        OptString                    `json:"pass"`
	Ips         []string                     `json:"ips"`
	Permissions []AuthInternalUserPermission `json:"permissions"`
}

// GetUser returns the value of User.
func (s *AuthInternalUser) GetUser() OptString {
	return s.User
}

// GetPass returns the value of Pass.
func (s *AuthInternalUser) GetPass() OptString {
	return s.Pass
}

// GetIps returns the value of Ips.
func (s *AuthInternalUser) GetIps() []string {
	return s.Ips
}

// GetPermissions returns the value of Permissions.
func (s *AuthInternalUser) GetPermissions() []AuthInternalUserPermission {
	return s.Permissions
}

// SetUser sets the value of User.
func (s *AuthInternalUser) SetUser(val OptString) {
	s.User = val
}

// SetPass sets the value of Pass.
func (s *AuthInternalUser) SetPass(val OptString) {
	s.Pass = val
}

// SetIps sets the value of Ips.
func (s *AuthInternalUser) SetIps(val []string) {
	s.Ips = val
}

// SetPermissions sets the value of Permissions.
func (s *AuthInternalUser) SetPermissions(val []AuthInternalUserPermission) {
	s.Permissions = val
}

// Ref: #/components/schemas/AuthInternalUserPermission
type AuthInternalUserPermission struct {
	Action OptString `json:"action"`
	Path   OptString `json:"path"`
}

// GetAction returns the value of Action.
func (s *AuthInternalUserPermission) GetAction() OptString {
	return s.Action
}

// GetPath returns the value of Path.
func (s *AuthInternalUserPermission) GetPath() OptString {
	return s.Path
}

// SetAction sets the value of Action.
func (s *AuthInternalUserPermission) SetAction(val OptString) {
	s.Action = val
}

// SetPath sets the value of Path.
func (s *AuthInternalUserPermission) SetPath(val OptString) {
	s.Path = val
}

// AuthJwksRefreshOK is response for AuthJwksRefresh operation.
type AuthJwksRefreshOK struct{}

func (*AuthJwksRefreshOK) authJwksRefreshRes() {}

type ConfigGlobalGetBadRequest Error

func (*ConfigGlobalGetBadRequest) configGlobalGetRes() {}

type ConfigGlobalGetInternalServerError Error

func (*ConfigGlobalGetInternalServerError) configGlobalGetRes() {}

type ConfigGlobalSetBadRequest Error

func (*ConfigGlobalSetBadRequest) configGlobalSetRes() {}

type ConfigGlobalSetInternalServerError Error

func (*ConfigGlobalSetInternalServerError) configGlobalSetRes() {}

// ConfigGlobalSetOK is response for ConfigGlobalSet operation.
type ConfigGlobalSetOK struct{}

func (*ConfigGlobalSetOK) configGlobalSetRes() {}

type ConfigPathDefaultsGetBadRequest Error

func (*ConfigPathDefaultsGetBadRequest) configPathDefaultsGetRes() {}

type ConfigPathDefaultsGetInternalServerError Error

func (*ConfigPathDefaultsGetInternalServerError) configPathDefaultsGetRes() {}

type ConfigPathDefaultsPatchBadRequest Error

func (*ConfigPathDefaultsPatchBadRequest) configPathDefaultsPatchRes() {}

type ConfigPathDefaultsPatchInternalServerError Error

func (*ConfigPathDefaultsPatchInternalServerError) configPathDefaultsPatchRes() {}

// ConfigPathDefaultsPatchOK is response for ConfigPathDefaultsPatch operation.
type ConfigPathDefaultsPatchOK struct{}

func (*ConfigPathDefaultsPatchOK) configPathDefaultsPatchRes() {}

type ConfigPathsAddBadRequest Error

func (*ConfigPathsAddBadRequest) configPathsAddRes() {}

type ConfigPathsAddInternalServerError Error

func (*ConfigPathsAddInternalServerError) configPathsAddRes() {}

// ConfigPathsAddOK is response for ConfigPathsAdd operation.
type ConfigPathsAddOK struct{}

func (*ConfigPathsAddOK) configPathsAddRes() {}

type ConfigPathsDeleteBadRequest Error

func (*ConfigPathsDeleteBadRequest) configPathsDeleteRes() {}

type ConfigPathsDeleteInternalServerError Error

func (*ConfigPathsDeleteInternalServerError) configPathsDeleteRes() {}

type ConfigPathsDeleteNotFound Error

func (*ConfigPathsDeleteNotFound) configPathsDeleteRes() {}

// ConfigPathsDeleteOK is response for ConfigPathsDelete operation.
type ConfigPathsDeleteOK struct{}

func (*ConfigPathsDeleteOK) configPathsDeleteRes() {}

type ConfigPathsGetBadRequest Error

func (*ConfigPathsGetBadRequest) configPathsGetRes() {}

type ConfigPathsGetInternalServerError Error

func (*ConfigPathsGetInternalServerError) configPathsGetRes() {}

type ConfigPathsGetNotFound Error

func (*ConfigPathsGetNotFound) configPathsGetRes() {}

type ConfigPathsListBadRequest Error

func (*ConfigPathsListBadRequest) configPathsListRes() {}

type ConfigPathsListInternalServerError Error

func (*ConfigPathsListInternalServerError) configPathsListRes() {}

type ConfigPathsPatchBadRequest Error

func (*ConfigPathsPatchBadRequest) configPathsPatchRes() {}

type ConfigPathsPatchInternalServerError Error

func (*ConfigPathsPatchInternalServerError) configPathsPatchRes() {}

type ConfigPathsPatchNotFound Error

func (*ConfigPathsPatchNotFound) configPathsPatchRes() {}

// ConfigPathsPatchOK is response for ConfigPathsPatch operation.
type ConfigPathsPatchOK struct{}

func (*ConfigPathsPatchOK) configPathsPatchRes() {}

type ConfigPathsReplaceBadRequest Error

func (*ConfigPathsReplaceBadRequest) configPathsReplaceRes() {}

type ConfigPathsReplaceInternalServerError Error

func (*ConfigPathsReplaceInternalServerError) configPathsReplaceRes() {}

type ConfigPathsReplaceNotFound Error

func (*ConfigPathsReplaceNotFound) configPathsReplaceRes() {}

// ConfigPathsReplaceOK is response for ConfigPathsReplace operation.
type ConfigPathsReplaceOK struct{}

func (*ConfigPathsReplaceOK) configPathsReplaceRes() {}

// Ref: #/components/schemas/Error
type Error struct {
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *Error) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *Error) SetError(val OptString) {
	s.Error = val
}

func (*Error) authJwksRefreshRes() {}

// Ref: #/components/schemas/GlobalConf
type GlobalConf struct {
	LogLevel                    OptString                         `json:"logLevel"`
	LogDestinations             []string                          `json:"logDestinations"`
	LogFile                     OptString                         `json:"logFile"`
	SysLogPrefix                OptString                         `json:"sysLogPrefix"`
	ReadTimeout                 OptString                         `json:"readTimeout"`
	WriteTimeout                OptString                         `json:"writeTimeout"`
	WriteQueueSize              OptInt                            `json:"writeQueueSize"`
	UdpMaxPayloadSize           OptInt                            `json:"udpMaxPayloadSize"`
	RunOnConnect                OptString                         `json:"runOnConnect"`
	RunOnConnectRestart         OptBool                           `json:"runOnConnectRestart"`
	RunOnDisconnect             OptString                         `json:"runOnDisconnect"`
	AuthMethod                  OptString                         `json:"authMethod"`
	AuthInternalUsers           []AuthInternalUser                `json:"authInternalUsers"`
	AuthHTTPAddress             OptString                         `json:"authHTTPAddress"`
	AuthHTTPExclude             []AuthInternalUserPermission      `json:"authHTTPExclude"`
	AuthJWTJWKS                 OptString                         `json:"authJWTJWKS"`
	AuthJWTJWKSFingerprint      OptString                         `json:"authJWTJWKSFingerprint"`
	AuthJWTClaimKey             OptString                         `json:"authJWTClaimKey"`
	AuthJWTExclude              []AuthInternalUserPermission      `json:"authJWTExclude"`
	AuthJWTInHTTPQuery          OptBool                           `json:"authJWTInHTTPQuery"`
	API                         OptBool                           `json:"api"`
	ApiAddress                  OptString                         `json:"apiAddress"`
	ApiEncryption               OptBool                           `json:"apiEncryption"`
	ApiServerKey                OptString                         `json:"apiServerKey"`
	ApiServerCert               OptString                         `json:"apiServerCert"`
	ApiAllowOrigin              OptString                         `json:"apiAllowOrigin"`
	ApiTrustedProxies           []string                          `json:"apiTrustedProxies"`
	Metrics                     OptBool                           `json:"metrics"`
	MetricsAddress              OptString                         `json:"metricsAddress"`
	MetricsEncryption           OptBool                           `json:"metricsEncryption"`
	MetricsServerKey            OptString                         `json:"metricsServerKey"`
	MetricsServerCert           OptString                         `json:"metricsServerCert"`
	MetricsAllowOrigin          OptString                         `json:"metricsAllowOrigin"`
	MetricsTrustedProxies       []string                          `json:"metricsTrustedProxies"`
	Pprof                       OptBool                           `json:"pprof"`
	PprofAddress                OptString                         `json:"pprofAddress"`
	PprofEncryption             OptBool                           `json:"pprofEncryption"`
	PprofServerKey              OptString                         `json:"pprofServerKey"`
	PprofServerCert             OptString                         `json:"pprofServerCert"`
	PprofAllowOrigin            OptString                         `json:"pprofAllowOrigin"`
	PprofTrustedProxies         []string                          `json:"pprofTrustedProxies"`
	Playback                    OptBool                           `json:"playback"`
	PlaybackAddress             OptString                         `json:"playbackAddress"`
	PlaybackEncryption          OptBool                           `json:"playbackEncryption"`
	PlaybackServerKey           OptString                         `json:"playbackServerKey"`
	PlaybackServerCert          OptString                         `json:"playbackServerCert"`
	PlaybackAllowOrigin         OptString                         `json:"playbackAllowOrigin"`
	PlaybackTrustedProxies      []string                          `json:"playbackTrustedProxies"`
	Rtsp                        OptBool                           `json:"rtsp"`
	RtspTransports              []string                          `json:"rtspTransports"`
	RtspEncryption              OptString                         `json:"rtspEncryption"`
	RtspAddress                 OptString                         `json:"rtspAddress"`
	RtspsAddress                OptString                         `json:"rtspsAddress"`
	RtpAddress                  OptString                         `json:"rtpAddress"`
	RtcpAddress                 OptString                         `json:"rtcpAddress"`
	MulticastIPRange            OptString                         `json:"multicastIPRange"`
	MulticastRTPPort            OptInt                            `json:"multicastRTPPort"`
	MulticastRTCPPort           OptInt                            `json:"multicastRTCPPort"`
	RtspServerKey               OptString                         `json:"rtspServerKey"`
	RtspServerCert              OptString                         `json:"rtspServerCert"`
	RtspAuthMethods             []string                          `json:"rtspAuthMethods"`
	Rtmp                        OptBool                           `json:"rtmp"`
	RtmpAddress                 OptString                         `json:"rtmpAddress"`
	RtmpEncryption              OptString                         `json:"rtmpEncryption"`
	RtmpsAddress                OptString                         `json:"rtmpsAddress"`
	RtmpServerKey               OptString                         `json:"rtmpServerKey"`
	RtmpServerCert              OptString                         `json:"rtmpServerCert"`
	Hls                         OptBool                           `json:"hls"`
	HlsAddress                  OptString                         `json:"hlsAddress"`
	HlsEncryption               OptBool                           `json:"hlsEncryption"`
	HlsServerKey                OptString                         `json:"hlsServerKey"`
	HlsServerCert               OptString                         `json:"hlsServerCert"`
	HlsAllowOrigin              OptString                         `json:"hlsAllowOrigin"`
	HlsTrustedProxies           []string                          `json:"hlsTrustedProxies"`
	HlsAlwaysRemux              OptBool                           `json:"hlsAlwaysRemux"`
	HlsVariant                  OptString                         `json:"hlsVariant"`
	HlsSegmentCount             OptInt                            `json:"hlsSegmentCount"`
	HlsSegmentDuration          OptString                         `json:"hlsSegmentDuration"`
	HlsPartDuration             OptString                         `json:"hlsPartDuration"`
	HlsSegmentMaxSize           OptString                         `json:"hlsSegmentMaxSize"`
	HlsDirectory                OptString                         `json:"hlsDirectory"`
	HlsMuxerCloseAfter          OptString                         `json:"hlsMuxerCloseAfter"`
	Webrtc                      OptBool                           `json:"webrtc"`
	WebrtcAddress               OptString                         `json:"webrtcAddress"`
	WebrtcEncryption            OptBool                           `json:"webrtcEncryption"`
	WebrtcServerKey             OptString                         `json:"webrtcServerKey"`
	WebrtcServerCert            OptString                         `json:"webrtcServerCert"`
	WebrtcAllowOrigin           OptString                         `json:"webrtcAllowOrigin"`
	WebrtcTrustedProxies        []string                          `json:"webrtcTrustedProxies"`
	WebrtcLocalUDPAddress       OptString                         `json:"webrtcLocalUDPAddress"`
	WebrtcLocalTCPAddress       OptString                         `json:"webrtcLocalTCPAddress"`
	WebrtcIPsFromInterfaces     OptBool                           `json:"webrtcIPsFromInterfaces"`
	WebrtcIPsFromInterfacesList []string                          `json:"webrtcIPsFromInterfacesList"`
	WebrtcAdditionalHosts       []string                          `json:"webrtcAdditionalHosts"`
	WebrtcICEServers2           []GlobalConfWebrtcICEServers2Item `json:"webrtcICEServers2"`
	WebrtcHandshakeTimeout      OptString                         `json:"webrtcHandshakeTimeout"`
	WebrtcTrackGatherTimeout    OptString                         `json:"webrtcTrackGatherTimeout"`
	WebrtcSTUNGatherTimeout     OptString                         `json:"webrtcSTUNGatherTimeout"`
	Srt                         OptBool                           `json:"srt"`
	SrtAddress                  OptString                         `json:"srtAddress"`
}

// GetLogLevel returns the value of LogLevel.
func (s *GlobalConf) GetLogLevel() OptString {
	return s.LogLevel
}

// GetLogDestinations returns the value of LogDestinations.
func (s *GlobalConf) GetLogDestinations() []string {
	return s.LogDestinations
}

// GetLogFile returns the value of LogFile.
func (s *GlobalConf) GetLogFile() OptString {
	return s.LogFile
}

// GetSysLogPrefix returns the value of SysLogPrefix.
func (s *GlobalConf) GetSysLogPrefix() OptString {
	return s.SysLogPrefix
}

// GetReadTimeout returns the value of ReadTimeout.
func (s *GlobalConf) GetReadTimeout() OptString {
	return s.ReadTimeout
}

// GetWriteTimeout returns the value of WriteTimeout.
func (s *GlobalConf) GetWriteTimeout() OptString {
	return s.WriteTimeout
}

// GetWriteQueueSize returns the value of WriteQueueSize.
func (s *GlobalConf) GetWriteQueueSize() OptInt {
	return s.WriteQueueSize
}

// GetUdpMaxPayloadSize returns the value of UdpMaxPayloadSize.
func (s *GlobalConf) GetUdpMaxPayloadSize() OptInt {
	return s.UdpMaxPayloadSize
}

// GetRunOnConnect returns the value of RunOnConnect.
func (s *GlobalConf) GetRunOnConnect() OptString {
	return s.RunOnConnect
}

// GetRunOnConnectRestart returns the value of RunOnConnectRestart.
func (s *GlobalConf) GetRunOnConnectRestart() OptBool {
	return s.RunOnConnectRestart
}

// GetRunOnDisconnect returns the value of RunOnDisconnect.
func (s *GlobalConf) GetRunOnDisconnect() OptString {
	return s.RunOnDisconnect
}

// GetAuthMethod returns the value of AuthMethod.
func (s *GlobalConf) GetAuthMethod() OptString {
	return s.AuthMethod
}

// GetAuthInternalUsers returns the value of AuthInternalUsers.
func (s *GlobalConf) GetAuthInternalUsers() []AuthInternalUser {
	return s.AuthInternalUsers
}

// GetAuthHTTPAddress returns the value of AuthHTTPAddress.
func (s *GlobalConf) GetAuthHTTPAddress() OptString {
	return s.AuthHTTPAddress
}

// GetAuthHTTPExclude returns the value of AuthHTTPExclude.
func (s *GlobalConf) GetAuthHTTPExclude() []AuthInternalUserPermission {
	return s.AuthHTTPExclude
}

// GetAuthJWTJWKS returns the value of AuthJWTJWKS.
func (s *GlobalConf) GetAuthJWTJWKS() OptString {
	return s.AuthJWTJWKS
}

// GetAuthJWTJWKSFingerprint returns the value of AuthJWTJWKSFingerprint.
func (s *GlobalConf) GetAuthJWTJWKSFingerprint() OptString {
	return s.AuthJWTJWKSFingerprint
}

// GetAuthJWTClaimKey returns the value of AuthJWTClaimKey.
func (s *GlobalConf) GetAuthJWTClaimKey() OptString {
	return s.AuthJWTClaimKey
}

// GetAuthJWTExclude returns the value of AuthJWTExclude.
func (s *GlobalConf) GetAuthJWTExclude() []AuthInternalUserPermission {
	return s.AuthJWTExclude
}

// GetAuthJWTInHTTPQuery returns the value of AuthJWTInHTTPQuery.
func (s *GlobalConf) GetAuthJWTInHTTPQuery() OptBool {
	return s.AuthJWTInHTTPQuery
}

// GetAPI returns the value of API.
func (s *GlobalConf) GetAPI() OptBool {
	return s.API
}

// GetApiAddress returns the value of ApiAddress.
func (s *GlobalConf) GetApiAddress() OptString {
	return s.ApiAddress
}

// GetApiEncryption returns the value of ApiEncryption.
func (s *GlobalConf) GetApiEncryption() OptBool {
	return s.ApiEncryption
}

// GetApiServerKey returns the value of ApiServerKey.
func (s *GlobalConf) GetApiServerKey() OptString {
	return s.ApiServerKey
}

// GetApiServerCert returns the value of ApiServerCert.
func (s *GlobalConf) GetApiServerCert() OptString {
	return s.ApiServerCert
}

// GetApiAllowOrigin returns the value of ApiAllowOrigin.
func (s *GlobalConf) GetApiAllowOrigin() OptString {
	return s.ApiAllowOrigin
}

// GetApiTrustedProxies returns the value of ApiTrustedProxies.
func (s *GlobalConf) GetApiTrustedProxies() []string {
	return s.ApiTrustedProxies
}

// GetMetrics returns the value of Metrics.
func (s *GlobalConf) GetMetrics() OptBool {
	return s.Metrics
}

// GetMetricsAddress returns the value of MetricsAddress.
func (s *GlobalConf) GetMetricsAddress() OptString {
	return s.MetricsAddress
}

// GetMetricsEncryption returns the value of MetricsEncryption.
func (s *GlobalConf) GetMetricsEncryption() OptBool {
	return s.MetricsEncryption
}

// GetMetricsServerKey returns the value of MetricsServerKey.
func (s *GlobalConf) GetMetricsServerKey() OptString {
	return s.MetricsServerKey
}

// GetMetricsServerCert returns the value of MetricsServerCert.
func (s *GlobalConf) GetMetricsServerCert() OptString {
	return s.MetricsServerCert
}

// GetMetricsAllowOrigin returns the value of MetricsAllowOrigin.
func (s *GlobalConf) GetMetricsAllowOrigin() OptString {
	return s.MetricsAllowOrigin
}

// GetMetricsTrustedProxies returns the value of MetricsTrustedProxies.
func (s *GlobalConf) GetMetricsTrustedProxies() []string {
	return s.MetricsTrustedProxies
}

// GetPprof returns the value of Pprof.
func (s *GlobalConf) GetPprof() OptBool {
	return s.Pprof
}

// GetPprofAddress returns the value of PprofAddress.
func (s *GlobalConf) GetPprofAddress() OptString {
	return s.PprofAddress
}

// GetPprofEncryption returns the value of PprofEncryption.
func (s *GlobalConf) GetPprofEncryption() OptBool {
	return s.PprofEncryption
}

// GetPprofServerKey returns the value of PprofServerKey.
func (s *GlobalConf) GetPprofServerKey() OptString {
	return s.PprofServerKey
}

// GetPprofServerCert returns the value of PprofServerCert.
func (s *GlobalConf) GetPprofServerCert() OptString {
	return s.PprofServerCert
}

// GetPprofAllowOrigin returns the value of PprofAllowOrigin.
func (s *GlobalConf) GetPprofAllowOrigin() OptString {
	return s.PprofAllowOrigin
}

// GetPprofTrustedProxies returns the value of PprofTrustedProxies.
func (s *GlobalConf) GetPprofTrustedProxies() []string {
	return s.PprofTrustedProxies
}

// GetPlayback returns the value of Playback.
func (s *GlobalConf) GetPlayback() OptBool {
	return s.Playback
}

// GetPlaybackAddress returns the value of PlaybackAddress.
func (s *GlobalConf) GetPlaybackAddress() OptString {
	return s.PlaybackAddress
}

// GetPlaybackEncryption returns the value of PlaybackEncryption.
func (s *GlobalConf) GetPlaybackEncryption() OptBool {
	return s.PlaybackEncryption
}

// GetPlaybackServerKey returns the value of PlaybackServerKey.
func (s *GlobalConf) GetPlaybackServerKey() OptString {
	return s.PlaybackServerKey
}

// GetPlaybackServerCert returns the value of PlaybackServerCert.
func (s *GlobalConf) GetPlaybackServerCert() OptString {
	return s.PlaybackServerCert
}

// GetPlaybackAllowOrigin returns the value of PlaybackAllowOrigin.
func (s *GlobalConf) GetPlaybackAllowOrigin() OptString {
	return s.PlaybackAllowOrigin
}

// GetPlaybackTrustedProxies returns the value of PlaybackTrustedProxies.
func (s *GlobalConf) GetPlaybackTrustedProxies() []string {
	return s.PlaybackTrustedProxies
}

// GetRtsp returns the value of Rtsp.
func (s *GlobalConf) GetRtsp() OptBool {
	return s.Rtsp
}

// GetRtspTransports returns the value of RtspTransports.
func (s *GlobalConf) GetRtspTransports() []string {
	return s.RtspTransports
}

// GetRtspEncryption returns the value of RtspEncryption.
func (s *GlobalConf) GetRtspEncryption() OptString {
	return s.RtspEncryption
}

// GetRtspAddress returns the value of RtspAddress.
func (s *GlobalConf) GetRtspAddress() OptString {
	return s.RtspAddress
}

// GetRtspsAddress returns the value of RtspsAddress.
func (s *GlobalConf) GetRtspsAddress() OptString {
	return s.RtspsAddress
}

// GetRtpAddress returns the value of RtpAddress.
func (s *GlobalConf) GetRtpAddress() OptString {
	return s.RtpAddress
}

// GetRtcpAddress returns the value of RtcpAddress.
func (s *GlobalConf) GetRtcpAddress() OptString {
	return s.RtcpAddress
}

// GetMulticastIPRange returns the value of MulticastIPRange.
func (s *GlobalConf) GetMulticastIPRange() OptString {
	return s.MulticastIPRange
}

// GetMulticastRTPPort returns the value of MulticastRTPPort.
func (s *GlobalConf) GetMulticastRTPPort() OptInt {
	return s.MulticastRTPPort
}

// GetMulticastRTCPPort returns the value of MulticastRTCPPort.
func (s *GlobalConf) GetMulticastRTCPPort() OptInt {
	return s.MulticastRTCPPort
}

// GetRtspServerKey returns the value of RtspServerKey.
func (s *GlobalConf) GetRtspServerKey() OptString {
	return s.RtspServerKey
}

// GetRtspServerCert returns the value of RtspServerCert.
func (s *GlobalConf) GetRtspServerCert() OptString {
	return s.RtspServerCert
}

// GetRtspAuthMethods returns the value of RtspAuthMethods.
func (s *GlobalConf) GetRtspAuthMethods() []string {
	return s.RtspAuthMethods
}

// GetRtmp returns the value of Rtmp.
func (s *GlobalConf) GetRtmp() OptBool {
	return s.Rtmp
}

// GetRtmpAddress returns the value of RtmpAddress.
func (s *GlobalConf) GetRtmpAddress() OptString {
	return s.RtmpAddress
}

// GetRtmpEncryption returns the value of RtmpEncryption.
func (s *GlobalConf) GetRtmpEncryption() OptString {
	return s.RtmpEncryption
}

// GetRtmpsAddress returns the value of RtmpsAddress.
func (s *GlobalConf) GetRtmpsAddress() OptString {
	return s.RtmpsAddress
}

// GetRtmpServerKey returns the value of RtmpServerKey.
func (s *GlobalConf) GetRtmpServerKey() OptString {
	return s.RtmpServerKey
}

// GetRtmpServerCert returns the value of RtmpServerCert.
func (s *GlobalConf) GetRtmpServerCert() OptString {
	return s.RtmpServerCert
}

// GetHls returns the value of Hls.
func (s *GlobalConf) GetHls() OptBool {
	return s.Hls
}

// GetHlsAddress returns the value of HlsAddress.
func (s *GlobalConf) GetHlsAddress() OptString {
	return s.HlsAddress
}

// GetHlsEncryption returns the value of HlsEncryption.
func (s *GlobalConf) GetHlsEncryption() OptBool {
	return s.HlsEncryption
}

// GetHlsServerKey returns the value of HlsServerKey.
func (s *GlobalConf) GetHlsServerKey() OptString {
	return s.HlsServerKey
}

// GetHlsServerCert returns the value of HlsServerCert.
func (s *GlobalConf) GetHlsServerCert() OptString {
	return s.HlsServerCert
}

// GetHlsAllowOrigin returns the value of HlsAllowOrigin.
func (s *GlobalConf) GetHlsAllowOrigin() OptString {
	return s.HlsAllowOrigin
}

// GetHlsTrustedProxies returns the value of HlsTrustedProxies.
func (s *GlobalConf) GetHlsTrustedProxies() []string {
	return s.HlsTrustedProxies
}

// GetHlsAlwaysRemux returns the value of HlsAlwaysRemux.
func (s *GlobalConf) GetHlsAlwaysRemux() OptBool {
	return s.HlsAlwaysRemux
}

// GetHlsVariant returns the value of HlsVariant.
func (s *GlobalConf) GetHlsVariant() OptString {
	return s.HlsVariant
}

// GetHlsSegmentCount returns the value of HlsSegmentCount.
func (s *GlobalConf) GetHlsSegmentCount() OptInt {
	return s.HlsSegmentCount
}

// GetHlsSegmentDuration returns the value of HlsSegmentDuration.
func (s *GlobalConf) GetHlsSegmentDuration() OptString {
	return s.HlsSegmentDuration
}

// GetHlsPartDuration returns the value of HlsPartDuration.
func (s *GlobalConf) GetHlsPartDuration() OptString {
	return s.HlsPartDuration
}

// GetHlsSegmentMaxSize returns the value of HlsSegmentMaxSize.
func (s *GlobalConf) GetHlsSegmentMaxSize() OptString {
	return s.HlsSegmentMaxSize
}

// GetHlsDirectory returns the value of HlsDirectory.
func (s *GlobalConf) GetHlsDirectory() OptString {
	return s.HlsDirectory
}

// GetHlsMuxerCloseAfter returns the value of HlsMuxerCloseAfter.
func (s *GlobalConf) GetHlsMuxerCloseAfter() OptString {
	return s.HlsMuxerCloseAfter
}

// GetWebrtc returns the value of Webrtc.
func (s *GlobalConf) GetWebrtc() OptBool {
	return s.Webrtc
}

// GetWebrtcAddress returns the value of WebrtcAddress.
func (s *GlobalConf) GetWebrtcAddress() OptString {
	return s.WebrtcAddress
}

// GetWebrtcEncryption returns the value of WebrtcEncryption.
func (s *GlobalConf) GetWebrtcEncryption() OptBool {
	return s.WebrtcEncryption
}

// GetWebrtcServerKey returns the value of WebrtcServerKey.
func (s *GlobalConf) GetWebrtcServerKey() OptString {
	return s.WebrtcServerKey
}

// GetWebrtcServerCert returns the value of WebrtcServerCert.
func (s *GlobalConf) GetWebrtcServerCert() OptString {
	return s.WebrtcServerCert
}

// GetWebrtcAllowOrigin returns the value of WebrtcAllowOrigin.
func (s *GlobalConf) GetWebrtcAllowOrigin() OptString {
	return s.WebrtcAllowOrigin
}

// GetWebrtcTrustedProxies returns the value of WebrtcTrustedProxies.
func (s *GlobalConf) GetWebrtcTrustedProxies() []string {
	return s.WebrtcTrustedProxies
}

// GetWebrtcLocalUDPAddress returns the value of WebrtcLocalUDPAddress.
func (s *GlobalConf) GetWebrtcLocalUDPAddress() OptString {
	return s.WebrtcLocalUDPAddress
}

// GetWebrtcLocalTCPAddress returns the value of WebrtcLocalTCPAddress.
func (s *GlobalConf) GetWebrtcLocalTCPAddress() OptString {
	return s.WebrtcLocalTCPAddress
}

// GetWebrtcIPsFromInterfaces returns the value of WebrtcIPsFromInterfaces.
func (s *GlobalConf) GetWebrtcIPsFromInterfaces() OptBool {
	return s.WebrtcIPsFromInterfaces
}

// GetWebrtcIPsFromInterfacesList returns the value of WebrtcIPsFromInterfacesList.
func (s *GlobalConf) GetWebrtcIPsFromInterfacesList() []string {
	return s.WebrtcIPsFromInterfacesList
}

// GetWebrtcAdditionalHosts returns the value of WebrtcAdditionalHosts.
func (s *GlobalConf) GetWebrtcAdditionalHosts() []string {
	return s.WebrtcAdditionalHosts
}

// GetWebrtcICEServers2 returns the value of WebrtcICEServers2.
func (s *GlobalConf) GetWebrtcICEServers2() []GlobalConfWebrtcICEServers2Item {
	return s.WebrtcICEServers2
}

// GetWebrtcHandshakeTimeout returns the value of WebrtcHandshakeTimeout.
func (s *GlobalConf) GetWebrtcHandshakeTimeout() OptString {
	return s.WebrtcHandshakeTimeout
}

// GetWebrtcTrackGatherTimeout returns the value of WebrtcTrackGatherTimeout.
func (s *GlobalConf) GetWebrtcTrackGatherTimeout() OptString {
	return s.WebrtcTrackGatherTimeout
}

// GetWebrtcSTUNGatherTimeout returns the value of WebrtcSTUNGatherTimeout.
func (s *GlobalConf) GetWebrtcSTUNGatherTimeout() OptString {
	return s.WebrtcSTUNGatherTimeout
}

// GetSrt returns the value of Srt.
func (s *GlobalConf) GetSrt() OptBool {
	return s.Srt
}

// GetSrtAddress returns the value of SrtAddress.
func (s *GlobalConf) GetSrtAddress() OptString {
	return s.SrtAddress
}

// SetLogLevel sets the value of LogLevel.
func (s *GlobalConf) SetLogLevel(val OptString) {
	s.LogLevel = val
}

// SetLogDestinations sets the value of LogDestinations.
func (s *GlobalConf) SetLogDestinations(val []string) {
	s.LogDestinations = val
}

// SetLogFile sets the value of LogFile.
func (s *GlobalConf) SetLogFile(val OptString) {
	s.LogFile = val
}

// SetSysLogPrefix sets the value of SysLogPrefix.
func (s *GlobalConf) SetSysLogPrefix(val OptString) {
	s.SysLogPrefix = val
}

// SetReadTimeout sets the value of ReadTimeout.
func (s *GlobalConf) SetReadTimeout(val OptString) {
	s.ReadTimeout = val
}

// SetWriteTimeout sets the value of WriteTimeout.
func (s *GlobalConf) SetWriteTimeout(val OptString) {
	s.WriteTimeout = val
}

// SetWriteQueueSize sets the value of WriteQueueSize.
func (s *GlobalConf) SetWriteQueueSize(val OptInt) {
	s.WriteQueueSize = val
}

// SetUdpMaxPayloadSize sets the value of UdpMaxPayloadSize.
func (s *GlobalConf) SetUdpMaxPayloadSize(val OptInt) {
	s.UdpMaxPayloadSize = val
}

// SetRunOnConnect sets the value of RunOnConnect.
func (s *GlobalConf) SetRunOnConnect(val OptString) {
	s.RunOnConnect = val
}

// SetRunOnConnectRestart sets the value of RunOnConnectRestart.
func (s *GlobalConf) SetRunOnConnectRestart(val OptBool) {
	s.RunOnConnectRestart = val
}

// SetRunOnDisconnect sets the value of RunOnDisconnect.
func (s *GlobalConf) SetRunOnDisconnect(val OptString) {
	s.RunOnDisconnect = val
}

// SetAuthMethod sets the value of AuthMethod.
func (s *GlobalConf) SetAuthMethod(val OptString) {
	s.AuthMethod = val
}

// SetAuthInternalUsers sets the value of AuthInternalUsers.
func (s *GlobalConf) SetAuthInternalUsers(val []AuthInternalUser) {
	s.AuthInternalUsers = val
}

// SetAuthHTTPAddress sets the value of AuthHTTPAddress.
func (s *GlobalConf) SetAuthHTTPAddress(val OptString) {
	s.AuthHTTPAddress = val
}

// SetAuthHTTPExclude sets the value of AuthHTTPExclude.
func (s *GlobalConf) SetAuthHTTPExclude(val []AuthInternalUserPermission) {
	s.AuthHTTPExclude = val
}

// SetAuthJWTJWKS sets the value of AuthJWTJWKS.
func (s *GlobalConf) SetAuthJWTJWKS(val OptString) {
	s.AuthJWTJWKS = val
}

// SetAuthJWTJWKSFingerprint sets the value of AuthJWTJWKSFingerprint.
func (s *GlobalConf) SetAuthJWTJWKSFingerprint(val OptString) {
	s.AuthJWTJWKSFingerprint = val
}

// SetAuthJWTClaimKey sets the value of AuthJWTClaimKey.
func (s *GlobalConf) SetAuthJWTClaimKey(val OptString) {
	s.AuthJWTClaimKey = val
}

// SetAuthJWTExclude sets the value of AuthJWTExclude.
func (s *GlobalConf) SetAuthJWTExclude(val []AuthInternalUserPermission) {
	s.AuthJWTExclude = val
}

// SetAuthJWTInHTTPQuery sets the value of AuthJWTInHTTPQuery.
func (s *GlobalConf) SetAuthJWTInHTTPQuery(val OptBool) {
	s.AuthJWTInHTTPQuery = val
}

// SetAPI sets the value of API.
func (s *GlobalConf) SetAPI(val OptBool) {
	s.API = val
}

// SetApiAddress sets the value of ApiAddress.
func (s *GlobalConf) SetApiAddress(val OptString) {
	s.ApiAddress = val
}

// SetApiEncryption sets the value of ApiEncryption.
func (s *GlobalConf) SetApiEncryption(val OptBool) {
	s.ApiEncryption = val
}

// SetApiServerKey sets the value of ApiServerKey.
func (s *GlobalConf) SetApiServerKey(val OptString) {
	s.ApiServerKey = val
}

// SetApiServerCert sets the value of ApiServerCert.
func (s *GlobalConf) SetApiServerCert(val OptString) {
	s.ApiServerCert = val
}

// SetApiAllowOrigin sets the value of ApiAllowOrigin.
func (s *GlobalConf) SetApiAllowOrigin(val OptString) {
	s.ApiAllowOrigin = val
}

// SetApiTrustedProxies sets the value of ApiTrustedProxies.
func (s *GlobalConf) SetApiTrustedProxies(val []string) {
	s.ApiTrustedProxies = val
}

// SetMetrics sets the value of Metrics.
func (s *GlobalConf) SetMetrics(val OptBool) {
	s.Metrics = val
}

// SetMetricsAddress sets the value of MetricsAddress.
func (s *GlobalConf) SetMetricsAddress(val OptString) {
	s.MetricsAddress = val
}

// SetMetricsEncryption sets the value of MetricsEncryption.
func (s *GlobalConf) SetMetricsEncryption(val OptBool) {
	s.MetricsEncryption = val
}

// SetMetricsServerKey sets the value of MetricsServerKey.
func (s *GlobalConf) SetMetricsServerKey(val OptString) {
	s.MetricsServerKey = val
}

// SetMetricsServerCert sets the value of MetricsServerCert.
func (s *GlobalConf) SetMetricsServerCert(val OptString) {
	s.MetricsServerCert = val
}

// SetMetricsAllowOrigin sets the value of MetricsAllowOrigin.
func (s *GlobalConf) SetMetricsAllowOrigin(val OptString) {
	s.MetricsAllowOrigin = val
}

// SetMetricsTrustedProxies sets the value of MetricsTrustedProxies.
func (s *GlobalConf) SetMetricsTrustedProxies(val []string) {
	s.MetricsTrustedProxies = val
}

// SetPprof sets the value of Pprof.
func (s *GlobalConf) SetPprof(val OptBool) {
	s.Pprof = val
}

// SetPprofAddress sets the value of PprofAddress.
func (s *GlobalConf) SetPprofAddress(val OptString) {
	s.PprofAddress = val
}

// SetPprofEncryption sets the value of PprofEncryption.
func (s *GlobalConf) SetPprofEncryption(val OptBool) {
	s.PprofEncryption = val
}

// SetPprofServerKey sets the value of PprofServerKey.
func (s *GlobalConf) SetPprofServerKey(val OptString) {
	s.PprofServerKey = val
}

// SetPprofServerCert sets the value of PprofServerCert.
func (s *GlobalConf) SetPprofServerCert(val OptString) {
	s.PprofServerCert = val
}

// SetPprofAllowOrigin sets the value of PprofAllowOrigin.
func (s *GlobalConf) SetPprofAllowOrigin(val OptString) {
	s.PprofAllowOrigin = val
}

// SetPprofTrustedProxies sets the value of PprofTrustedProxies.
func (s *GlobalConf) SetPprofTrustedProxies(val []string) {
	s.PprofTrustedProxies = val
}

// SetPlayback sets the value of Playback.
func (s *GlobalConf) SetPlayback(val OptBool) {
	s.Playback = val
}

// SetPlaybackAddress sets the value of PlaybackAddress.
func (s *GlobalConf) SetPlaybackAddress(val OptString) {
	s.PlaybackAddress = val
}

// SetPlaybackEncryption sets the value of PlaybackEncryption.
func (s *GlobalConf) SetPlaybackEncryption(val OptBool) {
	s.PlaybackEncryption = val
}

// SetPlaybackServerKey sets the value of PlaybackServerKey.
func (s *GlobalConf) SetPlaybackServerKey(val OptString) {
	s.PlaybackServerKey = val
}

// SetPlaybackServerCert sets the value of PlaybackServerCert.
func (s *GlobalConf) SetPlaybackServerCert(val OptString) {
	s.PlaybackServerCert = val
}

// SetPlaybackAllowOrigin sets the value of PlaybackAllowOrigin.
func (s *GlobalConf) SetPlaybackAllowOrigin(val OptString) {
	s.PlaybackAllowOrigin = val
}

// SetPlaybackTrustedProxies sets the value of PlaybackTrustedProxies.
func (s *GlobalConf) SetPlaybackTrustedProxies(val []string) {
	s.PlaybackTrustedProxies = val
}

// SetRtsp sets the value of Rtsp.
func (s *GlobalConf) SetRtsp(val OptBool) {
	s.Rtsp = val
}

// SetRtspTransports sets the value of RtspTransports.
func (s *GlobalConf) SetRtspTransports(val []string) {
	s.RtspTransports = val
}

// SetRtspEncryption sets the value of RtspEncryption.
func (s *GlobalConf) SetRtspEncryption(val OptString) {
	s.RtspEncryption = val
}

// SetRtspAddress sets the value of RtspAddress.
func (s *GlobalConf) SetRtspAddress(val OptString) {
	s.RtspAddress = val
}

// SetRtspsAddress sets the value of RtspsAddress.
func (s *GlobalConf) SetRtspsAddress(val OptString) {
	s.RtspsAddress = val
}

// SetRtpAddress sets the value of RtpAddress.
func (s *GlobalConf) SetRtpAddress(val OptString) {
	s.RtpAddress = val
}

// SetRtcpAddress sets the value of RtcpAddress.
func (s *GlobalConf) SetRtcpAddress(val OptString) {
	s.RtcpAddress = val
}

// SetMulticastIPRange sets the value of MulticastIPRange.
func (s *GlobalConf) SetMulticastIPRange(val OptString) {
	s.MulticastIPRange = val
}

// SetMulticastRTPPort sets the value of MulticastRTPPort.
func (s *GlobalConf) SetMulticastRTPPort(val OptInt) {
	s.MulticastRTPPort = val
}

// SetMulticastRTCPPort sets the value of MulticastRTCPPort.
func (s *GlobalConf) SetMulticastRTCPPort(val OptInt) {
	s.MulticastRTCPPort = val
}

// SetRtspServerKey sets the value of RtspServerKey.
func (s *GlobalConf) SetRtspServerKey(val OptString) {
	s.RtspServerKey = val
}

// SetRtspServerCert sets the value of RtspServerCert.
func (s *GlobalConf) SetRtspServerCert(val OptString) {
	s.RtspServerCert = val
}

// SetRtspAuthMethods sets the value of RtspAuthMethods.
func (s *GlobalConf) SetRtspAuthMethods(val []string) {
	s.RtspAuthMethods = val
}

// SetRtmp sets the value of Rtmp.
func (s *GlobalConf) SetRtmp(val OptBool) {
	s.Rtmp = val
}

// SetRtmpAddress sets the value of RtmpAddress.
func (s *GlobalConf) SetRtmpAddress(val OptString) {
	s.RtmpAddress = val
}

// SetRtmpEncryption sets the value of RtmpEncryption.
func (s *GlobalConf) SetRtmpEncryption(val OptString) {
	s.RtmpEncryption = val
}

// SetRtmpsAddress sets the value of RtmpsAddress.
func (s *GlobalConf) SetRtmpsAddress(val OptString) {
	s.RtmpsAddress = val
}

// SetRtmpServerKey sets the value of RtmpServerKey.
func (s *GlobalConf) SetRtmpServerKey(val OptString) {
	s.RtmpServerKey = val
}

// SetRtmpServerCert sets the value of RtmpServerCert.
func (s *GlobalConf) SetRtmpServerCert(val OptString) {
	s.RtmpServerCert = val
}

// SetHls sets the value of Hls.
func (s *GlobalConf) SetHls(val OptBool) {
	s.Hls = val
}

// SetHlsAddress sets the value of HlsAddress.
func (s *GlobalConf) SetHlsAddress(val OptString) {
	s.HlsAddress = val
}

// SetHlsEncryption sets the value of HlsEncryption.
func (s *GlobalConf) SetHlsEncryption(val OptBool) {
	s.HlsEncryption = val
}

// SetHlsServerKey sets the value of HlsServerKey.
func (s *GlobalConf) SetHlsServerKey(val OptString) {
	s.HlsServerKey = val
}

// SetHlsServerCert sets the value of HlsServerCert.
func (s *GlobalConf) SetHlsServerCert(val OptString) {
	s.HlsServerCert = val
}

// SetHlsAllowOrigin sets the value of HlsAllowOrigin.
func (s *GlobalConf) SetHlsAllowOrigin(val OptString) {
	s.HlsAllowOrigin = val
}

// SetHlsTrustedProxies sets the value of HlsTrustedProxies.
func (s *GlobalConf) SetHlsTrustedProxies(val []string) {
	s.HlsTrustedProxies = val
}

// SetHlsAlwaysRemux sets the value of HlsAlwaysRemux.
func (s *GlobalConf) SetHlsAlwaysRemux(val OptBool) {
	s.HlsAlwaysRemux = val
}

// SetHlsVariant sets the value of HlsVariant.
func (s *GlobalConf) SetHlsVariant(val OptString) {
	s.HlsVariant = val
}

// SetHlsSegmentCount sets the value of HlsSegmentCount.
func (s *GlobalConf) SetHlsSegmentCount(val OptInt) {
	s.HlsSegmentCount = val
}

// SetHlsSegmentDuration sets the value of HlsSegmentDuration.
func (s *GlobalConf) SetHlsSegmentDuration(val OptString) {
	s.HlsSegmentDuration = val
}

// SetHlsPartDuration sets the value of HlsPartDuration.
func (s *GlobalConf) SetHlsPartDuration(val OptString) {
	s.HlsPartDuration = val
}

// SetHlsSegmentMaxSize sets the value of HlsSegmentMaxSize.
func (s *GlobalConf) SetHlsSegmentMaxSize(val OptString) {
	s.HlsSegmentMaxSize = val
}

// SetHlsDirectory sets the value of HlsDirectory.
func (s *GlobalConf) SetHlsDirectory(val OptString) {
	s.HlsDirectory = val
}

// SetHlsMuxerCloseAfter sets the value of HlsMuxerCloseAfter.
func (s *GlobalConf) SetHlsMuxerCloseAfter(val OptString) {
	s.HlsMuxerCloseAfter = val
}

// SetWebrtc sets the value of Webrtc.
func (s *GlobalConf) SetWebrtc(val OptBool) {
	s.Webrtc = val
}

// SetWebrtcAddress sets the value of WebrtcAddress.
func (s *GlobalConf) SetWebrtcAddress(val OptString) {
	s.WebrtcAddress = val
}

// SetWebrtcEncryption sets the value of WebrtcEncryption.
func (s *GlobalConf) SetWebrtcEncryption(val OptBool) {
	s.WebrtcEncryption = val
}

// SetWebrtcServerKey sets the value of WebrtcServerKey.
func (s *GlobalConf) SetWebrtcServerKey(val OptString) {
	s.WebrtcServerKey = val
}

// SetWebrtcServerCert sets the value of WebrtcServerCert.
func (s *GlobalConf) SetWebrtcServerCert(val OptString) {
	s.WebrtcServerCert = val
}

// SetWebrtcAllowOrigin sets the value of WebrtcAllowOrigin.
func (s *GlobalConf) SetWebrtcAllowOrigin(val OptString) {
	s.WebrtcAllowOrigin = val
}

// SetWebrtcTrustedProxies sets the value of WebrtcTrustedProxies.
func (s *GlobalConf) SetWebrtcTrustedProxies(val []string) {
	s.WebrtcTrustedProxies = val
}

// SetWebrtcLocalUDPAddress sets the value of WebrtcLocalUDPAddress.
func (s *GlobalConf) SetWebrtcLocalUDPAddress(val OptString) {
	s.WebrtcLocalUDPAddress = val
}

// SetWebrtcLocalTCPAddress sets the value of WebrtcLocalTCPAddress.
func (s *GlobalConf) SetWebrtcLocalTCPAddress(val OptString) {
	s.WebrtcLocalTCPAddress = val
}

// SetWebrtcIPsFromInterfaces sets the value of WebrtcIPsFromInterfaces.
func (s *GlobalConf) SetWebrtcIPsFromInterfaces(val OptBool) {
	s.WebrtcIPsFromInterfaces = val
}

// SetWebrtcIPsFromInterfacesList sets the value of WebrtcIPsFromInterfacesList.
func (s *GlobalConf) SetWebrtcIPsFromInterfacesList(val []string) {
	s.WebrtcIPsFromInterfacesList = val
}

// SetWebrtcAdditionalHosts sets the value of WebrtcAdditionalHosts.
func (s *GlobalConf) SetWebrtcAdditionalHosts(val []string) {
	s.WebrtcAdditionalHosts = val
}

// SetWebrtcICEServers2 sets the value of WebrtcICEServers2.
func (s *GlobalConf) SetWebrtcICEServers2(val []GlobalConfWebrtcICEServers2Item) {
	s.WebrtcICEServers2 = val
}

// SetWebrtcHandshakeTimeout sets the value of WebrtcHandshakeTimeout.
func (s *GlobalConf) SetWebrtcHandshakeTimeout(val OptString) {
	s.WebrtcHandshakeTimeout = val
}

// SetWebrtcTrackGatherTimeout sets the value of WebrtcTrackGatherTimeout.
func (s *GlobalConf) SetWebrtcTrackGatherTimeout(val OptString) {
	s.WebrtcTrackGatherTimeout = val
}

// SetWebrtcSTUNGatherTimeout sets the value of WebrtcSTUNGatherTimeout.
func (s *GlobalConf) SetWebrtcSTUNGatherTimeout(val OptString) {
	s.WebrtcSTUNGatherTimeout = val
}

// SetSrt sets the value of Srt.
func (s *GlobalConf) SetSrt(val OptBool) {
	s.Srt = val
}

// SetSrtAddress sets the value of SrtAddress.
func (s *GlobalConf) SetSrtAddress(val OptString) {
	s.SrtAddress = val
}

func (*GlobalConf) configGlobalGetRes() {}

type GlobalConfWebrtcICEServers2Item struct {
	URL        OptString `json:"url"`
	Username   OptString `json:"username"`
	Password   OptString `json:"password"`
	ClientOnly OptBool   `json:"clientOnly"`
}

// GetURL returns the value of URL.
func (s *GlobalConfWebrtcICEServers2Item) GetURL() OptString {
	return s.URL
}

// GetUsername returns the value of Username.
func (s *GlobalConfWebrtcICEServers2Item) GetUsername() OptString {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *GlobalConfWebrtcICEServers2Item) GetPassword() OptString {
	return s.Password
}

// GetClientOnly returns the value of ClientOnly.
func (s *GlobalConfWebrtcICEServers2Item) GetClientOnly() OptBool {
	return s.ClientOnly
}

// SetURL sets the value of URL.
func (s *GlobalConfWebrtcICEServers2Item) SetURL(val OptString) {
	s.URL = val
}

// SetUsername sets the value of Username.
func (s *GlobalConfWebrtcICEServers2Item) SetUsername(val OptString) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *GlobalConfWebrtcICEServers2Item) SetPassword(val OptString) {
	s.Password = val
}

// SetClientOnly sets the value of ClientOnly.
func (s *GlobalConfWebrtcICEServers2Item) SetClientOnly(val OptBool) {
	s.ClientOnly = val
}

// Ref: #/components/schemas/HLSMuxer
type HLSMuxer struct {
	Path        OptString `json:"path"`
	Created     OptString `json:"created"`
	LastRequest OptString `json:"lastRequest"`
	BytesSent   OptInt64  `json:"bytesSent"`
}

// GetPath returns the value of Path.
func (s *HLSMuxer) GetPath() OptString {
	return s.Path
}

// GetCreated returns the value of Created.
func (s *HLSMuxer) GetCreated() OptString {
	return s.Created
}

// GetLastRequest returns the value of LastRequest.
func (s *HLSMuxer) GetLastRequest() OptString {
	return s.LastRequest
}

// GetBytesSent returns the value of BytesSent.
func (s *HLSMuxer) GetBytesSent() OptInt64 {
	return s.BytesSent
}

// SetPath sets the value of Path.
func (s *HLSMuxer) SetPath(val OptString) {
	s.Path = val
}

// SetCreated sets the value of Created.
func (s *HLSMuxer) SetCreated(val OptString) {
	s.Created = val
}

// SetLastRequest sets the value of LastRequest.
func (s *HLSMuxer) SetLastRequest(val OptString) {
	s.LastRequest = val
}

// SetBytesSent sets the value of BytesSent.
func (s *HLSMuxer) SetBytesSent(val OptInt64) {
	s.BytesSent = val
}

func (*HLSMuxer) hlsMuxersGetRes() {}

// Ref: #/components/schemas/HLSMuxerList
type HLSMuxerList struct {
	PageCount OptInt     `json:"pageCount"`
	ItemCount OptInt     `json:"itemCount"`
	Items     []HLSMuxer `json:"items"`
}

// GetPageCount returns the value of PageCount.
func (s *HLSMuxerList) GetPageCount() OptInt {
	return s.PageCount
}

// GetItemCount returns the value of ItemCount.
func (s *HLSMuxerList) GetItemCount() OptInt {
	return s.ItemCount
}

// GetItems returns the value of Items.
func (s *HLSMuxerList) GetItems() []HLSMuxer {
	return s.Items
}

// SetPageCount sets the value of PageCount.
func (s *HLSMuxerList) SetPageCount(val OptInt) {
	s.PageCount = val
}

// SetItemCount sets the value of ItemCount.
func (s *HLSMuxerList) SetItemCount(val OptInt) {
	s.ItemCount = val
}

// SetItems sets the value of Items.
func (s *HLSMuxerList) SetItems(val []HLSMuxer) {
	s.Items = val
}

func (*HLSMuxerList) hlsMuxersListRes() {}

type HlsMuxersGetBadRequest Error

func (*HlsMuxersGetBadRequest) hlsMuxersGetRes() {}

type HlsMuxersGetInternalServerError Error

func (*HlsMuxersGetInternalServerError) hlsMuxersGetRes() {}

type HlsMuxersGetNotFound Error

func (*HlsMuxersGetNotFound) hlsMuxersGetRes() {}

type HlsMuxersListBadRequest Error

func (*HlsMuxersListBadRequest) hlsMuxersListRes() {}

type HlsMuxersListInternalServerError Error

func (*HlsMuxersListInternalServerError) hlsMuxersListRes() {}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPathReaderType returns new OptPathReaderType with value set to v.
func NewOptPathReaderType(v PathReaderType) OptPathReaderType {
	return OptPathReaderType{
		Value: v,
		Set:   true,
	}
}

// OptPathReaderType is optional PathReaderType.
type OptPathReaderType struct {
	Value PathReaderType
	Set   bool
}

// IsSet returns true if OptPathReaderType was set.
func (o OptPathReaderType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPathReaderType) Reset() {
	var v PathReaderType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPathReaderType) SetTo(v PathReaderType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPathReaderType) Get() (v PathReaderType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPathReaderType) Or(d PathReaderType) PathReaderType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPathSource returns new OptPathSource with value set to v.
func NewOptPathSource(v PathSource) OptPathSource {
	return OptPathSource{
		Value: v,
		Set:   true,
	}
}

// OptPathSource is optional PathSource.
type OptPathSource struct {
	Value PathSource
	Set   bool
}

// IsSet returns true if OptPathSource was set.
func (o OptPathSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPathSource) Reset() {
	var v PathSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPathSource) SetTo(v PathSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPathSource) Get() (v PathSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPathSource) Or(d PathSource) PathSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPathSourceType returns new OptPathSourceType with value set to v.
func NewOptPathSourceType(v PathSourceType) OptPathSourceType {
	return OptPathSourceType{
		Value: v,
		Set:   true,
	}
}

// OptPathSourceType is optional PathSourceType.
type OptPathSourceType struct {
	Value PathSourceType
	Set   bool
}

// IsSet returns true if OptPathSourceType was set.
func (o OptPathSourceType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPathSourceType) Reset() {
	var v PathSourceType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPathSourceType) SetTo(v PathSourceType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPathSourceType) Get() (v PathSourceType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPathSourceType) Or(d PathSourceType) PathSourceType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRTMPConnState returns new OptRTMPConnState with value set to v.
func NewOptRTMPConnState(v RTMPConnState) OptRTMPConnState {
	return OptRTMPConnState{
		Value: v,
		Set:   true,
	}
}

// OptRTMPConnState is optional RTMPConnState.
type OptRTMPConnState struct {
	Value RTMPConnState
	Set   bool
}

// IsSet returns true if OptRTMPConnState was set.
func (o OptRTMPConnState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRTMPConnState) Reset() {
	var v RTMPConnState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRTMPConnState) SetTo(v RTMPConnState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRTMPConnState) Get() (v RTMPConnState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRTMPConnState) Or(d RTMPConnState) RTMPConnState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRTSPSessionState returns new OptRTSPSessionState with value set to v.
func NewOptRTSPSessionState(v RTSPSessionState) OptRTSPSessionState {
	return OptRTSPSessionState{
		Value: v,
		Set:   true,
	}
}

// OptRTSPSessionState is optional RTSPSessionState.
type OptRTSPSessionState struct {
	Value RTSPSessionState
	Set   bool
}

// IsSet returns true if OptRTSPSessionState was set.
func (o OptRTSPSessionState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRTSPSessionState) Reset() {
	var v RTSPSessionState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRTSPSessionState) SetTo(v RTSPSessionState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRTSPSessionState) Get() (v RTSPSessionState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRTSPSessionState) Or(d RTSPSessionState) RTSPSessionState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSRTConnState returns new OptSRTConnState with value set to v.
func NewOptSRTConnState(v SRTConnState) OptSRTConnState {
	return OptSRTConnState{
		Value: v,
		Set:   true,
	}
}

// OptSRTConnState is optional SRTConnState.
type OptSRTConnState struct {
	Value SRTConnState
	Set   bool
}

// IsSet returns true if OptSRTConnState was set.
func (o OptSRTConnState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSRTConnState) Reset() {
	var v SRTConnState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSRTConnState) SetTo(v SRTConnState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSRTConnState) Get() (v SRTConnState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSRTConnState) Or(d SRTConnState) SRTConnState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebRTCSessionState returns new OptWebRTCSessionState with value set to v.
func NewOptWebRTCSessionState(v WebRTCSessionState) OptWebRTCSessionState {
	return OptWebRTCSessionState{
		Value: v,
		Set:   true,
	}
}

// OptWebRTCSessionState is optional WebRTCSessionState.
type OptWebRTCSessionState struct {
	Value WebRTCSessionState
	Set   bool
}

// IsSet returns true if OptWebRTCSessionState was set.
func (o OptWebRTCSessionState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebRTCSessionState) Reset() {
	var v WebRTCSessionState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebRTCSessionState) SetTo(v WebRTCSessionState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebRTCSessionState) Get() (v WebRTCSessionState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebRTCSessionState) Or(d WebRTCSessionState) WebRTCSessionState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Path
type Path struct {
	Name          OptString     `json:"name"`
	ConfName      OptString     `json:"confName"`
	Source        OptPathSource `json:"source"`
	Ready         OptBool       `json:"ready"`
	ReadyTime     OptNilString  `json:"readyTime"`
	Tracks        []string      `json:"tracks"`
	BytesReceived OptInt64      `json:"bytesReceived"`
	BytesSent     OptInt64      `json:"bytesSent"`
	Readers       []PathReader  `json:"readers"`
}

// GetName returns the value of Name.
func (s *Path) GetName() OptString {
	return s.Name
}

// GetConfName returns the value of ConfName.
func (s *Path) GetConfName() OptString {
	return s.ConfName
}

// GetSource returns the value of Source.
func (s *Path) GetSource() OptPathSource {
	return s.Source
}

// GetReady returns the value of Ready.
func (s *Path) GetReady() OptBool {
	return s.Ready
}

// GetReadyTime returns the value of ReadyTime.
func (s *Path) GetReadyTime() OptNilString {
	return s.ReadyTime
}

// GetTracks returns the value of Tracks.
func (s *Path) GetTracks() []string {
	return s.Tracks
}

// GetBytesReceived returns the value of BytesReceived.
func (s *Path) GetBytesReceived() OptInt64 {
	return s.BytesReceived
}

// GetBytesSent returns the value of BytesSent.
func (s *Path) GetBytesSent() OptInt64 {
	return s.BytesSent
}

// GetReaders returns the value of Readers.
func (s *Path) GetReaders() []PathReader {
	return s.Readers
}

// SetName sets the value of Name.
func (s *Path) SetName(val OptString) {
	s.Name = val
}

// SetConfName sets the value of ConfName.
func (s *Path) SetConfName(val OptString) {
	s.ConfName = val
}

// SetSource sets the value of Source.
func (s *Path) SetSource(val OptPathSource) {
	s.Source = val
}

// SetReady sets the value of Ready.
func (s *Path) SetReady(val OptBool) {
	s.Ready = val
}

// SetReadyTime sets the value of ReadyTime.
func (s *Path) SetReadyTime(val OptNilString) {
	s.ReadyTime = val
}

// SetTracks sets the value of Tracks.
func (s *Path) SetTracks(val []string) {
	s.Tracks = val
}

// SetBytesReceived sets the value of BytesReceived.
func (s *Path) SetBytesReceived(val OptInt64) {
	s.BytesReceived = val
}

// SetBytesSent sets the value of BytesSent.
func (s *Path) SetBytesSent(val OptInt64) {
	s.BytesSent = val
}

// SetReaders sets the value of Readers.
func (s *Path) SetReaders(val []PathReader) {
	s.Readers = val
}

func (*Path) pathsGetRes() {}

// Ref: #/components/schemas/PathConf
type PathConf struct {
	Name                       OptString  `json:"name"`
	Source                     OptString  `json:"source"`
	SourceFingerprint          OptString  `json:"sourceFingerprint"`
	SourceOnDemand             OptBool    `json:"sourceOnDemand"`
	SourceOnDemandStartTimeout OptString  `json:"sourceOnDemandStartTimeout"`
	SourceOnDemandCloseAfter   OptString  `json:"sourceOnDemandCloseAfter"`
	MaxReaders                 OptInt     `json:"maxReaders"`
	SrtReadPassphrase          OptString  `json:"srtReadPassphrase"`
	Fallback                   OptString  `json:"fallback"`
	UseAbsoluteTimestamp       OptBool    `json:"useAbsoluteTimestamp"`
	Record                     OptBool    `json:"record"`
	RecordPath                 OptString  `json:"recordPath"`
	RecordFormat               OptString  `json:"recordFormat"`
	RecordPartDuration         OptString  `json:"recordPartDuration"`
	RecordSegmentDuration      OptString  `json:"recordSegmentDuration"`
	RecordDeleteAfter          OptString  `json:"recordDeleteAfter"`
	OverridePublisher          OptBool    `json:"overridePublisher"`
	SrtPublishPassphrase       OptString  `json:"srtPublishPassphrase"`
	RtspTransport              OptString  `json:"rtspTransport"`
	RtspAnyPort                OptBool    `json:"rtspAnyPort"`
	RtspRangeType              OptString  `json:"rtspRangeType"`
	RtspRangeStart             OptString  `json:"rtspRangeStart"`
	SourceRedirect             OptString  `json:"sourceRedirect"`
	RpiCameraCamID             OptInt     `json:"rpiCameraCamID"`
	RpiCameraSecondary         OptBool    `json:"rpiCameraSecondary"`
	RpiCameraWidth             OptInt     `json:"rpiCameraWidth"`
	RpiCameraHeight            OptInt     `json:"rpiCameraHeight"`
	RpiCameraHFlip             OptBool    `json:"rpiCameraHFlip"`
	RpiCameraVFlip             OptBool    `json:"rpiCameraVFlip"`
	RpiCameraBrightness        OptFloat64 `json:"rpiCameraBrightness"`
	RpiCameraContrast          OptFloat64 `json:"rpiCameraContrast"`
	RpiCameraSaturation        OptFloat64 `json:"rpiCameraSaturation"`
	RpiCameraSharpness         OptFloat64 `json:"rpiCameraSharpness"`
	RpiCameraExposure          OptString  `json:"rpiCameraExposure"`
	RpiCameraAWB               OptString  `json:"rpiCameraAWB"`
	RpiCameraAWBGains          []float64  `json:"rpiCameraAWBGains"`
	RpiCameraDenoise           OptString  `json:"rpiCameraDenoise"`
	RpiCameraShutter           OptInt     `json:"rpiCameraShutter"`
	RpiCameraMetering          OptString  `json:"rpiCameraMetering"`
	RpiCameraGain              OptFloat64 `json:"rpiCameraGain"`
	RpiCameraEV                OptFloat64 `json:"rpiCameraEV"`
	RpiCameraROI               OptString  `json:"rpiCameraROI"`
	RpiCameraHDR               OptBool    `json:"rpiCameraHDR"`
	RpiCameraTuningFile        OptString  `json:"rpiCameraTuningFile"`
	RpiCameraMode              OptString  `json:"rpiCameraMode"`
	RpiCameraFPS               OptFloat64 `json:"rpiCameraFPS"`
	RpiCameraAfMode            OptString  `json:"rpiCameraAfMode"`
	RpiCameraAfRange           OptString  `json:"rpiCameraAfRange"`
	RpiCameraAfSpeed           OptString  `json:"rpiCameraAfSpeed"`
	RpiCameraLensPosition      OptFloat64 `json:"rpiCameraLensPosition"`
	RpiCameraAfWindow          OptString  `json:"rpiCameraAfWindow"`
	RpiCameraFlickerPeriod     OptInt     `json:"rpiCameraFlickerPeriod"`
	RpiCameraTextOverlayEnable OptBool    `json:"rpiCameraTextOverlayEnable"`
	RpiCameraTextOverlay       OptString  `json:"rpiCameraTextOverlay"`
	RpiCameraCodec             OptString  `json:"rpiCameraCodec"`
	RpiCameraIDRPeriod         OptInt     `json:"rpiCameraIDRPeriod"`
	RpiCameraBitrate           OptInt     `json:"rpiCameraBitrate"`
	RpiCameraProfile           OptString  `json:"rpiCameraProfile"`
	RpiCameraLevel             OptString  `json:"rpiCameraLevel"`
	RpiCameraJPEGQuality       OptInt     `json:"rpiCameraJPEGQuality"`
	RunOnInit                  OptString  `json:"runOnInit"`
	RunOnInitRestart           OptBool    `json:"runOnInitRestart"`
	RunOnDemand                OptString  `json:"runOnDemand"`
	RunOnDemandRestart         OptBool    `json:"runOnDemandRestart"`
	RunOnDemandStartTimeout    OptString  `json:"runOnDemandStartTimeout"`
	RunOnDemandCloseAfter      OptString  `json:"runOnDemandCloseAfter"`
	RunOnUnDemand              OptString  `json:"runOnUnDemand"`
	RunOnReady                 OptString  `json:"runOnReady"`
	RunOnReadyRestart          OptBool    `json:"runOnReadyRestart"`
	RunOnNotReady              OptString  `json:"runOnNotReady"`
	RunOnRead                  OptString  `json:"runOnRead"`
	RunOnReadRestart           OptBool    `json:"runOnReadRestart"`
	RunOnUnread                OptString  `json:"runOnUnread"`
	RunOnRecordSegmentCreate   OptString  `json:"runOnRecordSegmentCreate"`
	RunOnRecordSegmentComplete OptString  `json:"runOnRecordSegmentComplete"`
}

// GetName returns the value of Name.
func (s *PathConf) GetName() OptString {
	return s.Name
}

// GetSource returns the value of Source.
func (s *PathConf) GetSource() OptString {
	return s.Source
}

// GetSourceFingerprint returns the value of SourceFingerprint.
func (s *PathConf) GetSourceFingerprint() OptString {
	return s.SourceFingerprint
}

// GetSourceOnDemand returns the value of SourceOnDemand.
func (s *PathConf) GetSourceOnDemand() OptBool {
	return s.SourceOnDemand
}

// GetSourceOnDemandStartTimeout returns the value of SourceOnDemandStartTimeout.
func (s *PathConf) GetSourceOnDemandStartTimeout() OptString {
	return s.SourceOnDemandStartTimeout
}

// GetSourceOnDemandCloseAfter returns the value of SourceOnDemandCloseAfter.
func (s *PathConf) GetSourceOnDemandCloseAfter() OptString {
	return s.SourceOnDemandCloseAfter
}

// GetMaxReaders returns the value of MaxReaders.
func (s *PathConf) GetMaxReaders() OptInt {
	return s.MaxReaders
}

// GetSrtReadPassphrase returns the value of SrtReadPassphrase.
func (s *PathConf) GetSrtReadPassphrase() OptString {
	return s.SrtReadPassphrase
}

// GetFallback returns the value of Fallback.
func (s *PathConf) GetFallback() OptString {
	return s.Fallback
}

// GetUseAbsoluteTimestamp returns the value of UseAbsoluteTimestamp.
func (s *PathConf) GetUseAbsoluteTimestamp() OptBool {
	return s.UseAbsoluteTimestamp
}

// GetRecord returns the value of Record.
func (s *PathConf) GetRecord() OptBool {
	return s.Record
}

// GetRecordPath returns the value of RecordPath.
func (s *PathConf) GetRecordPath() OptString {
	return s.RecordPath
}

// GetRecordFormat returns the value of RecordFormat.
func (s *PathConf) GetRecordFormat() OptString {
	return s.RecordFormat
}

// GetRecordPartDuration returns the value of RecordPartDuration.
func (s *PathConf) GetRecordPartDuration() OptString {
	return s.RecordPartDuration
}

// GetRecordSegmentDuration returns the value of RecordSegmentDuration.
func (s *PathConf) GetRecordSegmentDuration() OptString {
	return s.RecordSegmentDuration
}

// GetRecordDeleteAfter returns the value of RecordDeleteAfter.
func (s *PathConf) GetRecordDeleteAfter() OptString {
	return s.RecordDeleteAfter
}

// GetOverridePublisher returns the value of OverridePublisher.
func (s *PathConf) GetOverridePublisher() OptBool {
	return s.OverridePublisher
}

// GetSrtPublishPassphrase returns the value of SrtPublishPassphrase.
func (s *PathConf) GetSrtPublishPassphrase() OptString {
	return s.SrtPublishPassphrase
}

// GetRtspTransport returns the value of RtspTransport.
func (s *PathConf) GetRtspTransport() OptString {
	return s.RtspTransport
}

// GetRtspAnyPort returns the value of RtspAnyPort.
func (s *PathConf) GetRtspAnyPort() OptBool {
	return s.RtspAnyPort
}

// GetRtspRangeType returns the value of RtspRangeType.
func (s *PathConf) GetRtspRangeType() OptString {
	return s.RtspRangeType
}

// GetRtspRangeStart returns the value of RtspRangeStart.
func (s *PathConf) GetRtspRangeStart() OptString {
	return s.RtspRangeStart
}

// GetSourceRedirect returns the value of SourceRedirect.
func (s *PathConf) GetSourceRedirect() OptString {
	return s.SourceRedirect
}

// GetRpiCameraCamID returns the value of RpiCameraCamID.
func (s *PathConf) GetRpiCameraCamID() OptInt {
	return s.RpiCameraCamID
}

// GetRpiCameraSecondary returns the value of RpiCameraSecondary.
func (s *PathConf) GetRpiCameraSecondary() OptBool {
	return s.RpiCameraSecondary
}

// GetRpiCameraWidth returns the value of RpiCameraWidth.
func (s *PathConf) GetRpiCameraWidth() OptInt {
	return s.RpiCameraWidth
}

// GetRpiCameraHeight returns the value of RpiCameraHeight.
func (s *PathConf) GetRpiCameraHeight() OptInt {
	return s.RpiCameraHeight
}

// GetRpiCameraHFlip returns the value of RpiCameraHFlip.
func (s *PathConf) GetRpiCameraHFlip() OptBool {
	return s.RpiCameraHFlip
}

// GetRpiCameraVFlip returns the value of RpiCameraVFlip.
func (s *PathConf) GetRpiCameraVFlip() OptBool {
	return s.RpiCameraVFlip
}

// GetRpiCameraBrightness returns the value of RpiCameraBrightness.
func (s *PathConf) GetRpiCameraBrightness() OptFloat64 {
	return s.RpiCameraBrightness
}

// GetRpiCameraContrast returns the value of RpiCameraContrast.
func (s *PathConf) GetRpiCameraContrast() OptFloat64 {
	return s.RpiCameraContrast
}

// GetRpiCameraSaturation returns the value of RpiCameraSaturation.
func (s *PathConf) GetRpiCameraSaturation() OptFloat64 {
	return s.RpiCameraSaturation
}

// GetRpiCameraSharpness returns the value of RpiCameraSharpness.
func (s *PathConf) GetRpiCameraSharpness() OptFloat64 {
	return s.RpiCameraSharpness
}

// GetRpiCameraExposure returns the value of RpiCameraExposure.
func (s *PathConf) GetRpiCameraExposure() OptString {
	return s.RpiCameraExposure
}

// GetRpiCameraAWB returns the value of RpiCameraAWB.
func (s *PathConf) GetRpiCameraAWB() OptString {
	return s.RpiCameraAWB
}

// GetRpiCameraAWBGains returns the value of RpiCameraAWBGains.
func (s *PathConf) GetRpiCameraAWBGains() []float64 {
	return s.RpiCameraAWBGains
}

// GetRpiCameraDenoise returns the value of RpiCameraDenoise.
func (s *PathConf) GetRpiCameraDenoise() OptString {
	return s.RpiCameraDenoise
}

// GetRpiCameraShutter returns the value of RpiCameraShutter.
func (s *PathConf) GetRpiCameraShutter() OptInt {
	return s.RpiCameraShutter
}

// GetRpiCameraMetering returns the value of RpiCameraMetering.
func (s *PathConf) GetRpiCameraMetering() OptString {
	return s.RpiCameraMetering
}

// GetRpiCameraGain returns the value of RpiCameraGain.
func (s *PathConf) GetRpiCameraGain() OptFloat64 {
	return s.RpiCameraGain
}

// GetRpiCameraEV returns the value of RpiCameraEV.
func (s *PathConf) GetRpiCameraEV() OptFloat64 {
	return s.RpiCameraEV
}

// GetRpiCameraROI returns the value of RpiCameraROI.
func (s *PathConf) GetRpiCameraROI() OptString {
	return s.RpiCameraROI
}

// GetRpiCameraHDR returns the value of RpiCameraHDR.
func (s *PathConf) GetRpiCameraHDR() OptBool {
	return s.RpiCameraHDR
}

// GetRpiCameraTuningFile returns the value of RpiCameraTuningFile.
func (s *PathConf) GetRpiCameraTuningFile() OptString {
	return s.RpiCameraTuningFile
}

// GetRpiCameraMode returns the value of RpiCameraMode.
func (s *PathConf) GetRpiCameraMode() OptString {
	return s.RpiCameraMode
}

// GetRpiCameraFPS returns the value of RpiCameraFPS.
func (s *PathConf) GetRpiCameraFPS() OptFloat64 {
	return s.RpiCameraFPS
}

// GetRpiCameraAfMode returns the value of RpiCameraAfMode.
func (s *PathConf) GetRpiCameraAfMode() OptString {
	return s.RpiCameraAfMode
}

// GetRpiCameraAfRange returns the value of RpiCameraAfRange.
func (s *PathConf) GetRpiCameraAfRange() OptString {
	return s.RpiCameraAfRange
}

// GetRpiCameraAfSpeed returns the value of RpiCameraAfSpeed.
func (s *PathConf) GetRpiCameraAfSpeed() OptString {
	return s.RpiCameraAfSpeed
}

// GetRpiCameraLensPosition returns the value of RpiCameraLensPosition.
func (s *PathConf) GetRpiCameraLensPosition() OptFloat64 {
	return s.RpiCameraLensPosition
}

// GetRpiCameraAfWindow returns the value of RpiCameraAfWindow.
func (s *PathConf) GetRpiCameraAfWindow() OptString {
	return s.RpiCameraAfWindow
}

// GetRpiCameraFlickerPeriod returns the value of RpiCameraFlickerPeriod.
func (s *PathConf) GetRpiCameraFlickerPeriod() OptInt {
	return s.RpiCameraFlickerPeriod
}

// GetRpiCameraTextOverlayEnable returns the value of RpiCameraTextOverlayEnable.
func (s *PathConf) GetRpiCameraTextOverlayEnable() OptBool {
	return s.RpiCameraTextOverlayEnable
}

// GetRpiCameraTextOverlay returns the value of RpiCameraTextOverlay.
func (s *PathConf) GetRpiCameraTextOverlay() OptString {
	return s.RpiCameraTextOverlay
}

// GetRpiCameraCodec returns the value of RpiCameraCodec.
func (s *PathConf) GetRpiCameraCodec() OptString {
	return s.RpiCameraCodec
}

// GetRpiCameraIDRPeriod returns the value of RpiCameraIDRPeriod.
func (s *PathConf) GetRpiCameraIDRPeriod() OptInt {
	return s.RpiCameraIDRPeriod
}

// GetRpiCameraBitrate returns the value of RpiCameraBitrate.
func (s *PathConf) GetRpiCameraBitrate() OptInt {
	return s.RpiCameraBitrate
}

// GetRpiCameraProfile returns the value of RpiCameraProfile.
func (s *PathConf) GetRpiCameraProfile() OptString {
	return s.RpiCameraProfile
}

// GetRpiCameraLevel returns the value of RpiCameraLevel.
func (s *PathConf) GetRpiCameraLevel() OptString {
	return s.RpiCameraLevel
}

// GetRpiCameraJPEGQuality returns the value of RpiCameraJPEGQuality.
func (s *PathConf) GetRpiCameraJPEGQuality() OptInt {
	return s.RpiCameraJPEGQuality
}

// GetRunOnInit returns the value of RunOnInit.
func (s *PathConf) GetRunOnInit() OptString {
	return s.RunOnInit
}

// GetRunOnInitRestart returns the value of RunOnInitRestart.
func (s *PathConf) GetRunOnInitRestart() OptBool {
	return s.RunOnInitRestart
}

// GetRunOnDemand returns the value of RunOnDemand.
func (s *PathConf) GetRunOnDemand() OptString {
	return s.RunOnDemand
}

// GetRunOnDemandRestart returns the value of RunOnDemandRestart.
func (s *PathConf) GetRunOnDemandRestart() OptBool {
	return s.RunOnDemandRestart
}

// GetRunOnDemandStartTimeout returns the value of RunOnDemandStartTimeout.
func (s *PathConf) GetRunOnDemandStartTimeout() OptString {
	return s.RunOnDemandStartTimeout
}

// GetRunOnDemandCloseAfter returns the value of RunOnDemandCloseAfter.
func (s *PathConf) GetRunOnDemandCloseAfter() OptString {
	return s.RunOnDemandCloseAfter
}

// GetRunOnUnDemand returns the value of RunOnUnDemand.
func (s *PathConf) GetRunOnUnDemand() OptString {
	return s.RunOnUnDemand
}

// GetRunOnReady returns the value of RunOnReady.
func (s *PathConf) GetRunOnReady() OptString {
	return s.RunOnReady
}

// GetRunOnReadyRestart returns the value of RunOnReadyRestart.
func (s *PathConf) GetRunOnReadyRestart() OptBool {
	return s.RunOnReadyRestart
}

// GetRunOnNotReady returns the value of RunOnNotReady.
func (s *PathConf) GetRunOnNotReady() OptString {
	return s.RunOnNotReady
}

// GetRunOnRead returns the value of RunOnRead.
func (s *PathConf) GetRunOnRead() OptString {
	return s.RunOnRead
}

// GetRunOnReadRestart returns the value of RunOnReadRestart.
func (s *PathConf) GetRunOnReadRestart() OptBool {
	return s.RunOnReadRestart
}

// GetRunOnUnread returns the value of RunOnUnread.
func (s *PathConf) GetRunOnUnread() OptString {
	return s.RunOnUnread
}

// GetRunOnRecordSegmentCreate returns the value of RunOnRecordSegmentCreate.
func (s *PathConf) GetRunOnRecordSegmentCreate() OptString {
	return s.RunOnRecordSegmentCreate
}

// GetRunOnRecordSegmentComplete returns the value of RunOnRecordSegmentComplete.
func (s *PathConf) GetRunOnRecordSegmentComplete() OptString {
	return s.RunOnRecordSegmentComplete
}

// SetName sets the value of Name.
func (s *PathConf) SetName(val OptString) {
	s.Name = val
}

// SetSource sets the value of Source.
func (s *PathConf) SetSource(val OptString) {
	s.Source = val
}

// SetSourceFingerprint sets the value of SourceFingerprint.
func (s *PathConf) SetSourceFingerprint(val OptString) {
	s.SourceFingerprint = val
}

// SetSourceOnDemand sets the value of SourceOnDemand.
func (s *PathConf) SetSourceOnDemand(val OptBool) {
	s.SourceOnDemand = val
}

// SetSourceOnDemandStartTimeout sets the value of SourceOnDemandStartTimeout.
func (s *PathConf) SetSourceOnDemandStartTimeout(val OptString) {
	s.SourceOnDemandStartTimeout = val
}

// SetSourceOnDemandCloseAfter sets the value of SourceOnDemandCloseAfter.
func (s *PathConf) SetSourceOnDemandCloseAfter(val OptString) {
	s.SourceOnDemandCloseAfter = val
}

// SetMaxReaders sets the value of MaxReaders.
func (s *PathConf) SetMaxReaders(val OptInt) {
	s.MaxReaders = val
}

// SetSrtReadPassphrase sets the value of SrtReadPassphrase.
func (s *PathConf) SetSrtReadPassphrase(val OptString) {
	s.SrtReadPassphrase = val
}

// SetFallback sets the value of Fallback.
func (s *PathConf) SetFallback(val OptString) {
	s.Fallback = val
}

// SetUseAbsoluteTimestamp sets the value of UseAbsoluteTimestamp.
func (s *PathConf) SetUseAbsoluteTimestamp(val OptBool) {
	s.UseAbsoluteTimestamp = val
}

// SetRecord sets the value of Record.
func (s *PathConf) SetRecord(val OptBool) {
	s.Record = val
}

// SetRecordPath sets the value of RecordPath.
func (s *PathConf) SetRecordPath(val OptString) {
	s.RecordPath = val
}

// SetRecordFormat sets the value of RecordFormat.
func (s *PathConf) SetRecordFormat(val OptString) {
	s.RecordFormat = val
}

// SetRecordPartDuration sets the value of RecordPartDuration.
func (s *PathConf) SetRecordPartDuration(val OptString) {
	s.RecordPartDuration = val
}

// SetRecordSegmentDuration sets the value of RecordSegmentDuration.
func (s *PathConf) SetRecordSegmentDuration(val OptString) {
	s.RecordSegmentDuration = val
}

// SetRecordDeleteAfter sets the value of RecordDeleteAfter.
func (s *PathConf) SetRecordDeleteAfter(val OptString) {
	s.RecordDeleteAfter = val
}

// SetOverridePublisher sets the value of OverridePublisher.
func (s *PathConf) SetOverridePublisher(val OptBool) {
	s.OverridePublisher = val
}

// SetSrtPublishPassphrase sets the value of SrtPublishPassphrase.
func (s *PathConf) SetSrtPublishPassphrase(val OptString) {
	s.SrtPublishPassphrase = val
}

// SetRtspTransport sets the value of RtspTransport.
func (s *PathConf) SetRtspTransport(val OptString) {
	s.RtspTransport = val
}

// SetRtspAnyPort sets the value of RtspAnyPort.
func (s *PathConf) SetRtspAnyPort(val OptBool) {
	s.RtspAnyPort = val
}

// SetRtspRangeType sets the value of RtspRangeType.
func (s *PathConf) SetRtspRangeType(val OptString) {
	s.RtspRangeType = val
}

// SetRtspRangeStart sets the value of RtspRangeStart.
func (s *PathConf) SetRtspRangeStart(val OptString) {
	s.RtspRangeStart = val
}

// SetSourceRedirect sets the value of SourceRedirect.
func (s *PathConf) SetSourceRedirect(val OptString) {
	s.SourceRedirect = val
}

// SetRpiCameraCamID sets the value of RpiCameraCamID.
func (s *PathConf) SetRpiCameraCamID(val OptInt) {
	s.RpiCameraCamID = val
}

// SetRpiCameraSecondary sets the value of RpiCameraSecondary.
func (s *PathConf) SetRpiCameraSecondary(val OptBool) {
	s.RpiCameraSecondary = val
}

// SetRpiCameraWidth sets the value of RpiCameraWidth.
func (s *PathConf) SetRpiCameraWidth(val OptInt) {
	s.RpiCameraWidth = val
}

// SetRpiCameraHeight sets the value of RpiCameraHeight.
func (s *PathConf) SetRpiCameraHeight(val OptInt) {
	s.RpiCameraHeight = val
}

// SetRpiCameraHFlip sets the value of RpiCameraHFlip.
func (s *PathConf) SetRpiCameraHFlip(val OptBool) {
	s.RpiCameraHFlip = val
}

// SetRpiCameraVFlip sets the value of RpiCameraVFlip.
func (s *PathConf) SetRpiCameraVFlip(val OptBool) {
	s.RpiCameraVFlip = val
}

// SetRpiCameraBrightness sets the value of RpiCameraBrightness.
func (s *PathConf) SetRpiCameraBrightness(val OptFloat64) {
	s.RpiCameraBrightness = val
}

// SetRpiCameraContrast sets the value of RpiCameraContrast.
func (s *PathConf) SetRpiCameraContrast(val OptFloat64) {
	s.RpiCameraContrast = val
}

// SetRpiCameraSaturation sets the value of RpiCameraSaturation.
func (s *PathConf) SetRpiCameraSaturation(val OptFloat64) {
	s.RpiCameraSaturation = val
}

// SetRpiCameraSharpness sets the value of RpiCameraSharpness.
func (s *PathConf) SetRpiCameraSharpness(val OptFloat64) {
	s.RpiCameraSharpness = val
}

// SetRpiCameraExposure sets the value of RpiCameraExposure.
func (s *PathConf) SetRpiCameraExposure(val OptString) {
	s.RpiCameraExposure = val
}

// SetRpiCameraAWB sets the value of RpiCameraAWB.
func (s *PathConf) SetRpiCameraAWB(val OptString) {
	s.RpiCameraAWB = val
}

// SetRpiCameraAWBGains sets the value of RpiCameraAWBGains.
func (s *PathConf) SetRpiCameraAWBGains(val []float64) {
	s.RpiCameraAWBGains = val
}

// SetRpiCameraDenoise sets the value of RpiCameraDenoise.
func (s *PathConf) SetRpiCameraDenoise(val OptString) {
	s.RpiCameraDenoise = val
}

// SetRpiCameraShutter sets the value of RpiCameraShutter.
func (s *PathConf) SetRpiCameraShutter(val OptInt) {
	s.RpiCameraShutter = val
}

// SetRpiCameraMetering sets the value of RpiCameraMetering.
func (s *PathConf) SetRpiCameraMetering(val OptString) {
	s.RpiCameraMetering = val
}

// SetRpiCameraGain sets the value of RpiCameraGain.
func (s *PathConf) SetRpiCameraGain(val OptFloat64) {
	s.RpiCameraGain = val
}

// SetRpiCameraEV sets the value of RpiCameraEV.
func (s *PathConf) SetRpiCameraEV(val OptFloat64) {
	s.RpiCameraEV = val
}

// SetRpiCameraROI sets the value of RpiCameraROI.
func (s *PathConf) SetRpiCameraROI(val OptString) {
	s.RpiCameraROI = val
}

// SetRpiCameraHDR sets the value of RpiCameraHDR.
func (s *PathConf) SetRpiCameraHDR(val OptBool) {
	s.RpiCameraHDR = val
}

// SetRpiCameraTuningFile sets the value of RpiCameraTuningFile.
func (s *PathConf) SetRpiCameraTuningFile(val OptString) {
	s.RpiCameraTuningFile = val
}

// SetRpiCameraMode sets the value of RpiCameraMode.
func (s *PathConf) SetRpiCameraMode(val OptString) {
	s.RpiCameraMode = val
}

// SetRpiCameraFPS sets the value of RpiCameraFPS.
func (s *PathConf) SetRpiCameraFPS(val OptFloat64) {
	s.RpiCameraFPS = val
}

// SetRpiCameraAfMode sets the value of RpiCameraAfMode.
func (s *PathConf) SetRpiCameraAfMode(val OptString) {
	s.RpiCameraAfMode = val
}

// SetRpiCameraAfRange sets the value of RpiCameraAfRange.
func (s *PathConf) SetRpiCameraAfRange(val OptString) {
	s.RpiCameraAfRange = val
}

// SetRpiCameraAfSpeed sets the value of RpiCameraAfSpeed.
func (s *PathConf) SetRpiCameraAfSpeed(val OptString) {
	s.RpiCameraAfSpeed = val
}

// SetRpiCameraLensPosition sets the value of RpiCameraLensPosition.
func (s *PathConf) SetRpiCameraLensPosition(val OptFloat64) {
	s.RpiCameraLensPosition = val
}

// SetRpiCameraAfWindow sets the value of RpiCameraAfWindow.
func (s *PathConf) SetRpiCameraAfWindow(val OptString) {
	s.RpiCameraAfWindow = val
}

// SetRpiCameraFlickerPeriod sets the value of RpiCameraFlickerPeriod.
func (s *PathConf) SetRpiCameraFlickerPeriod(val OptInt) {
	s.RpiCameraFlickerPeriod = val
}

// SetRpiCameraTextOverlayEnable sets the value of RpiCameraTextOverlayEnable.
func (s *PathConf) SetRpiCameraTextOverlayEnable(val OptBool) {
	s.RpiCameraTextOverlayEnable = val
}

// SetRpiCameraTextOverlay sets the value of RpiCameraTextOverlay.
func (s *PathConf) SetRpiCameraTextOverlay(val OptString) {
	s.RpiCameraTextOverlay = val
}

// SetRpiCameraCodec sets the value of RpiCameraCodec.
func (s *PathConf) SetRpiCameraCodec(val OptString) {
	s.RpiCameraCodec = val
}

// SetRpiCameraIDRPeriod sets the value of RpiCameraIDRPeriod.
func (s *PathConf) SetRpiCameraIDRPeriod(val OptInt) {
	s.RpiCameraIDRPeriod = val
}

// SetRpiCameraBitrate sets the value of RpiCameraBitrate.
func (s *PathConf) SetRpiCameraBitrate(val OptInt) {
	s.RpiCameraBitrate = val
}

// SetRpiCameraProfile sets the value of RpiCameraProfile.
func (s *PathConf) SetRpiCameraProfile(val OptString) {
	s.RpiCameraProfile = val
}

// SetRpiCameraLevel sets the value of RpiCameraLevel.
func (s *PathConf) SetRpiCameraLevel(val OptString) {
	s.RpiCameraLevel = val
}

// SetRpiCameraJPEGQuality sets the value of RpiCameraJPEGQuality.
func (s *PathConf) SetRpiCameraJPEGQuality(val OptInt) {
	s.RpiCameraJPEGQuality = val
}

// SetRunOnInit sets the value of RunOnInit.
func (s *PathConf) SetRunOnInit(val OptString) {
	s.RunOnInit = val
}

// SetRunOnInitRestart sets the value of RunOnInitRestart.
func (s *PathConf) SetRunOnInitRestart(val OptBool) {
	s.RunOnInitRestart = val
}

// SetRunOnDemand sets the value of RunOnDemand.
func (s *PathConf) SetRunOnDemand(val OptString) {
	s.RunOnDemand = val
}

// SetRunOnDemandRestart sets the value of RunOnDemandRestart.
func (s *PathConf) SetRunOnDemandRestart(val OptBool) {
	s.RunOnDemandRestart = val
}

// SetRunOnDemandStartTimeout sets the value of RunOnDemandStartTimeout.
func (s *PathConf) SetRunOnDemandStartTimeout(val OptString) {
	s.RunOnDemandStartTimeout = val
}

// SetRunOnDemandCloseAfter sets the value of RunOnDemandCloseAfter.
func (s *PathConf) SetRunOnDemandCloseAfter(val OptString) {
	s.RunOnDemandCloseAfter = val
}

// SetRunOnUnDemand sets the value of RunOnUnDemand.
func (s *PathConf) SetRunOnUnDemand(val OptString) {
	s.RunOnUnDemand = val
}

// SetRunOnReady sets the value of RunOnReady.
func (s *PathConf) SetRunOnReady(val OptString) {
	s.RunOnReady = val
}

// SetRunOnReadyRestart sets the value of RunOnReadyRestart.
func (s *PathConf) SetRunOnReadyRestart(val OptBool) {
	s.RunOnReadyRestart = val
}

// SetRunOnNotReady sets the value of RunOnNotReady.
func (s *PathConf) SetRunOnNotReady(val OptString) {
	s.RunOnNotReady = val
}

// SetRunOnRead sets the value of RunOnRead.
func (s *PathConf) SetRunOnRead(val OptString) {
	s.RunOnRead = val
}

// SetRunOnReadRestart sets the value of RunOnReadRestart.
func (s *PathConf) SetRunOnReadRestart(val OptBool) {
	s.RunOnReadRestart = val
}

// SetRunOnUnread sets the value of RunOnUnread.
func (s *PathConf) SetRunOnUnread(val OptString) {
	s.RunOnUnread = val
}

// SetRunOnRecordSegmentCreate sets the value of RunOnRecordSegmentCreate.
func (s *PathConf) SetRunOnRecordSegmentCreate(val OptString) {
	s.RunOnRecordSegmentCreate = val
}

// SetRunOnRecordSegmentComplete sets the value of RunOnRecordSegmentComplete.
func (s *PathConf) SetRunOnRecordSegmentComplete(val OptString) {
	s.RunOnRecordSegmentComplete = val
}

func (*PathConf) configPathDefaultsGetRes() {}
func (*PathConf) configPathsGetRes()        {}

// Ref: #/components/schemas/PathConfList
type PathConfList struct {
	PageCount OptInt     `json:"pageCount"`
	ItemCount OptInt     `json:"itemCount"`
	Items     []PathConf `json:"items"`
}

// GetPageCount returns the value of PageCount.
func (s *PathConfList) GetPageCount() OptInt {
	return s.PageCount
}

// GetItemCount returns the value of ItemCount.
func (s *PathConfList) GetItemCount() OptInt {
	return s.ItemCount
}

// GetItems returns the value of Items.
func (s *PathConfList) GetItems() []PathConf {
	return s.Items
}

// SetPageCount sets the value of PageCount.
func (s *PathConfList) SetPageCount(val OptInt) {
	s.PageCount = val
}

// SetItemCount sets the value of ItemCount.
func (s *PathConfList) SetItemCount(val OptInt) {
	s.ItemCount = val
}

// SetItems sets the value of Items.
func (s *PathConfList) SetItems(val []PathConf) {
	s.Items = val
}

func (*PathConfList) configPathsListRes() {}

// Ref: #/components/schemas/PathList
type PathList struct {
	PageCount OptInt `json:"pageCount"`
	ItemCount OptInt `json:"itemCount"`
	Items     []Path `json:"items"`
}

// GetPageCount returns the value of PageCount.
func (s *PathList) GetPageCount() OptInt {
	return s.PageCount
}

// GetItemCount returns the value of ItemCount.
func (s *PathList) GetItemCount() OptInt {
	return s.ItemCount
}

// GetItems returns the value of Items.
func (s *PathList) GetItems() []Path {
	return s.Items
}

// SetPageCount sets the value of PageCount.
func (s *PathList) SetPageCount(val OptInt) {
	s.PageCount = val
}

// SetItemCount sets the value of ItemCount.
func (s *PathList) SetItemCount(val OptInt) {
	s.ItemCount = val
}

// SetItems sets the value of Items.
func (s *PathList) SetItems(val []Path) {
	s.Items = val
}

func (*PathList) pathsListRes() {}

// Ref: #/components/schemas/PathReader
type PathReader struct {
	Type OptPathReaderType `json:"type"`
	ID   OptString         `json:"id"`
}

// GetType returns the value of Type.
func (s *PathReader) GetType() OptPathReaderType {
	return s.Type
}

// GetID returns the value of ID.
func (s *PathReader) GetID() OptString {
	return s.ID
}

// SetType sets the value of Type.
func (s *PathReader) SetType(val OptPathReaderType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *PathReader) SetID(val OptString) {
	s.ID = val
}

type PathReaderType string

const (
	PathReaderTypeHlsMuxer      PathReaderType = "hlsMuxer"
	PathReaderTypeRtmpConn      PathReaderType = "rtmpConn"
	PathReaderTypeRtspSession   PathReaderType = "rtspSession"
	PathReaderTypeRtspsSession  PathReaderType = "rtspsSession"
	PathReaderTypeSrtConn       PathReaderType = "srtConn"
	PathReaderTypeWebRTCSession PathReaderType = "webRTCSession"
)

// AllValues returns all PathReaderType values.
func (PathReaderType) AllValues() []PathReaderType {
	return []PathReaderType{
		PathReaderTypeHlsMuxer,
		PathReaderTypeRtmpConn,
		PathReaderTypeRtspSession,
		PathReaderTypeRtspsSession,
		PathReaderTypeSrtConn,
		PathReaderTypeWebRTCSession,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PathReaderType) MarshalText() ([]byte, error) {
	switch s {
	case PathReaderTypeHlsMuxer:
		return []byte(s), nil
	case PathReaderTypeRtmpConn:
		return []byte(s), nil
	case PathReaderTypeRtspSession:
		return []byte(s), nil
	case PathReaderTypeRtspsSession:
		return []byte(s), nil
	case PathReaderTypeSrtConn:
		return []byte(s), nil
	case PathReaderTypeWebRTCSession:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PathReaderType) UnmarshalText(data []byte) error {
	switch PathReaderType(data) {
	case PathReaderTypeHlsMuxer:
		*s = PathReaderTypeHlsMuxer
		return nil
	case PathReaderTypeRtmpConn:
		*s = PathReaderTypeRtmpConn
		return nil
	case PathReaderTypeRtspSession:
		*s = PathReaderTypeRtspSession
		return nil
	case PathReaderTypeRtspsSession:
		*s = PathReaderTypeRtspsSession
		return nil
	case PathReaderTypeSrtConn:
		*s = PathReaderTypeSrtConn
		return nil
	case PathReaderTypeWebRTCSession:
		*s = PathReaderTypeWebRTCSession
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PathSource
type PathSource struct {
	Type OptPathSourceType `json:"type"`
	ID   OptString         `json:"id"`
}

// GetType returns the value of Type.
func (s *PathSource) GetType() OptPathSourceType {
	return s.Type
}

// GetID returns the value of ID.
func (s *PathSource) GetID() OptString {
	return s.ID
}

// SetType sets the value of Type.
func (s *PathSource) SetType(val OptPathSourceType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *PathSource) SetID(val OptString) {
	s.ID = val
}

type PathSourceType string

const (
	PathSourceTypeHlsSource       PathSourceType = "hlsSource"
	PathSourceTypeRedirect        PathSourceType = "redirect"
	PathSourceTypeRpiCameraSource PathSourceType = "rpiCameraSource"
	PathSourceTypeRtmpConn        PathSourceType = "rtmpConn"
	PathSourceTypeRtmpSource      PathSourceType = "rtmpSource"
	PathSourceTypeRtspSession     PathSourceType = "rtspSession"
	PathSourceTypeRtspSource      PathSourceType = "rtspSource"
	PathSourceTypeRtspsSession    PathSourceType = "rtspsSession"
	PathSourceTypeSrtConn         PathSourceType = "srtConn"
	PathSourceTypeSrtSource       PathSourceType = "srtSource"
	PathSourceTypeUdpSource       PathSourceType = "udpSource"
	PathSourceTypeWebRTCSession   PathSourceType = "webRTCSession"
	PathSourceTypeWebRTCSource    PathSourceType = "webRTCSource"
)

// AllValues returns all PathSourceType values.
func (PathSourceType) AllValues() []PathSourceType {
	return []PathSourceType{
		PathSourceTypeHlsSource,
		PathSourceTypeRedirect,
		PathSourceTypeRpiCameraSource,
		PathSourceTypeRtmpConn,
		PathSourceTypeRtmpSource,
		PathSourceTypeRtspSession,
		PathSourceTypeRtspSource,
		PathSourceTypeRtspsSession,
		PathSourceTypeSrtConn,
		PathSourceTypeSrtSource,
		PathSourceTypeUdpSource,
		PathSourceTypeWebRTCSession,
		PathSourceTypeWebRTCSource,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PathSourceType) MarshalText() ([]byte, error) {
	switch s {
	case PathSourceTypeHlsSource:
		return []byte(s), nil
	case PathSourceTypeRedirect:
		return []byte(s), nil
	case PathSourceTypeRpiCameraSource:
		return []byte(s), nil
	case PathSourceTypeRtmpConn:
		return []byte(s), nil
	case PathSourceTypeRtmpSource:
		return []byte(s), nil
	case PathSourceTypeRtspSession:
		return []byte(s), nil
	case PathSourceTypeRtspSource:
		return []byte(s), nil
	case PathSourceTypeRtspsSession:
		return []byte(s), nil
	case PathSourceTypeSrtConn:
		return []byte(s), nil
	case PathSourceTypeSrtSource:
		return []byte(s), nil
	case PathSourceTypeUdpSource:
		return []byte(s), nil
	case PathSourceTypeWebRTCSession:
		return []byte(s), nil
	case PathSourceTypeWebRTCSource:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PathSourceType) UnmarshalText(data []byte) error {
	switch PathSourceType(data) {
	case PathSourceTypeHlsSource:
		*s = PathSourceTypeHlsSource
		return nil
	case PathSourceTypeRedirect:
		*s = PathSourceTypeRedirect
		return nil
	case PathSourceTypeRpiCameraSource:
		*s = PathSourceTypeRpiCameraSource
		return nil
	case PathSourceTypeRtmpConn:
		*s = PathSourceTypeRtmpConn
		return nil
	case PathSourceTypeRtmpSource:
		*s = PathSourceTypeRtmpSource
		return nil
	case PathSourceTypeRtspSession:
		*s = PathSourceTypeRtspSession
		return nil
	case PathSourceTypeRtspSource:
		*s = PathSourceTypeRtspSource
		return nil
	case PathSourceTypeRtspsSession:
		*s = PathSourceTypeRtspsSession
		return nil
	case PathSourceTypeSrtConn:
		*s = PathSourceTypeSrtConn
		return nil
	case PathSourceTypeSrtSource:
		*s = PathSourceTypeSrtSource
		return nil
	case PathSourceTypeUdpSource:
		*s = PathSourceTypeUdpSource
		return nil
	case PathSourceTypeWebRTCSession:
		*s = PathSourceTypeWebRTCSession
		return nil
	case PathSourceTypeWebRTCSource:
		*s = PathSourceTypeWebRTCSource
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PathsGetBadRequest Error

func (*PathsGetBadRequest) pathsGetRes() {}

type PathsGetInternalServerError Error

func (*PathsGetInternalServerError) pathsGetRes() {}

type PathsGetNotFound Error

func (*PathsGetNotFound) pathsGetRes() {}

type PathsListBadRequest Error

func (*PathsListBadRequest) pathsListRes() {}

type PathsListInternalServerError Error

func (*PathsListInternalServerError) pathsListRes() {}

// Ref: #/components/schemas/RTMPConn
type RTMPConn struct {
	ID            OptString        `json:"id"`
	Created       OptString        `json:"created"`
	RemoteAddr    OptString        `json:"remoteAddr"`
	State         OptRTMPConnState `json:"state"`
	Path          OptString        `json:"path"`
	Query         OptString        `json:"query"`
	BytesReceived OptInt64         `json:"bytesReceived"`
	BytesSent     OptInt64         `json:"bytesSent"`
}

// GetID returns the value of ID.
func (s *RTMPConn) GetID() OptString {
	return s.ID
}

// GetCreated returns the value of Created.
func (s *RTMPConn) GetCreated() OptString {
	return s.Created
}

// GetRemoteAddr returns the value of RemoteAddr.
func (s *RTMPConn) GetRemoteAddr() OptString {
	return s.RemoteAddr
}

// GetState returns the value of State.
func (s *RTMPConn) GetState() OptRTMPConnState {
	return s.State
}

// GetPath returns the value of Path.
func (s *RTMPConn) GetPath() OptString {
	return s.Path
}

// GetQuery returns the value of Query.
func (s *RTMPConn) GetQuery() OptString {
	return s.Query
}

// GetBytesReceived returns the value of BytesReceived.
func (s *RTMPConn) GetBytesReceived() OptInt64 {
	return s.BytesReceived
}

// GetBytesSent returns the value of BytesSent.
func (s *RTMPConn) GetBytesSent() OptInt64 {
	return s.BytesSent
}

// SetID sets the value of ID.
func (s *RTMPConn) SetID(val OptString) {
	s.ID = val
}

// SetCreated sets the value of Created.
func (s *RTMPConn) SetCreated(val OptString) {
	s.Created = val
}

// SetRemoteAddr sets the value of RemoteAddr.
func (s *RTMPConn) SetRemoteAddr(val OptString) {
	s.RemoteAddr = val
}

// SetState sets the value of State.
func (s *RTMPConn) SetState(val OptRTMPConnState) {
	s.State = val
}

// SetPath sets the value of Path.
func (s *RTMPConn) SetPath(val OptString) {
	s.Path = val
}

// SetQuery sets the value of Query.
func (s *RTMPConn) SetQuery(val OptString) {
	s.Query = val
}

// SetBytesReceived sets the value of BytesReceived.
func (s *RTMPConn) SetBytesReceived(val OptInt64) {
	s.BytesReceived = val
}

// SetBytesSent sets the value of BytesSent.
func (s *RTMPConn) SetBytesSent(val OptInt64) {
	s.BytesSent = val
}

func (*RTMPConn) rtmpConnectionsGetRes()  {}
func (*RTMPConn) rtmpsConnectionsGetRes() {}

// Ref: #/components/schemas/RTMPConnList
type RTMPConnList struct {
	PageCount OptInt     `json:"pageCount"`
	ItemCount OptInt     `json:"itemCount"`
	Items     []RTMPConn `json:"items"`
}

// GetPageCount returns the value of PageCount.
func (s *RTMPConnList) GetPageCount() OptInt {
	return s.PageCount
}

// GetItemCount returns the value of ItemCount.
func (s *RTMPConnList) GetItemCount() OptInt {
	return s.ItemCount
}

// GetItems returns the value of Items.
func (s *RTMPConnList) GetItems() []RTMPConn {
	return s.Items
}

// SetPageCount sets the value of PageCount.
func (s *RTMPConnList) SetPageCount(val OptInt) {
	s.PageCount = val
}

// SetItemCount sets the value of ItemCount.
func (s *RTMPConnList) SetItemCount(val OptInt) {
	s.ItemCount = val
}

// SetItems sets the value of Items.
func (s *RTMPConnList) SetItems(val []RTMPConn) {
	s.Items = val
}

func (*RTMPConnList) rtmpConnsListRes()  {}
func (*RTMPConnList) rtmpsConnsListRes() {}

type RTMPConnState string

const (
	RTMPConnStateIdle    RTMPConnState = "idle"
	RTMPConnStateRead    RTMPConnState = "read"
	RTMPConnStatePublish RTMPConnState = "publish"
)

// AllValues returns all RTMPConnState values.
func (RTMPConnState) AllValues() []RTMPConnState {
	return []RTMPConnState{
		RTMPConnStateIdle,
		RTMPConnStateRead,
		RTMPConnStatePublish,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RTMPConnState) MarshalText() ([]byte, error) {
	switch s {
	case RTMPConnStateIdle:
		return []byte(s), nil
	case RTMPConnStateRead:
		return []byte(s), nil
	case RTMPConnStatePublish:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RTMPConnState) UnmarshalText(data []byte) error {
	switch RTMPConnState(data) {
	case RTMPConnStateIdle:
		*s = RTMPConnStateIdle
		return nil
	case RTMPConnStateRead:
		*s = RTMPConnStateRead
		return nil
	case RTMPConnStatePublish:
		*s = RTMPConnStatePublish
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/RTSPConn
type RTSPConn struct {
	ID            OptString    `json:"id"`
	Created       OptString    `json:"created"`
	RemoteAddr    OptString    `json:"remoteAddr"`
	BytesReceived OptInt64     `json:"bytesReceived"`
	BytesSent     OptInt64     `json:"bytesSent"`
	Session       OptNilString `json:"session"`
}

// GetID returns the value of ID.
func (s *RTSPConn) GetID() OptString {
	return s.ID
}

// GetCreated returns the value of Created.
func (s *RTSPConn) GetCreated() OptString {
	return s.Created
}

// GetRemoteAddr returns the value of RemoteAddr.
func (s *RTSPConn) GetRemoteAddr() OptString {
	return s.RemoteAddr
}

// GetBytesReceived returns the value of BytesReceived.
func (s *RTSPConn) GetBytesReceived() OptInt64 {
	return s.BytesReceived
}

// GetBytesSent returns the value of BytesSent.
func (s *RTSPConn) GetBytesSent() OptInt64 {
	return s.BytesSent
}

// GetSession returns the value of Session.
func (s *RTSPConn) GetSession() OptNilString {
	return s.Session
}

// SetID sets the value of ID.
func (s *RTSPConn) SetID(val OptString) {
	s.ID = val
}

// SetCreated sets the value of Created.
func (s *RTSPConn) SetCreated(val OptString) {
	s.Created = val
}

// SetRemoteAddr sets the value of RemoteAddr.
func (s *RTSPConn) SetRemoteAddr(val OptString) {
	s.RemoteAddr = val
}

// SetBytesReceived sets the value of BytesReceived.
func (s *RTSPConn) SetBytesReceived(val OptInt64) {
	s.BytesReceived = val
}

// SetBytesSent sets the value of BytesSent.
func (s *RTSPConn) SetBytesSent(val OptInt64) {
	s.BytesSent = val
}

// SetSession sets the value of Session.
func (s *RTSPConn) SetSession(val OptNilString) {
	s.Session = val
}

func (*RTSPConn) rtspConnsGetRes()  {}
func (*RTSPConn) rtspsConnsGetRes() {}

// Ref: #/components/schemas/RTSPConnList
type RTSPConnList struct {
	PageCount OptInt     `json:"pageCount"`
	ItemCount OptInt     `json:"itemCount"`
	Items     []RTSPConn `json:"items"`
}

// GetPageCount returns the value of PageCount.
func (s *RTSPConnList) GetPageCount() OptInt {
	return s.PageCount
}

// GetItemCount returns the value of ItemCount.
func (s *RTSPConnList) GetItemCount() OptInt {
	return s.ItemCount
}

// GetItems returns the value of Items.
func (s *RTSPConnList) GetItems() []RTSPConn {
	return s.Items
}

// SetPageCount sets the value of PageCount.
func (s *RTSPConnList) SetPageCount(val OptInt) {
	s.PageCount = val
}

// SetItemCount sets the value of ItemCount.
func (s *RTSPConnList) SetItemCount(val OptInt) {
	s.ItemCount = val
}

// SetItems sets the value of Items.
func (s *RTSPConnList) SetItems(val []RTSPConn) {
	s.Items = val
}

func (*RTSPConnList) rtspConnsListRes()  {}
func (*RTSPConnList) rtspsConnsListRes() {}

// Ref: #/components/schemas/RTSPSession
type RTSPSession struct {
	ID                  OptString           `json:"id"`
	Created             OptString           `json:"created"`
	RemoteAddr          OptString           `json:"remoteAddr"`
	State               OptRTSPSessionState `json:"state"`
	Path                OptString           `json:"path"`
	Query               OptString           `json:"query"`
	Transport           OptNilString        `json:"transport"`
	BytesReceived       OptInt64            `json:"bytesReceived"`
	BytesSent           OptInt64            `json:"bytesSent"`
	RtpPacketsReceived  OptInt64            `json:"rtpPacketsReceived"`
	RtpPacketsSent      OptInt64            `json:"rtpPacketsSent"`
	RtpPacketsLost      OptInt64            `json:"rtpPacketsLost"`
	RtpPacketsInError   OptInt64            `json:"rtpPacketsInError"`
	RtpPacketsJitter    OptFloat64          `json:"rtpPacketsJitter"`
	RtcpPacketsReceived OptInt64            `json:"rtcpPacketsReceived"`
	RtcpPacketsSent     OptInt64            `json:"rtcpPacketsSent"`
	RtcpPacketsInError  OptInt64            `json:"rtcpPacketsInError"`
}

// GetID returns the value of ID.
func (s *RTSPSession) GetID() OptString {
	return s.ID
}

// GetCreated returns the value of Created.
func (s *RTSPSession) GetCreated() OptString {
	return s.Created
}

// GetRemoteAddr returns the value of RemoteAddr.
func (s *RTSPSession) GetRemoteAddr() OptString {
	return s.RemoteAddr
}

// GetState returns the value of State.
func (s *RTSPSession) GetState() OptRTSPSessionState {
	return s.State
}

// GetPath returns the value of Path.
func (s *RTSPSession) GetPath() OptString {
	return s.Path
}

// GetQuery returns the value of Query.
func (s *RTSPSession) GetQuery() OptString {
	return s.Query
}

// GetTransport returns the value of Transport.
func (s *RTSPSession) GetTransport() OptNilString {
	return s.Transport
}

// GetBytesReceived returns the value of BytesReceived.
func (s *RTSPSession) GetBytesReceived() OptInt64 {
	return s.BytesReceived
}

// GetBytesSent returns the value of BytesSent.
func (s *RTSPSession) GetBytesSent() OptInt64 {
	return s.BytesSent
}

// GetRtpPacketsReceived returns the value of RtpPacketsReceived.
func (s *RTSPSession) GetRtpPacketsReceived() OptInt64 {
	return s.RtpPacketsReceived
}

// GetRtpPacketsSent returns the value of RtpPacketsSent.
func (s *RTSPSession) GetRtpPacketsSent() OptInt64 {
	return s.RtpPacketsSent
}

// GetRtpPacketsLost returns the value of RtpPacketsLost.
func (s *RTSPSession) GetRtpPacketsLost() OptInt64 {
	return s.RtpPacketsLost
}

// GetRtpPacketsInError returns the value of RtpPacketsInError.
func (s *RTSPSession) GetRtpPacketsInError() OptInt64 {
	return s.RtpPacketsInError
}

// GetRtpPacketsJitter returns the value of RtpPacketsJitter.
func (s *RTSPSession) GetRtpPacketsJitter() OptFloat64 {
	return s.RtpPacketsJitter
}

// GetRtcpPacketsReceived returns the value of RtcpPacketsReceived.
func (s *RTSPSession) GetRtcpPacketsReceived() OptInt64 {
	return s.RtcpPacketsReceived
}

// GetRtcpPacketsSent returns the value of RtcpPacketsSent.
func (s *RTSPSession) GetRtcpPacketsSent() OptInt64 {
	return s.RtcpPacketsSent
}

// GetRtcpPacketsInError returns the value of RtcpPacketsInError.
func (s *RTSPSession) GetRtcpPacketsInError() OptInt64 {
	return s.RtcpPacketsInError
}

// SetID sets the value of ID.
func (s *RTSPSession) SetID(val OptString) {
	s.ID = val
}

// SetCreated sets the value of Created.
func (s *RTSPSession) SetCreated(val OptString) {
	s.Created = val
}

// SetRemoteAddr sets the value of RemoteAddr.
func (s *RTSPSession) SetRemoteAddr(val OptString) {
	s.RemoteAddr = val
}

// SetState sets the value of State.
func (s *RTSPSession) SetState(val OptRTSPSessionState) {
	s.State = val
}

// SetPath sets the value of Path.
func (s *RTSPSession) SetPath(val OptString) {
	s.Path = val
}

// SetQuery sets the value of Query.
func (s *RTSPSession) SetQuery(val OptString) {
	s.Query = val
}

// SetTransport sets the value of Transport.
func (s *RTSPSession) SetTransport(val OptNilString) {
	s.Transport = val
}

// SetBytesReceived sets the value of BytesReceived.
func (s *RTSPSession) SetBytesReceived(val OptInt64) {
	s.BytesReceived = val
}

// SetBytesSent sets the value of BytesSent.
func (s *RTSPSession) SetBytesSent(val OptInt64) {
	s.BytesSent = val
}

// SetRtpPacketsReceived sets the value of RtpPacketsReceived.
func (s *RTSPSession) SetRtpPacketsReceived(val OptInt64) {
	s.RtpPacketsReceived = val
}

// SetRtpPacketsSent sets the value of RtpPacketsSent.
func (s *RTSPSession) SetRtpPacketsSent(val OptInt64) {
	s.RtpPacketsSent = val
}

// SetRtpPacketsLost sets the value of RtpPacketsLost.
func (s *RTSPSession) SetRtpPacketsLost(val OptInt64) {
	s.RtpPacketsLost = val
}

// SetRtpPacketsInError sets the value of RtpPacketsInError.
func (s *RTSPSession) SetRtpPacketsInError(val OptInt64) {
	s.RtpPacketsInError = val
}

// SetRtpPacketsJitter sets the value of RtpPacketsJitter.
func (s *RTSPSession) SetRtpPacketsJitter(val OptFloat64) {
	s.RtpPacketsJitter = val
}

// SetRtcpPacketsReceived sets the value of RtcpPacketsReceived.
func (s *RTSPSession) SetRtcpPacketsReceived(val OptInt64) {
	s.RtcpPacketsReceived = val
}

// SetRtcpPacketsSent sets the value of RtcpPacketsSent.
func (s *RTSPSession) SetRtcpPacketsSent(val OptInt64) {
	s.RtcpPacketsSent = val
}

// SetRtcpPacketsInError sets the value of RtcpPacketsInError.
func (s *RTSPSession) SetRtcpPacketsInError(val OptInt64) {
	s.RtcpPacketsInError = val
}

func (*RTSPSession) rtspSessionsGetRes()  {}
func (*RTSPSession) rtspsSessionsGetRes() {}

// Ref: #/components/schemas/RTSPSessionList
type RTSPSessionList struct {
	PageCount OptInt        `json:"pageCount"`
	ItemCount OptInt        `json:"itemCount"`
	Items     []RTSPSession `json:"items"`
}

// GetPageCount returns the value of PageCount.
func (s *RTSPSessionList) GetPageCount() OptInt {
	return s.PageCount
}

// GetItemCount returns the value of ItemCount.
func (s *RTSPSessionList) GetItemCount() OptInt {
	return s.ItemCount
}

// GetItems returns the value of Items.
func (s *RTSPSessionList) GetItems() []RTSPSession {
	return s.Items
}

// SetPageCount sets the value of PageCount.
func (s *RTSPSessionList) SetPageCount(val OptInt) {
	s.PageCount = val
}

// SetItemCount sets the value of ItemCount.
func (s *RTSPSessionList) SetItemCount(val OptInt) {
	s.ItemCount = val
}

// SetItems sets the value of Items.
func (s *RTSPSessionList) SetItems(val []RTSPSession) {
	s.Items = val
}

func (*RTSPSessionList) rtspSessionsListRes()  {}
func (*RTSPSessionList) rtspsSessionsListRes() {}

type RTSPSessionState string

const (
	RTSPSessionStateIdle    RTSPSessionState = "idle"
	RTSPSessionStateRead    RTSPSessionState = "read"
	RTSPSessionStatePublish RTSPSessionState = "publish"
)

// AllValues returns all RTSPSessionState values.
func (RTSPSessionState) AllValues() []RTSPSessionState {
	return []RTSPSessionState{
		RTSPSessionStateIdle,
		RTSPSessionStateRead,
		RTSPSessionStatePublish,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RTSPSessionState) MarshalText() ([]byte, error) {
	switch s {
	case RTSPSessionStateIdle:
		return []byte(s), nil
	case RTSPSessionStateRead:
		return []byte(s), nil
	case RTSPSessionStatePublish:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RTSPSessionState) UnmarshalText(data []byte) error {
	switch RTSPSessionState(data) {
	case RTSPSessionStateIdle:
		*s = RTSPSessionStateIdle
		return nil
	case RTSPSessionStateRead:
		*s = RTSPSessionStateRead
		return nil
	case RTSPSessionStatePublish:
		*s = RTSPSessionStatePublish
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Recording
type Recording struct {
	Name     OptString          `json:"name"`
	Segments []RecordingSegment `json:"segments"`
}

// GetName returns the value of Name.
func (s *Recording) GetName() OptString {
	return s.Name
}

// GetSegments returns the value of Segments.
func (s *Recording) GetSegments() []RecordingSegment {
	return s.Segments
}

// SetName sets the value of Name.
func (s *Recording) SetName(val OptString) {
	s.Name = val
}

// SetSegments sets the value of Segments.
func (s *Recording) SetSegments(val []RecordingSegment) {
	s.Segments = val
}

func (*Recording) recordingsGetRes() {}

// Ref: #/components/schemas/RecordingList
type RecordingList struct {
	PageCount OptInt      `json:"pageCount"`
	ItemCount OptInt      `json:"itemCount"`
	Items     []Recording `json:"items"`
}

// GetPageCount returns the value of PageCount.
func (s *RecordingList) GetPageCount() OptInt {
	return s.PageCount
}

// GetItemCount returns the value of ItemCount.
func (s *RecordingList) GetItemCount() OptInt {
	return s.ItemCount
}

// GetItems returns the value of Items.
func (s *RecordingList) GetItems() []Recording {
	return s.Items
}

// SetPageCount sets the value of PageCount.
func (s *RecordingList) SetPageCount(val OptInt) {
	s.PageCount = val
}

// SetItemCount sets the value of ItemCount.
func (s *RecordingList) SetItemCount(val OptInt) {
	s.ItemCount = val
}

// SetItems sets the value of Items.
func (s *RecordingList) SetItems(val []Recording) {
	s.Items = val
}

func (*RecordingList) recordingsListRes() {}

// Ref: #/components/schemas/RecordingSegment
type RecordingSegment struct {
	Start OptString `json:"start"`
}

// GetStart returns the value of Start.
func (s *RecordingSegment) GetStart() OptString {
	return s.Start
}

// SetStart sets the value of Start.
func (s *RecordingSegment) SetStart(val OptString) {
	s.Start = val
}

type RecordingsDeleteSegmentBadRequest Error

func (*RecordingsDeleteSegmentBadRequest) recordingsDeleteSegmentRes() {}

type RecordingsDeleteSegmentInternalServerError Error

func (*RecordingsDeleteSegmentInternalServerError) recordingsDeleteSegmentRes() {}

type RecordingsDeleteSegmentNotFound Error

func (*RecordingsDeleteSegmentNotFound) recordingsDeleteSegmentRes() {}

// RecordingsDeleteSegmentOK is response for RecordingsDeleteSegment operation.
type RecordingsDeleteSegmentOK struct{}

func (*RecordingsDeleteSegmentOK) recordingsDeleteSegmentRes() {}

type RecordingsGetBadRequest Error

func (*RecordingsGetBadRequest) recordingsGetRes() {}

type RecordingsGetInternalServerError Error

func (*RecordingsGetInternalServerError) recordingsGetRes() {}

type RecordingsGetNotFound Error

func (*RecordingsGetNotFound) recordingsGetRes() {}

type RecordingsListBadRequest Error

func (*RecordingsListBadRequest) recordingsListRes() {}

type RecordingsListInternalServerError Error

func (*RecordingsListInternalServerError) recordingsListRes() {}

type RtmpConnectionsGetBadRequest Error

func (*RtmpConnectionsGetBadRequest) rtmpConnectionsGetRes() {}

type RtmpConnectionsGetInternalServerError Error

func (*RtmpConnectionsGetInternalServerError) rtmpConnectionsGetRes() {}

type RtmpConnectionsGetNotFound Error

func (*RtmpConnectionsGetNotFound) rtmpConnectionsGetRes() {}

type RtmpConnsKickBadRequest Error

func (*RtmpConnsKickBadRequest) rtmpConnsKickRes() {}

type RtmpConnsKickInternalServerError Error

func (*RtmpConnsKickInternalServerError) rtmpConnsKickRes() {}

type RtmpConnsKickNotFound Error

func (*RtmpConnsKickNotFound) rtmpConnsKickRes() {}

// RtmpConnsKickOK is response for RtmpConnsKick operation.
type RtmpConnsKickOK struct{}

func (*RtmpConnsKickOK) rtmpConnsKickRes() {}

type RtmpConnsListBadRequest Error

func (*RtmpConnsListBadRequest) rtmpConnsListRes() {}

type RtmpConnsListInternalServerError Error

func (*RtmpConnsListInternalServerError) rtmpConnsListRes() {}

type RtmpsConnectionsGetBadRequest Error

func (*RtmpsConnectionsGetBadRequest) rtmpsConnectionsGetRes() {}

type RtmpsConnectionsGetInternalServerError Error

func (*RtmpsConnectionsGetInternalServerError) rtmpsConnectionsGetRes() {}

type RtmpsConnectionsGetNotFound Error

func (*RtmpsConnectionsGetNotFound) rtmpsConnectionsGetRes() {}

type RtmpsConnsKickBadRequest Error

func (*RtmpsConnsKickBadRequest) rtmpsConnsKickRes() {}

type RtmpsConnsKickInternalServerError Error

func (*RtmpsConnsKickInternalServerError) rtmpsConnsKickRes() {}

type RtmpsConnsKickNotFound Error

func (*RtmpsConnsKickNotFound) rtmpsConnsKickRes() {}

// RtmpsConnsKickOK is response for RtmpsConnsKick operation.
type RtmpsConnsKickOK struct{}

func (*RtmpsConnsKickOK) rtmpsConnsKickRes() {}

type RtmpsConnsListBadRequest Error

func (*RtmpsConnsListBadRequest) rtmpsConnsListRes() {}

type RtmpsConnsListInternalServerError Error

func (*RtmpsConnsListInternalServerError) rtmpsConnsListRes() {}

type RtspConnsGetBadRequest Error

func (*RtspConnsGetBadRequest) rtspConnsGetRes() {}

type RtspConnsGetInternalServerError Error

func (*RtspConnsGetInternalServerError) rtspConnsGetRes() {}

type RtspConnsGetNotFound Error

func (*RtspConnsGetNotFound) rtspConnsGetRes() {}

type RtspConnsListBadRequest Error

func (*RtspConnsListBadRequest) rtspConnsListRes() {}

type RtspConnsListInternalServerError Error

func (*RtspConnsListInternalServerError) rtspConnsListRes() {}

type RtspSessionsGetBadRequest Error

func (*RtspSessionsGetBadRequest) rtspSessionsGetRes() {}

type RtspSessionsGetInternalServerError Error

func (*RtspSessionsGetInternalServerError) rtspSessionsGetRes() {}

type RtspSessionsGetNotFound Error

func (*RtspSessionsGetNotFound) rtspSessionsGetRes() {}

type RtspSessionsKickBadRequest Error

func (*RtspSessionsKickBadRequest) rtspSessionsKickRes() {}

type RtspSessionsKickInternalServerError Error

func (*RtspSessionsKickInternalServerError) rtspSessionsKickRes() {}

type RtspSessionsKickNotFound Error

func (*RtspSessionsKickNotFound) rtspSessionsKickRes() {}

// RtspSessionsKickOK is response for RtspSessionsKick operation.
type RtspSessionsKickOK struct{}

func (*RtspSessionsKickOK) rtspSessionsKickRes() {}

type RtspSessionsListBadRequest Error

func (*RtspSessionsListBadRequest) rtspSessionsListRes() {}

type RtspSessionsListInternalServerError Error

func (*RtspSessionsListInternalServerError) rtspSessionsListRes() {}

type RtspsConnsGetBadRequest Error

func (*RtspsConnsGetBadRequest) rtspsConnsGetRes() {}

type RtspsConnsGetInternalServerError Error

func (*RtspsConnsGetInternalServerError) rtspsConnsGetRes() {}

type RtspsConnsGetNotFound Error

func (*RtspsConnsGetNotFound) rtspsConnsGetRes() {}

type RtspsConnsListBadRequest Error

func (*RtspsConnsListBadRequest) rtspsConnsListRes() {}

type RtspsConnsListInternalServerError Error

func (*RtspsConnsListInternalServerError) rtspsConnsListRes() {}

type RtspsSessionsGetBadRequest Error

func (*RtspsSessionsGetBadRequest) rtspsSessionsGetRes() {}

type RtspsSessionsGetInternalServerError Error

func (*RtspsSessionsGetInternalServerError) rtspsSessionsGetRes() {}

type RtspsSessionsGetNotFound Error

func (*RtspsSessionsGetNotFound) rtspsSessionsGetRes() {}

type RtspsSessionsKickBadRequest Error

func (*RtspsSessionsKickBadRequest) rtspsSessionsKickRes() {}

type RtspsSessionsKickInternalServerError Error

func (*RtspsSessionsKickInternalServerError) rtspsSessionsKickRes() {}

type RtspsSessionsKickNotFound Error

func (*RtspsSessionsKickNotFound) rtspsSessionsKickRes() {}

// RtspsSessionsKickOK is response for RtspsSessionsKick operation.
type RtspsSessionsKickOK struct{}

func (*RtspsSessionsKickOK) rtspsSessionsKickRes() {}

type RtspsSessionsListBadRequest Error

func (*RtspsSessionsListBadRequest) rtspsSessionsListRes() {}

type RtspsSessionsListInternalServerError Error

func (*RtspsSessionsListInternalServerError) rtspsSessionsListRes() {}

// Ref: #/components/schemas/SRTConn
type SRTConn struct {
	ID         OptString       `json:"id"`
	Created    OptString       `json:"created"`
	RemoteAddr OptString       `json:"remoteAddr"`
	State      OptSRTConnState `json:"state"`
	Path       OptString       `json:"path"`
	Query      OptString       `json:"query"`
	// The total number of sent DATA packets, including retransmitted packets.
	PacketsSent OptInt64 `json:"packetsSent"`
	// The total number of received DATA packets, including retransmitted packets.
	PacketsReceived        OptInt64 `json:"packetsReceived"`
	PacketsReceivedBelated OptInt64 `json:"packetsReceivedBelated"`
	// The total number of unique DATA packets sent by the SRT sender.
	PacketsSentUnique OptInt64 `json:"packetsSentUnique"`
	// The total number of unique original, retransmitted or recovered by the packet filter DATA packets
	// received in time, decrypted without errors and, as a result, scheduled for delivery to the
	// upstream application by the SRT receiver.
	PacketsReceivedUnique OptInt64 `json:"packetsReceivedUnique"`
	// The total number of data packets considered or reported as lost at the sender side. Does not
	// correspond to the packets detected as lost at the receiver side.
	PacketsSendLoss OptInt64 `json:"packetsSendLoss"`
	// The total number of SRT DATA packets detected as presently missing (either reordered or lost) at
	// the receiver side.
	PacketsReceivedLoss OptInt64 `json:"packetsReceivedLoss"`
	// The total number of retransmitted packets sent by the SRT sender.
	PacketsRetrans OptInt64 `json:"packetsRetrans"`
	// The total number of retransmitted packets registered at the receiver side.
	PacketsReceivedRetrans OptInt64 `json:"packetsReceivedRetrans"`
	// The total number of sent ACK (Acknowledgement) control packets.
	PacketsSentACK OptInt64 `json:"packetsSentACK"`
	// The total number of received ACK (Acknowledgement) control packets.
	PacketsReceivedACK OptInt64 `json:"packetsReceivedACK"`
	// The total number of sent NAK (Negative Acknowledgement) control packets.
	PacketsSentNAK OptInt64 `json:"packetsSentNAK"`
	// The total number of received NAK (Negative Acknowledgement) control packets.
	PacketsReceivedNAK OptInt64 `json:"packetsReceivedNAK"`
	// The total number of sent KM (Key Material) control packets.
	PacketsSentKM OptInt64 `json:"packetsSentKM"`
	// The total number of received KM (Key Material) control packets.
	PacketsReceivedKM OptInt64 `json:"packetsReceivedKM"`
	// The total accumulated time in microseconds, during which the SRT sender has some data to transmit,
	// including packets that have been sent, but not yet acknowledged.
	UsSndDuration OptInt64 `json:"usSndDuration"`
	// The total number of dropped by the SRT sender DATA packets that have no chance to be delivered in
	// time.
	PacketsSendDrop OptInt64 `json:"packetsSendDrop"`
	// The total number of dropped by the SRT receiver and, as a result, not delivered to the upstream
	// application DATA packets.
	PacketsReceivedDrop OptInt64 `json:"packetsReceivedDrop"`
	// The total number of packets that failed to be decrypted at the receiver side.
	PacketsReceivedUndecrypt OptInt64 `json:"packetsReceivedUndecrypt"`
	// Same as packetsSent, but expressed in bytes, including payload and all the headers (IP, TCP, SRT).
	BytesSent OptInt64 `json:"bytesSent"`
	// Same as packetsReceived, but expressed in bytes, including payload and all the headers (IP, TCP,
	// SRT).
	BytesReceived        OptInt64 `json:"bytesReceived"`
	BytesReceivedBelated OptInt64 `json:"bytesReceivedBelated"`
	// Same as packetsSentUnique, but expressed in bytes, including payload and all the headers (IP, TCP,
	// SRT).
	BytesSentUnique OptInt64 `json:"bytesSentUnique"`
	// Same as packetsReceivedUnique, but expressed in bytes, including payload and all the headers (IP,
	// TCP, SRT).
	BytesReceivedUnique OptInt64 `json:"bytesReceivedUnique"`
	// Same as packetsReceivedLoss, but expressed in bytes, including payload and all the headers (IP,
	// TCP, SRT), bytes for the presently missing (either reordered or lost) packets' payloads are
	// estimated based on the average packet size.
	BytesReceivedLoss OptInt64 `json:"bytesReceivedLoss"`
	// Same as packetsRetrans, but expressed in bytes, including payload and all the headers (IP, TCP,
	// SRT).
	BytesRetrans OptInt64 `json:"bytesRetrans"`
	// Same as packetsReceivedRetrans, but expressed in bytes, including payload and all the headers (IP,
	// TCP, SRT).
	BytesReceivedRetrans OptInt64 `json:"bytesReceivedRetrans"`
	// Same as packetsSendDrop, but expressed in bytes, including payload and all the headers (IP, TCP,
	// SRT).
	BytesSendDrop OptInt64 `json:"bytesSendDrop"`
	// Same as packetsReceivedDrop, but expressed in bytes, including payload and all the headers (IP,
	// TCP, SRT).
	BytesReceivedDrop OptInt64 `json:"bytesReceivedDrop"`
	// Same as packetsReceivedUndecrypt, but expressed in bytes, including payload and all the headers
	// (IP, TCP, SRT).
	BytesReceivedUndecrypt OptInt64 `json:"bytesReceivedUndecrypt"`
	// Current minimum time interval between which consecutive packets are sent, in microseconds.
	UsPacketsSendPeriod OptFloat64 `json:"usPacketsSendPeriod"`
	// The maximum number of packets that can be "in flight".
	PacketsFlowWindow OptInt64 `json:"packetsFlowWindow"`
	// The number of packets in flight.
	PacketsFlightSize OptInt64 `json:"packetsFlightSize"`
	// Smoothed round-trip time (SRTT), an exponentially-weighted moving average (EWMA) of an endpoint's
	// RTT samples, in milliseconds.
	MsRTT OptFloat64 `json:"msRTT"`
	// Current transmission bandwidth, in Mbps.
	MbpsSendRate OptFloat64 `json:"mbpsSendRate"`
	// Current receiving bandwidth, in Mbps.
	MbpsReceiveRate OptFloat64 `json:"mbpsReceiveRate"`
	// Estimated capacity of the network link, in Mbps.
	MbpsLinkCapacity OptFloat64 `json:"mbpsLinkCapacity"`
	// The available space in the sender's buffer, in bytes.
	BytesAvailSendBuf OptInt64 `json:"bytesAvailSendBuf"`
	// The available space in the receiver's buffer, in bytes.
	BytesAvailReceiveBuf OptInt64 `json:"bytesAvailReceiveBuf"`
	// Transmission bandwidth limit, in Mbps.
	MbpsMaxBW OptFloat64 `json:"mbpsMaxBW"`
	// Maximum Segment Size (MSS), in bytes.
	ByteMSS OptInt64 `json:"byteMSS"`
	// The number of packets in the sender's buffer that are already scheduled for sending or even
	// possibly sent, but not yet acknowledged.
	PacketsSendBuf OptInt64 `json:"packetsSendBuf"`
	// Instantaneous (current) value of packetsSndBuf, but expressed in bytes, including payload and all
	// headers (IP, TCP, SRT).
	BytesSendBuf OptInt64 `json:"bytesSendBuf"`
	// The timespan (msec) of packets in the sender's buffer (unacknowledged packets).
	MsSendBuf OptInt64 `json:"msSendBuf"`
	// Timestamp-based Packet Delivery Delay value of the peer.
	MsSendTsbPdDelay OptInt64 `json:"msSendTsbPdDelay"`
	// The number of acknowledged packets in receiver's buffer.
	PacketsReceiveBuf OptInt64 `json:"packetsReceiveBuf"`
	// Instantaneous (current) value of packetsRcvBuf, expressed in bytes, including payload and all
	// headers (IP, TCP, SRT).
	BytesReceiveBuf OptInt64 `json:"bytesReceiveBuf"`
	// The timespan (msec) of acknowledged packets in the receiver's buffer.
	MsReceiveBuf OptInt64 `json:"msReceiveBuf"`
	// Timestamp-based Packet Delivery Delay value set on the socket via SRTO_RCVLATENCY or SRTO_LATENCY.
	MsReceiveTsbPdDelay OptInt64 `json:"msReceiveTsbPdDelay"`
	// Instant value of the packet reorder tolerance.
	PacketsReorderTolerance OptInt64 `json:"packetsReorderTolerance"`
	// Accumulated difference between the current time and the time-to-play of a packet that is received
	// late.
	PacketsReceivedAvgBelatedTime OptInt64 `json:"packetsReceivedAvgBelatedTime"`
	// Percentage of resent data vs. sent data.
	PacketsSendLossRate OptFloat64 `json:"packetsSendLossRate"`
	// Percentage of retransmitted data vs. received data.
	PacketsReceivedLossRate OptFloat64 `json:"packetsReceivedLossRate"`
}

// GetID returns the value of ID.
func (s *SRTConn) GetID() OptString {
	return s.ID
}

// GetCreated returns the value of Created.
func (s *SRTConn) GetCreated() OptString {
	return s.Created
}

// GetRemoteAddr returns the value of RemoteAddr.
func (s *SRTConn) GetRemoteAddr() OptString {
	return s.RemoteAddr
}

// GetState returns the value of State.
func (s *SRTConn) GetState() OptSRTConnState {
	return s.State
}

// GetPath returns the value of Path.
func (s *SRTConn) GetPath() OptString {
	return s.Path
}

// GetQuery returns the value of Query.
func (s *SRTConn) GetQuery() OptString {
	return s.Query
}

// GetPacketsSent returns the value of PacketsSent.
func (s *SRTConn) GetPacketsSent() OptInt64 {
	return s.PacketsSent
}

// GetPacketsReceived returns the value of PacketsReceived.
func (s *SRTConn) GetPacketsReceived() OptInt64 {
	return s.PacketsReceived
}

// GetPacketsReceivedBelated returns the value of PacketsReceivedBelated.
func (s *SRTConn) GetPacketsReceivedBelated() OptInt64 {
	return s.PacketsReceivedBelated
}

// GetPacketsSentUnique returns the value of PacketsSentUnique.
func (s *SRTConn) GetPacketsSentUnique() OptInt64 {
	return s.PacketsSentUnique
}

// GetPacketsReceivedUnique returns the value of PacketsReceivedUnique.
func (s *SRTConn) GetPacketsReceivedUnique() OptInt64 {
	return s.PacketsReceivedUnique
}

// GetPacketsSendLoss returns the value of PacketsSendLoss.
func (s *SRTConn) GetPacketsSendLoss() OptInt64 {
	return s.PacketsSendLoss
}

// GetPacketsReceivedLoss returns the value of PacketsReceivedLoss.
func (s *SRTConn) GetPacketsReceivedLoss() OptInt64 {
	return s.PacketsReceivedLoss
}

// GetPacketsRetrans returns the value of PacketsRetrans.
func (s *SRTConn) GetPacketsRetrans() OptInt64 {
	return s.PacketsRetrans
}

// GetPacketsReceivedRetrans returns the value of PacketsReceivedRetrans.
func (s *SRTConn) GetPacketsReceivedRetrans() OptInt64 {
	return s.PacketsReceivedRetrans
}

// GetPacketsSentACK returns the value of PacketsSentACK.
func (s *SRTConn) GetPacketsSentACK() OptInt64 {
	return s.PacketsSentACK
}

// GetPacketsReceivedACK returns the value of PacketsReceivedACK.
func (s *SRTConn) GetPacketsReceivedACK() OptInt64 {
	return s.PacketsReceivedACK
}

// GetPacketsSentNAK returns the value of PacketsSentNAK.
func (s *SRTConn) GetPacketsSentNAK() OptInt64 {
	return s.PacketsSentNAK
}

// GetPacketsReceivedNAK returns the value of PacketsReceivedNAK.
func (s *SRTConn) GetPacketsReceivedNAK() OptInt64 {
	return s.PacketsReceivedNAK
}

// GetPacketsSentKM returns the value of PacketsSentKM.
func (s *SRTConn) GetPacketsSentKM() OptInt64 {
	return s.PacketsSentKM
}

// GetPacketsReceivedKM returns the value of PacketsReceivedKM.
func (s *SRTConn) GetPacketsReceivedKM() OptInt64 {
	return s.PacketsReceivedKM
}

// GetUsSndDuration returns the value of UsSndDuration.
func (s *SRTConn) GetUsSndDuration() OptInt64 {
	return s.UsSndDuration
}

// GetPacketsSendDrop returns the value of PacketsSendDrop.
func (s *SRTConn) GetPacketsSendDrop() OptInt64 {
	return s.PacketsSendDrop
}

// GetPacketsReceivedDrop returns the value of PacketsReceivedDrop.
func (s *SRTConn) GetPacketsReceivedDrop() OptInt64 {
	return s.PacketsReceivedDrop
}

// GetPacketsReceivedUndecrypt returns the value of PacketsReceivedUndecrypt.
func (s *SRTConn) GetPacketsReceivedUndecrypt() OptInt64 {
	return s.PacketsReceivedUndecrypt
}

// GetBytesSent returns the value of BytesSent.
func (s *SRTConn) GetBytesSent() OptInt64 {
	return s.BytesSent
}

// GetBytesReceived returns the value of BytesReceived.
func (s *SRTConn) GetBytesReceived() OptInt64 {
	return s.BytesReceived
}

// GetBytesReceivedBelated returns the value of BytesReceivedBelated.
func (s *SRTConn) GetBytesReceivedBelated() OptInt64 {
	return s.BytesReceivedBelated
}

// GetBytesSentUnique returns the value of BytesSentUnique.
func (s *SRTConn) GetBytesSentUnique() OptInt64 {
	return s.BytesSentUnique
}

// GetBytesReceivedUnique returns the value of BytesReceivedUnique.
func (s *SRTConn) GetBytesReceivedUnique() OptInt64 {
	return s.BytesReceivedUnique
}

// GetBytesReceivedLoss returns the value of BytesReceivedLoss.
func (s *SRTConn) GetBytesReceivedLoss() OptInt64 {
	return s.BytesReceivedLoss
}

// GetBytesRetrans returns the value of BytesRetrans.
func (s *SRTConn) GetBytesRetrans() OptInt64 {
	return s.BytesRetrans
}

// GetBytesReceivedRetrans returns the value of BytesReceivedRetrans.
func (s *SRTConn) GetBytesReceivedRetrans() OptInt64 {
	return s.BytesReceivedRetrans
}

// GetBytesSendDrop returns the value of BytesSendDrop.
func (s *SRTConn) GetBytesSendDrop() OptInt64 {
	return s.BytesSendDrop
}

// GetBytesReceivedDrop returns the value of BytesReceivedDrop.
func (s *SRTConn) GetBytesReceivedDrop() OptInt64 {
	return s.BytesReceivedDrop
}

// GetBytesReceivedUndecrypt returns the value of BytesReceivedUndecrypt.
func (s *SRTConn) GetBytesReceivedUndecrypt() OptInt64 {
	return s.BytesReceivedUndecrypt
}

// GetUsPacketsSendPeriod returns the value of UsPacketsSendPeriod.
func (s *SRTConn) GetUsPacketsSendPeriod() OptFloat64 {
	return s.UsPacketsSendPeriod
}

// GetPacketsFlowWindow returns the value of PacketsFlowWindow.
func (s *SRTConn) GetPacketsFlowWindow() OptInt64 {
	return s.PacketsFlowWindow
}

// GetPacketsFlightSize returns the value of PacketsFlightSize.
func (s *SRTConn) GetPacketsFlightSize() OptInt64 {
	return s.PacketsFlightSize
}

// GetMsRTT returns the value of MsRTT.
func (s *SRTConn) GetMsRTT() OptFloat64 {
	return s.MsRTT
}

// GetMbpsSendRate returns the value of MbpsSendRate.
func (s *SRTConn) GetMbpsSendRate() OptFloat64 {
	return s.MbpsSendRate
}

// GetMbpsReceiveRate returns the value of MbpsReceiveRate.
func (s *SRTConn) GetMbpsReceiveRate() OptFloat64 {
	return s.MbpsReceiveRate
}

// GetMbpsLinkCapacity returns the value of MbpsLinkCapacity.
func (s *SRTConn) GetMbpsLinkCapacity() OptFloat64 {
	return s.MbpsLinkCapacity
}

// GetBytesAvailSendBuf returns the value of BytesAvailSendBuf.
func (s *SRTConn) GetBytesAvailSendBuf() OptInt64 {
	return s.BytesAvailSendBuf
}

// GetBytesAvailReceiveBuf returns the value of BytesAvailReceiveBuf.
func (s *SRTConn) GetBytesAvailReceiveBuf() OptInt64 {
	return s.BytesAvailReceiveBuf
}

// GetMbpsMaxBW returns the value of MbpsMaxBW.
func (s *SRTConn) GetMbpsMaxBW() OptFloat64 {
	return s.MbpsMaxBW
}

// GetByteMSS returns the value of ByteMSS.
func (s *SRTConn) GetByteMSS() OptInt64 {
	return s.ByteMSS
}

// GetPacketsSendBuf returns the value of PacketsSendBuf.
func (s *SRTConn) GetPacketsSendBuf() OptInt64 {
	return s.PacketsSendBuf
}

// GetBytesSendBuf returns the value of BytesSendBuf.
func (s *SRTConn) GetBytesSendBuf() OptInt64 {
	return s.BytesSendBuf
}

// GetMsSendBuf returns the value of MsSendBuf.
func (s *SRTConn) GetMsSendBuf() OptInt64 {
	return s.MsSendBuf
}

// GetMsSendTsbPdDelay returns the value of MsSendTsbPdDelay.
func (s *SRTConn) GetMsSendTsbPdDelay() OptInt64 {
	return s.MsSendTsbPdDelay
}

// GetPacketsReceiveBuf returns the value of PacketsReceiveBuf.
func (s *SRTConn) GetPacketsReceiveBuf() OptInt64 {
	return s.PacketsReceiveBuf
}

// GetBytesReceiveBuf returns the value of BytesReceiveBuf.
func (s *SRTConn) GetBytesReceiveBuf() OptInt64 {
	return s.BytesReceiveBuf
}

// GetMsReceiveBuf returns the value of MsReceiveBuf.
func (s *SRTConn) GetMsReceiveBuf() OptInt64 {
	return s.MsReceiveBuf
}

// GetMsReceiveTsbPdDelay returns the value of MsReceiveTsbPdDelay.
func (s *SRTConn) GetMsReceiveTsbPdDelay() OptInt64 {
	return s.MsReceiveTsbPdDelay
}

// GetPacketsReorderTolerance returns the value of PacketsReorderTolerance.
func (s *SRTConn) GetPacketsReorderTolerance() OptInt64 {
	return s.PacketsReorderTolerance
}

// GetPacketsReceivedAvgBelatedTime returns the value of PacketsReceivedAvgBelatedTime.
func (s *SRTConn) GetPacketsReceivedAvgBelatedTime() OptInt64 {
	return s.PacketsReceivedAvgBelatedTime
}

// GetPacketsSendLossRate returns the value of PacketsSendLossRate.
func (s *SRTConn) GetPacketsSendLossRate() OptFloat64 {
	return s.PacketsSendLossRate
}

// GetPacketsReceivedLossRate returns the value of PacketsReceivedLossRate.
func (s *SRTConn) GetPacketsReceivedLossRate() OptFloat64 {
	return s.PacketsReceivedLossRate
}

// SetID sets the value of ID.
func (s *SRTConn) SetID(val OptString) {
	s.ID = val
}

// SetCreated sets the value of Created.
func (s *SRTConn) SetCreated(val OptString) {
	s.Created = val
}

// SetRemoteAddr sets the value of RemoteAddr.
func (s *SRTConn) SetRemoteAddr(val OptString) {
	s.RemoteAddr = val
}

// SetState sets the value of State.
func (s *SRTConn) SetState(val OptSRTConnState) {
	s.State = val
}

// SetPath sets the value of Path.
func (s *SRTConn) SetPath(val OptString) {
	s.Path = val
}

// SetQuery sets the value of Query.
func (s *SRTConn) SetQuery(val OptString) {
	s.Query = val
}

// SetPacketsSent sets the value of PacketsSent.
func (s *SRTConn) SetPacketsSent(val OptInt64) {
	s.PacketsSent = val
}

// SetPacketsReceived sets the value of PacketsReceived.
func (s *SRTConn) SetPacketsReceived(val OptInt64) {
	s.PacketsReceived = val
}

// SetPacketsReceivedBelated sets the value of PacketsReceivedBelated.
func (s *SRTConn) SetPacketsReceivedBelated(val OptInt64) {
	s.PacketsReceivedBelated = val
}

// SetPacketsSentUnique sets the value of PacketsSentUnique.
func (s *SRTConn) SetPacketsSentUnique(val OptInt64) {
	s.PacketsSentUnique = val
}

// SetPacketsReceivedUnique sets the value of PacketsReceivedUnique.
func (s *SRTConn) SetPacketsReceivedUnique(val OptInt64) {
	s.PacketsReceivedUnique = val
}

// SetPacketsSendLoss sets the value of PacketsSendLoss.
func (s *SRTConn) SetPacketsSendLoss(val OptInt64) {
	s.PacketsSendLoss = val
}

// SetPacketsReceivedLoss sets the value of PacketsReceivedLoss.
func (s *SRTConn) SetPacketsReceivedLoss(val OptInt64) {
	s.PacketsReceivedLoss = val
}

// SetPacketsRetrans sets the value of PacketsRetrans.
func (s *SRTConn) SetPacketsRetrans(val OptInt64) {
	s.PacketsRetrans = val
}

// SetPacketsReceivedRetrans sets the value of PacketsReceivedRetrans.
func (s *SRTConn) SetPacketsReceivedRetrans(val OptInt64) {
	s.PacketsReceivedRetrans = val
}

// SetPacketsSentACK sets the value of PacketsSentACK.
func (s *SRTConn) SetPacketsSentACK(val OptInt64) {
	s.PacketsSentACK = val
}

// SetPacketsReceivedACK sets the value of PacketsReceivedACK.
func (s *SRTConn) SetPacketsReceivedACK(val OptInt64) {
	s.PacketsReceivedACK = val
}

// SetPacketsSentNAK sets the value of PacketsSentNAK.
func (s *SRTConn) SetPacketsSentNAK(val OptInt64) {
	s.PacketsSentNAK = val
}

// SetPacketsReceivedNAK sets the value of PacketsReceivedNAK.
func (s *SRTConn) SetPacketsReceivedNAK(val OptInt64) {
	s.PacketsReceivedNAK = val
}

// SetPacketsSentKM sets the value of PacketsSentKM.
func (s *SRTConn) SetPacketsSentKM(val OptInt64) {
	s.PacketsSentKM = val
}

// SetPacketsReceivedKM sets the value of PacketsReceivedKM.
func (s *SRTConn) SetPacketsReceivedKM(val OptInt64) {
	s.PacketsReceivedKM = val
}

// SetUsSndDuration sets the value of UsSndDuration.
func (s *SRTConn) SetUsSndDuration(val OptInt64) {
	s.UsSndDuration = val
}

// SetPacketsSendDrop sets the value of PacketsSendDrop.
func (s *SRTConn) SetPacketsSendDrop(val OptInt64) {
	s.PacketsSendDrop = val
}

// SetPacketsReceivedDrop sets the value of PacketsReceivedDrop.
func (s *SRTConn) SetPacketsReceivedDrop(val OptInt64) {
	s.PacketsReceivedDrop = val
}

// SetPacketsReceivedUndecrypt sets the value of PacketsReceivedUndecrypt.
func (s *SRTConn) SetPacketsReceivedUndecrypt(val OptInt64) {
	s.PacketsReceivedUndecrypt = val
}

// SetBytesSent sets the value of BytesSent.
func (s *SRTConn) SetBytesSent(val OptInt64) {
	s.BytesSent = val
}

// SetBytesReceived sets the value of BytesReceived.
func (s *SRTConn) SetBytesReceived(val OptInt64) {
	s.BytesReceived = val
}

// SetBytesReceivedBelated sets the value of BytesReceivedBelated.
func (s *SRTConn) SetBytesReceivedBelated(val OptInt64) {
	s.BytesReceivedBelated = val
}

// SetBytesSentUnique sets the value of BytesSentUnique.
func (s *SRTConn) SetBytesSentUnique(val OptInt64) {
	s.BytesSentUnique = val
}

// SetBytesReceivedUnique sets the value of BytesReceivedUnique.
func (s *SRTConn) SetBytesReceivedUnique(val OptInt64) {
	s.BytesReceivedUnique = val
}

// SetBytesReceivedLoss sets the value of BytesReceivedLoss.
func (s *SRTConn) SetBytesReceivedLoss(val OptInt64) {
	s.BytesReceivedLoss = val
}

// SetBytesRetrans sets the value of BytesRetrans.
func (s *SRTConn) SetBytesRetrans(val OptInt64) {
	s.BytesRetrans = val
}

// SetBytesReceivedRetrans sets the value of BytesReceivedRetrans.
func (s *SRTConn) SetBytesReceivedRetrans(val OptInt64) {
	s.BytesReceivedRetrans = val
}

// SetBytesSendDrop sets the value of BytesSendDrop.
func (s *SRTConn) SetBytesSendDrop(val OptInt64) {
	s.BytesSendDrop = val
}

// SetBytesReceivedDrop sets the value of BytesReceivedDrop.
func (s *SRTConn) SetBytesReceivedDrop(val OptInt64) {
	s.BytesReceivedDrop = val
}

// SetBytesReceivedUndecrypt sets the value of BytesReceivedUndecrypt.
func (s *SRTConn) SetBytesReceivedUndecrypt(val OptInt64) {
	s.BytesReceivedUndecrypt = val
}

// SetUsPacketsSendPeriod sets the value of UsPacketsSendPeriod.
func (s *SRTConn) SetUsPacketsSendPeriod(val OptFloat64) {
	s.UsPacketsSendPeriod = val
}

// SetPacketsFlowWindow sets the value of PacketsFlowWindow.
func (s *SRTConn) SetPacketsFlowWindow(val OptInt64) {
	s.PacketsFlowWindow = val
}

// SetPacketsFlightSize sets the value of PacketsFlightSize.
func (s *SRTConn) SetPacketsFlightSize(val OptInt64) {
	s.PacketsFlightSize = val
}

// SetMsRTT sets the value of MsRTT.
func (s *SRTConn) SetMsRTT(val OptFloat64) {
	s.MsRTT = val
}

// SetMbpsSendRate sets the value of MbpsSendRate.
func (s *SRTConn) SetMbpsSendRate(val OptFloat64) {
	s.MbpsSendRate = val
}

// SetMbpsReceiveRate sets the value of MbpsReceiveRate.
func (s *SRTConn) SetMbpsReceiveRate(val OptFloat64) {
	s.MbpsReceiveRate = val
}

// SetMbpsLinkCapacity sets the value of MbpsLinkCapacity.
func (s *SRTConn) SetMbpsLinkCapacity(val OptFloat64) {
	s.MbpsLinkCapacity = val
}

// SetBytesAvailSendBuf sets the value of BytesAvailSendBuf.
func (s *SRTConn) SetBytesAvailSendBuf(val OptInt64) {
	s.BytesAvailSendBuf = val
}

// SetBytesAvailReceiveBuf sets the value of BytesAvailReceiveBuf.
func (s *SRTConn) SetBytesAvailReceiveBuf(val OptInt64) {
	s.BytesAvailReceiveBuf = val
}

// SetMbpsMaxBW sets the value of MbpsMaxBW.
func (s *SRTConn) SetMbpsMaxBW(val OptFloat64) {
	s.MbpsMaxBW = val
}

// SetByteMSS sets the value of ByteMSS.
func (s *SRTConn) SetByteMSS(val OptInt64) {
	s.ByteMSS = val
}

// SetPacketsSendBuf sets the value of PacketsSendBuf.
func (s *SRTConn) SetPacketsSendBuf(val OptInt64) {
	s.PacketsSendBuf = val
}

// SetBytesSendBuf sets the value of BytesSendBuf.
func (s *SRTConn) SetBytesSendBuf(val OptInt64) {
	s.BytesSendBuf = val
}

// SetMsSendBuf sets the value of MsSendBuf.
func (s *SRTConn) SetMsSendBuf(val OptInt64) {
	s.MsSendBuf = val
}

// SetMsSendTsbPdDelay sets the value of MsSendTsbPdDelay.
func (s *SRTConn) SetMsSendTsbPdDelay(val OptInt64) {
	s.MsSendTsbPdDelay = val
}

// SetPacketsReceiveBuf sets the value of PacketsReceiveBuf.
func (s *SRTConn) SetPacketsReceiveBuf(val OptInt64) {
	s.PacketsReceiveBuf = val
}

// SetBytesReceiveBuf sets the value of BytesReceiveBuf.
func (s *SRTConn) SetBytesReceiveBuf(val OptInt64) {
	s.BytesReceiveBuf = val
}

// SetMsReceiveBuf sets the value of MsReceiveBuf.
func (s *SRTConn) SetMsReceiveBuf(val OptInt64) {
	s.MsReceiveBuf = val
}

// SetMsReceiveTsbPdDelay sets the value of MsReceiveTsbPdDelay.
func (s *SRTConn) SetMsReceiveTsbPdDelay(val OptInt64) {
	s.MsReceiveTsbPdDelay = val
}

// SetPacketsReorderTolerance sets the value of PacketsReorderTolerance.
func (s *SRTConn) SetPacketsReorderTolerance(val OptInt64) {
	s.PacketsReorderTolerance = val
}

// SetPacketsReceivedAvgBelatedTime sets the value of PacketsReceivedAvgBelatedTime.
func (s *SRTConn) SetPacketsReceivedAvgBelatedTime(val OptInt64) {
	s.PacketsReceivedAvgBelatedTime = val
}

// SetPacketsSendLossRate sets the value of PacketsSendLossRate.
func (s *SRTConn) SetPacketsSendLossRate(val OptFloat64) {
	s.PacketsSendLossRate = val
}

// SetPacketsReceivedLossRate sets the value of PacketsReceivedLossRate.
func (s *SRTConn) SetPacketsReceivedLossRate(val OptFloat64) {
	s.PacketsReceivedLossRate = val
}

func (*SRTConn) srtConnsGetRes() {}

// Ref: #/components/schemas/SRTConnList
type SRTConnList struct {
	PageCount OptInt    `json:"pageCount"`
	ItemCount OptInt    `json:"itemCount"`
	Items     []SRTConn `json:"items"`
}

// GetPageCount returns the value of PageCount.
func (s *SRTConnList) GetPageCount() OptInt {
	return s.PageCount
}

// GetItemCount returns the value of ItemCount.
func (s *SRTConnList) GetItemCount() OptInt {
	return s.ItemCount
}

// GetItems returns the value of Items.
func (s *SRTConnList) GetItems() []SRTConn {
	return s.Items
}

// SetPageCount sets the value of PageCount.
func (s *SRTConnList) SetPageCount(val OptInt) {
	s.PageCount = val
}

// SetItemCount sets the value of ItemCount.
func (s *SRTConnList) SetItemCount(val OptInt) {
	s.ItemCount = val
}

// SetItems sets the value of Items.
func (s *SRTConnList) SetItems(val []SRTConn) {
	s.Items = val
}

func (*SRTConnList) srtConnsListRes() {}

type SRTConnState string

const (
	SRTConnStateIdle    SRTConnState = "idle"
	SRTConnStateRead    SRTConnState = "read"
	SRTConnStatePublish SRTConnState = "publish"
)

// AllValues returns all SRTConnState values.
func (SRTConnState) AllValues() []SRTConnState {
	return []SRTConnState{
		SRTConnStateIdle,
		SRTConnStateRead,
		SRTConnStatePublish,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SRTConnState) MarshalText() ([]byte, error) {
	switch s {
	case SRTConnStateIdle:
		return []byte(s), nil
	case SRTConnStateRead:
		return []byte(s), nil
	case SRTConnStatePublish:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SRTConnState) UnmarshalText(data []byte) error {
	switch SRTConnState(data) {
	case SRTConnStateIdle:
		*s = SRTConnStateIdle
		return nil
	case SRTConnStateRead:
		*s = SRTConnStateRead
		return nil
	case SRTConnStatePublish:
		*s = SRTConnStatePublish
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SrtConnsGetBadRequest Error

func (*SrtConnsGetBadRequest) srtConnsGetRes() {}

type SrtConnsGetInternalServerError Error

func (*SrtConnsGetInternalServerError) srtConnsGetRes() {}

type SrtConnsGetNotFound Error

func (*SrtConnsGetNotFound) srtConnsGetRes() {}

type SrtConnsKickBadRequest Error

func (*SrtConnsKickBadRequest) srtConnsKickRes() {}

type SrtConnsKickInternalServerError Error

func (*SrtConnsKickInternalServerError) srtConnsKickRes() {}

type SrtConnsKickNotFound Error

func (*SrtConnsKickNotFound) srtConnsKickRes() {}

// SrtConnsKickOK is response for SrtConnsKick operation.
type SrtConnsKickOK struct{}

func (*SrtConnsKickOK) srtConnsKickRes() {}

type SrtConnsListBadRequest Error

func (*SrtConnsListBadRequest) srtConnsListRes() {}

type SrtConnsListInternalServerError Error

func (*SrtConnsListInternalServerError) srtConnsListRes() {}

// Ref: #/components/schemas/WebRTCSession
type WebRTCSession struct {
	ID                        OptString             `json:"id"`
	Created                   OptString             `json:"created"`
	RemoteAddr                OptString             `json:"remoteAddr"`
	PeerConnectionEstablished OptBool               `json:"peerConnectionEstablished"`
	LocalCandidate            OptString             `json:"localCandidate"`
	RemoteCandidate           OptString             `json:"remoteCandidate"`
	State                     OptWebRTCSessionState `json:"state"`
	Path                      OptString             `json:"path"`
	Query                     OptString             `json:"query"`
	BytesReceived             OptInt64              `json:"bytesReceived"`
	BytesSent                 OptInt64              `json:"bytesSent"`
}

// GetID returns the value of ID.
func (s *WebRTCSession) GetID() OptString {
	return s.ID
}

// GetCreated returns the value of Created.
func (s *WebRTCSession) GetCreated() OptString {
	return s.Created
}

// GetRemoteAddr returns the value of RemoteAddr.
func (s *WebRTCSession) GetRemoteAddr() OptString {
	return s.RemoteAddr
}

// GetPeerConnectionEstablished returns the value of PeerConnectionEstablished.
func (s *WebRTCSession) GetPeerConnectionEstablished() OptBool {
	return s.PeerConnectionEstablished
}

// GetLocalCandidate returns the value of LocalCandidate.
func (s *WebRTCSession) GetLocalCandidate() OptString {
	return s.LocalCandidate
}

// GetRemoteCandidate returns the value of RemoteCandidate.
func (s *WebRTCSession) GetRemoteCandidate() OptString {
	return s.RemoteCandidate
}

// GetState returns the value of State.
func (s *WebRTCSession) GetState() OptWebRTCSessionState {
	return s.State
}

// GetPath returns the value of Path.
func (s *WebRTCSession) GetPath() OptString {
	return s.Path
}

// GetQuery returns the value of Query.
func (s *WebRTCSession) GetQuery() OptString {
	return s.Query
}

// GetBytesReceived returns the value of BytesReceived.
func (s *WebRTCSession) GetBytesReceived() OptInt64 {
	return s.BytesReceived
}

// GetBytesSent returns the value of BytesSent.
func (s *WebRTCSession) GetBytesSent() OptInt64 {
	return s.BytesSent
}

// SetID sets the value of ID.
func (s *WebRTCSession) SetID(val OptString) {
	s.ID = val
}

// SetCreated sets the value of Created.
func (s *WebRTCSession) SetCreated(val OptString) {
	s.Created = val
}

// SetRemoteAddr sets the value of RemoteAddr.
func (s *WebRTCSession) SetRemoteAddr(val OptString) {
	s.RemoteAddr = val
}

// SetPeerConnectionEstablished sets the value of PeerConnectionEstablished.
func (s *WebRTCSession) SetPeerConnectionEstablished(val OptBool) {
	s.PeerConnectionEstablished = val
}

// SetLocalCandidate sets the value of LocalCandidate.
func (s *WebRTCSession) SetLocalCandidate(val OptString) {
	s.LocalCandidate = val
}

// SetRemoteCandidate sets the value of RemoteCandidate.
func (s *WebRTCSession) SetRemoteCandidate(val OptString) {
	s.RemoteCandidate = val
}

// SetState sets the value of State.
func (s *WebRTCSession) SetState(val OptWebRTCSessionState) {
	s.State = val
}

// SetPath sets the value of Path.
func (s *WebRTCSession) SetPath(val OptString) {
	s.Path = val
}

// SetQuery sets the value of Query.
func (s *WebRTCSession) SetQuery(val OptString) {
	s.Query = val
}

// SetBytesReceived sets the value of BytesReceived.
func (s *WebRTCSession) SetBytesReceived(val OptInt64) {
	s.BytesReceived = val
}

// SetBytesSent sets the value of BytesSent.
func (s *WebRTCSession) SetBytesSent(val OptInt64) {
	s.BytesSent = val
}

func (*WebRTCSession) webrtcSessionsGetRes() {}

// Ref: #/components/schemas/WebRTCSessionList
type WebRTCSessionList struct {
	PageCount OptInt          `json:"pageCount"`
	ItemCount OptInt          `json:"itemCount"`
	Items     []WebRTCSession `json:"items"`
}

// GetPageCount returns the value of PageCount.
func (s *WebRTCSessionList) GetPageCount() OptInt {
	return s.PageCount
}

// GetItemCount returns the value of ItemCount.
func (s *WebRTCSessionList) GetItemCount() OptInt {
	return s.ItemCount
}

// GetItems returns the value of Items.
func (s *WebRTCSessionList) GetItems() []WebRTCSession {
	return s.Items
}

// SetPageCount sets the value of PageCount.
func (s *WebRTCSessionList) SetPageCount(val OptInt) {
	s.PageCount = val
}

// SetItemCount sets the value of ItemCount.
func (s *WebRTCSessionList) SetItemCount(val OptInt) {
	s.ItemCount = val
}

// SetItems sets the value of Items.
func (s *WebRTCSessionList) SetItems(val []WebRTCSession) {
	s.Items = val
}

func (*WebRTCSessionList) webrtcSessionsListRes() {}

type WebRTCSessionState string

const (
	WebRTCSessionStateRead    WebRTCSessionState = "read"
	WebRTCSessionStatePublish WebRTCSessionState = "publish"
)

// AllValues returns all WebRTCSessionState values.
func (WebRTCSessionState) AllValues() []WebRTCSessionState {
	return []WebRTCSessionState{
		WebRTCSessionStateRead,
		WebRTCSessionStatePublish,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebRTCSessionState) MarshalText() ([]byte, error) {
	switch s {
	case WebRTCSessionStateRead:
		return []byte(s), nil
	case WebRTCSessionStatePublish:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebRTCSessionState) UnmarshalText(data []byte) error {
	switch WebRTCSessionState(data) {
	case WebRTCSessionStateRead:
		*s = WebRTCSessionStateRead
		return nil
	case WebRTCSessionStatePublish:
		*s = WebRTCSessionStatePublish
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type WebrtcSessionsGetBadRequest Error

func (*WebrtcSessionsGetBadRequest) webrtcSessionsGetRes() {}

type WebrtcSessionsGetInternalServerError Error

func (*WebrtcSessionsGetInternalServerError) webrtcSessionsGetRes() {}

type WebrtcSessionsGetNotFound Error

func (*WebrtcSessionsGetNotFound) webrtcSessionsGetRes() {}

type WebrtcSessionsKickBadRequest Error

func (*WebrtcSessionsKickBadRequest) webrtcSessionsKickRes() {}

type WebrtcSessionsKickInternalServerError Error

func (*WebrtcSessionsKickInternalServerError) webrtcSessionsKickRes() {}

type WebrtcSessionsKickNotFound Error

func (*WebrtcSessionsKickNotFound) webrtcSessionsKickRes() {}

// WebrtcSessionsKickOK is response for WebrtcSessionsKick operation.
type WebrtcSessionsKickOK struct{}

func (*WebrtcSessionsKickOK) webrtcSessionsKickRes() {}

type WebrtcSessionsListBadRequest Error

func (*WebrtcSessionsListBadRequest) webrtcSessionsListRes() {}

type WebrtcSessionsListInternalServerError Error

func (*WebrtcSessionsListInternalServerError) webrtcSessionsListRes() {}
