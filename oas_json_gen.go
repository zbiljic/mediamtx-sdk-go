// Code generated by ogen, DO NOT EDIT.

package mediamtx

import (
	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// Encode implements json.Marshaler.
func (s *AuthInternalUser) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthInternalUser) encodeFields(e *jx.Encoder) {
	{
		if s.User.Set {
			e.FieldStart("user")
			s.User.Encode(e)
		}
	}
	{
		if s.Pass.Set {
			e.FieldStart("pass")
			s.Pass.Encode(e)
		}
	}
	{
		if s.Ips != nil {
			e.FieldStart("ips")
			e.ArrStart()
			for _, elem := range s.Ips {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Permissions != nil {
			e.FieldStart("permissions")
			e.ArrStart()
			for _, elem := range s.Permissions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAuthInternalUser = [4]string{
	0: "user",
	1: "pass",
	2: "ips",
	3: "permissions",
}

// Decode decodes AuthInternalUser from json.
func (s *AuthInternalUser) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthInternalUser to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "user":
			if err := func() error {
				s.User.Reset()
				if err := s.User.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user\"")
			}
		case "pass":
			if err := func() error {
				s.Pass.Reset()
				if err := s.Pass.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pass\"")
			}
		case "ips":
			if err := func() error {
				s.Ips = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Ips = append(s.Ips, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ips\"")
			}
		case "permissions":
			if err := func() error {
				s.Permissions = make([]AuthInternalUserPermission, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AuthInternalUserPermission
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Permissions = append(s.Permissions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"permissions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthInternalUser")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthInternalUser) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthInternalUser) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuthInternalUserPermission) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthInternalUserPermission) encodeFields(e *jx.Encoder) {
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.Path.Set {
			e.FieldStart("path")
			s.Path.Encode(e)
		}
	}
}

var jsonFieldsNameOfAuthInternalUserPermission = [2]string{
	0: "action",
	1: "path",
}

// Decode decodes AuthInternalUserPermission from json.
func (s *AuthInternalUserPermission) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthInternalUserPermission to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "path":
			if err := func() error {
				s.Path.Reset()
				if err := s.Path.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthInternalUserPermission")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthInternalUserPermission) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthInternalUserPermission) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigGlobalGetBadRequest as json.
func (s *ConfigGlobalGetBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigGlobalGetBadRequest from json.
func (s *ConfigGlobalGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigGlobalGetBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigGlobalGetBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigGlobalGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigGlobalGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigGlobalGetInternalServerError as json.
func (s *ConfigGlobalGetInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigGlobalGetInternalServerError from json.
func (s *ConfigGlobalGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigGlobalGetInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigGlobalGetInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigGlobalGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigGlobalGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigGlobalSetBadRequest as json.
func (s *ConfigGlobalSetBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigGlobalSetBadRequest from json.
func (s *ConfigGlobalSetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigGlobalSetBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigGlobalSetBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigGlobalSetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigGlobalSetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigGlobalSetInternalServerError as json.
func (s *ConfigGlobalSetInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigGlobalSetInternalServerError from json.
func (s *ConfigGlobalSetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigGlobalSetInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigGlobalSetInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigGlobalSetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigGlobalSetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigPathDefaultsGetBadRequest as json.
func (s *ConfigPathDefaultsGetBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigPathDefaultsGetBadRequest from json.
func (s *ConfigPathDefaultsGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigPathDefaultsGetBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigPathDefaultsGetBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigPathDefaultsGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigPathDefaultsGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigPathDefaultsGetInternalServerError as json.
func (s *ConfigPathDefaultsGetInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigPathDefaultsGetInternalServerError from json.
func (s *ConfigPathDefaultsGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigPathDefaultsGetInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigPathDefaultsGetInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigPathDefaultsGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigPathDefaultsGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigPathDefaultsPatchBadRequest as json.
func (s *ConfigPathDefaultsPatchBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigPathDefaultsPatchBadRequest from json.
func (s *ConfigPathDefaultsPatchBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigPathDefaultsPatchBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigPathDefaultsPatchBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigPathDefaultsPatchBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigPathDefaultsPatchBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigPathDefaultsPatchInternalServerError as json.
func (s *ConfigPathDefaultsPatchInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigPathDefaultsPatchInternalServerError from json.
func (s *ConfigPathDefaultsPatchInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigPathDefaultsPatchInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigPathDefaultsPatchInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigPathDefaultsPatchInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigPathDefaultsPatchInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigPathsAddBadRequest as json.
func (s *ConfigPathsAddBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigPathsAddBadRequest from json.
func (s *ConfigPathsAddBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigPathsAddBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigPathsAddBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigPathsAddBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigPathsAddBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigPathsAddInternalServerError as json.
func (s *ConfigPathsAddInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigPathsAddInternalServerError from json.
func (s *ConfigPathsAddInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigPathsAddInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigPathsAddInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigPathsAddInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigPathsAddInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigPathsDeleteBadRequest as json.
func (s *ConfigPathsDeleteBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigPathsDeleteBadRequest from json.
func (s *ConfigPathsDeleteBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigPathsDeleteBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigPathsDeleteBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigPathsDeleteBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigPathsDeleteBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigPathsDeleteInternalServerError as json.
func (s *ConfigPathsDeleteInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigPathsDeleteInternalServerError from json.
func (s *ConfigPathsDeleteInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigPathsDeleteInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigPathsDeleteInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigPathsDeleteInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigPathsDeleteInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigPathsDeleteNotFound as json.
func (s *ConfigPathsDeleteNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigPathsDeleteNotFound from json.
func (s *ConfigPathsDeleteNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigPathsDeleteNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigPathsDeleteNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigPathsDeleteNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigPathsDeleteNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigPathsGetBadRequest as json.
func (s *ConfigPathsGetBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigPathsGetBadRequest from json.
func (s *ConfigPathsGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigPathsGetBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigPathsGetBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigPathsGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigPathsGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigPathsGetInternalServerError as json.
func (s *ConfigPathsGetInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigPathsGetInternalServerError from json.
func (s *ConfigPathsGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigPathsGetInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigPathsGetInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigPathsGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigPathsGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigPathsGetNotFound as json.
func (s *ConfigPathsGetNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigPathsGetNotFound from json.
func (s *ConfigPathsGetNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigPathsGetNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigPathsGetNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigPathsGetNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigPathsGetNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigPathsListBadRequest as json.
func (s *ConfigPathsListBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigPathsListBadRequest from json.
func (s *ConfigPathsListBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigPathsListBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigPathsListBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigPathsListBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigPathsListBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigPathsListInternalServerError as json.
func (s *ConfigPathsListInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigPathsListInternalServerError from json.
func (s *ConfigPathsListInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigPathsListInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigPathsListInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigPathsListInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigPathsListInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigPathsPatchBadRequest as json.
func (s *ConfigPathsPatchBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigPathsPatchBadRequest from json.
func (s *ConfigPathsPatchBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigPathsPatchBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigPathsPatchBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigPathsPatchBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigPathsPatchBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigPathsPatchInternalServerError as json.
func (s *ConfigPathsPatchInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigPathsPatchInternalServerError from json.
func (s *ConfigPathsPatchInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigPathsPatchInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigPathsPatchInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigPathsPatchInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigPathsPatchInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigPathsPatchNotFound as json.
func (s *ConfigPathsPatchNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigPathsPatchNotFound from json.
func (s *ConfigPathsPatchNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigPathsPatchNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigPathsPatchNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigPathsPatchNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigPathsPatchNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigPathsReplaceBadRequest as json.
func (s *ConfigPathsReplaceBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigPathsReplaceBadRequest from json.
func (s *ConfigPathsReplaceBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigPathsReplaceBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigPathsReplaceBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigPathsReplaceBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigPathsReplaceBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigPathsReplaceInternalServerError as json.
func (s *ConfigPathsReplaceInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigPathsReplaceInternalServerError from json.
func (s *ConfigPathsReplaceInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigPathsReplaceInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigPathsReplaceInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigPathsReplaceInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigPathsReplaceInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigPathsReplaceNotFound as json.
func (s *ConfigPathsReplaceNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes ConfigPathsReplaceNotFound from json.
func (s *ConfigPathsReplaceNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigPathsReplaceNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ConfigPathsReplaceNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigPathsReplaceNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigPathsReplaceNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Error) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Error) encodeFields(e *jx.Encoder) {
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfError = [1]string{
	0: "error",
}

// Decode decodes Error from json.
func (s *Error) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Error to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Error")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Error) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Error) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GlobalConf) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GlobalConf) encodeFields(e *jx.Encoder) {
	{
		if s.LogLevel.Set {
			e.FieldStart("logLevel")
			s.LogLevel.Encode(e)
		}
	}
	{
		if s.LogDestinations != nil {
			e.FieldStart("logDestinations")
			e.ArrStart()
			for _, elem := range s.LogDestinations {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.LogFile.Set {
			e.FieldStart("logFile")
			s.LogFile.Encode(e)
		}
	}
	{
		if s.SysLogPrefix.Set {
			e.FieldStart("sysLogPrefix")
			s.SysLogPrefix.Encode(e)
		}
	}
	{
		if s.ReadTimeout.Set {
			e.FieldStart("readTimeout")
			s.ReadTimeout.Encode(e)
		}
	}
	{
		if s.WriteTimeout.Set {
			e.FieldStart("writeTimeout")
			s.WriteTimeout.Encode(e)
		}
	}
	{
		if s.WriteQueueSize.Set {
			e.FieldStart("writeQueueSize")
			s.WriteQueueSize.Encode(e)
		}
	}
	{
		if s.UdpMaxPayloadSize.Set {
			e.FieldStart("udpMaxPayloadSize")
			s.UdpMaxPayloadSize.Encode(e)
		}
	}
	{
		if s.RunOnConnect.Set {
			e.FieldStart("runOnConnect")
			s.RunOnConnect.Encode(e)
		}
	}
	{
		if s.RunOnConnectRestart.Set {
			e.FieldStart("runOnConnectRestart")
			s.RunOnConnectRestart.Encode(e)
		}
	}
	{
		if s.RunOnDisconnect.Set {
			e.FieldStart("runOnDisconnect")
			s.RunOnDisconnect.Encode(e)
		}
	}
	{
		if s.AuthMethod.Set {
			e.FieldStart("authMethod")
			s.AuthMethod.Encode(e)
		}
	}
	{
		if s.AuthInternalUsers != nil {
			e.FieldStart("authInternalUsers")
			e.ArrStart()
			for _, elem := range s.AuthInternalUsers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.AuthHTTPAddress.Set {
			e.FieldStart("authHTTPAddress")
			s.AuthHTTPAddress.Encode(e)
		}
	}
	{
		if s.AuthHTTPExclude != nil {
			e.FieldStart("authHTTPExclude")
			e.ArrStart()
			for _, elem := range s.AuthHTTPExclude {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.AuthJWTJWKS.Set {
			e.FieldStart("authJWTJWKS")
			s.AuthJWTJWKS.Encode(e)
		}
	}
	{
		if s.AuthJWTJWKSFingerprint.Set {
			e.FieldStart("authJWTJWKSFingerprint")
			s.AuthJWTJWKSFingerprint.Encode(e)
		}
	}
	{
		if s.AuthJWTClaimKey.Set {
			e.FieldStart("authJWTClaimKey")
			s.AuthJWTClaimKey.Encode(e)
		}
	}
	{
		if s.AuthJWTExclude != nil {
			e.FieldStart("authJWTExclude")
			e.ArrStart()
			for _, elem := range s.AuthJWTExclude {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.AuthJWTInHTTPQuery.Set {
			e.FieldStart("authJWTInHTTPQuery")
			s.AuthJWTInHTTPQuery.Encode(e)
		}
	}
	{
		if s.API.Set {
			e.FieldStart("api")
			s.API.Encode(e)
		}
	}
	{
		if s.ApiAddress.Set {
			e.FieldStart("apiAddress")
			s.ApiAddress.Encode(e)
		}
	}
	{
		if s.ApiEncryption.Set {
			e.FieldStart("apiEncryption")
			s.ApiEncryption.Encode(e)
		}
	}
	{
		if s.ApiServerKey.Set {
			e.FieldStart("apiServerKey")
			s.ApiServerKey.Encode(e)
		}
	}
	{
		if s.ApiServerCert.Set {
			e.FieldStart("apiServerCert")
			s.ApiServerCert.Encode(e)
		}
	}
	{
		if s.ApiAllowOrigin.Set {
			e.FieldStart("apiAllowOrigin")
			s.ApiAllowOrigin.Encode(e)
		}
	}
	{
		if s.ApiTrustedProxies != nil {
			e.FieldStart("apiTrustedProxies")
			e.ArrStart()
			for _, elem := range s.ApiTrustedProxies {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Metrics.Set {
			e.FieldStart("metrics")
			s.Metrics.Encode(e)
		}
	}
	{
		if s.MetricsAddress.Set {
			e.FieldStart("metricsAddress")
			s.MetricsAddress.Encode(e)
		}
	}
	{
		if s.MetricsEncryption.Set {
			e.FieldStart("metricsEncryption")
			s.MetricsEncryption.Encode(e)
		}
	}
	{
		if s.MetricsServerKey.Set {
			e.FieldStart("metricsServerKey")
			s.MetricsServerKey.Encode(e)
		}
	}
	{
		if s.MetricsServerCert.Set {
			e.FieldStart("metricsServerCert")
			s.MetricsServerCert.Encode(e)
		}
	}
	{
		if s.MetricsAllowOrigin.Set {
			e.FieldStart("metricsAllowOrigin")
			s.MetricsAllowOrigin.Encode(e)
		}
	}
	{
		if s.MetricsTrustedProxies != nil {
			e.FieldStart("metricsTrustedProxies")
			e.ArrStart()
			for _, elem := range s.MetricsTrustedProxies {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Pprof.Set {
			e.FieldStart("pprof")
			s.Pprof.Encode(e)
		}
	}
	{
		if s.PprofAddress.Set {
			e.FieldStart("pprofAddress")
			s.PprofAddress.Encode(e)
		}
	}
	{
		if s.PprofEncryption.Set {
			e.FieldStart("pprofEncryption")
			s.PprofEncryption.Encode(e)
		}
	}
	{
		if s.PprofServerKey.Set {
			e.FieldStart("pprofServerKey")
			s.PprofServerKey.Encode(e)
		}
	}
	{
		if s.PprofServerCert.Set {
			e.FieldStart("pprofServerCert")
			s.PprofServerCert.Encode(e)
		}
	}
	{
		if s.PprofAllowOrigin.Set {
			e.FieldStart("pprofAllowOrigin")
			s.PprofAllowOrigin.Encode(e)
		}
	}
	{
		if s.PprofTrustedProxies != nil {
			e.FieldStart("pprofTrustedProxies")
			e.ArrStart()
			for _, elem := range s.PprofTrustedProxies {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Playback.Set {
			e.FieldStart("playback")
			s.Playback.Encode(e)
		}
	}
	{
		if s.PlaybackAddress.Set {
			e.FieldStart("playbackAddress")
			s.PlaybackAddress.Encode(e)
		}
	}
	{
		if s.PlaybackEncryption.Set {
			e.FieldStart("playbackEncryption")
			s.PlaybackEncryption.Encode(e)
		}
	}
	{
		if s.PlaybackServerKey.Set {
			e.FieldStart("playbackServerKey")
			s.PlaybackServerKey.Encode(e)
		}
	}
	{
		if s.PlaybackServerCert.Set {
			e.FieldStart("playbackServerCert")
			s.PlaybackServerCert.Encode(e)
		}
	}
	{
		if s.PlaybackAllowOrigin.Set {
			e.FieldStart("playbackAllowOrigin")
			s.PlaybackAllowOrigin.Encode(e)
		}
	}
	{
		if s.PlaybackTrustedProxies != nil {
			e.FieldStart("playbackTrustedProxies")
			e.ArrStart()
			for _, elem := range s.PlaybackTrustedProxies {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rtsp.Set {
			e.FieldStart("rtsp")
			s.Rtsp.Encode(e)
		}
	}
	{
		if s.RtspTransports != nil {
			e.FieldStart("rtspTransports")
			e.ArrStart()
			for _, elem := range s.RtspTransports {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.RtspEncryption.Set {
			e.FieldStart("rtspEncryption")
			s.RtspEncryption.Encode(e)
		}
	}
	{
		if s.RtspAddress.Set {
			e.FieldStart("rtspAddress")
			s.RtspAddress.Encode(e)
		}
	}
	{
		if s.RtspsAddress.Set {
			e.FieldStart("rtspsAddress")
			s.RtspsAddress.Encode(e)
		}
	}
	{
		if s.RtpAddress.Set {
			e.FieldStart("rtpAddress")
			s.RtpAddress.Encode(e)
		}
	}
	{
		if s.RtcpAddress.Set {
			e.FieldStart("rtcpAddress")
			s.RtcpAddress.Encode(e)
		}
	}
	{
		if s.MulticastIPRange.Set {
			e.FieldStart("multicastIPRange")
			s.MulticastIPRange.Encode(e)
		}
	}
	{
		if s.MulticastRTPPort.Set {
			e.FieldStart("multicastRTPPort")
			s.MulticastRTPPort.Encode(e)
		}
	}
	{
		if s.MulticastRTCPPort.Set {
			e.FieldStart("multicastRTCPPort")
			s.MulticastRTCPPort.Encode(e)
		}
	}
	{
		if s.RtspServerKey.Set {
			e.FieldStart("rtspServerKey")
			s.RtspServerKey.Encode(e)
		}
	}
	{
		if s.RtspServerCert.Set {
			e.FieldStart("rtspServerCert")
			s.RtspServerCert.Encode(e)
		}
	}
	{
		if s.RtspAuthMethods != nil {
			e.FieldStart("rtspAuthMethods")
			e.ArrStart()
			for _, elem := range s.RtspAuthMethods {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rtmp.Set {
			e.FieldStart("rtmp")
			s.Rtmp.Encode(e)
		}
	}
	{
		if s.RtmpAddress.Set {
			e.FieldStart("rtmpAddress")
			s.RtmpAddress.Encode(e)
		}
	}
	{
		if s.RtmpEncryption.Set {
			e.FieldStart("rtmpEncryption")
			s.RtmpEncryption.Encode(e)
		}
	}
	{
		if s.RtmpsAddress.Set {
			e.FieldStart("rtmpsAddress")
			s.RtmpsAddress.Encode(e)
		}
	}
	{
		if s.RtmpServerKey.Set {
			e.FieldStart("rtmpServerKey")
			s.RtmpServerKey.Encode(e)
		}
	}
	{
		if s.RtmpServerCert.Set {
			e.FieldStart("rtmpServerCert")
			s.RtmpServerCert.Encode(e)
		}
	}
	{
		if s.Hls.Set {
			e.FieldStart("hls")
			s.Hls.Encode(e)
		}
	}
	{
		if s.HlsAddress.Set {
			e.FieldStart("hlsAddress")
			s.HlsAddress.Encode(e)
		}
	}
	{
		if s.HlsEncryption.Set {
			e.FieldStart("hlsEncryption")
			s.HlsEncryption.Encode(e)
		}
	}
	{
		if s.HlsServerKey.Set {
			e.FieldStart("hlsServerKey")
			s.HlsServerKey.Encode(e)
		}
	}
	{
		if s.HlsServerCert.Set {
			e.FieldStart("hlsServerCert")
			s.HlsServerCert.Encode(e)
		}
	}
	{
		if s.HlsAllowOrigin.Set {
			e.FieldStart("hlsAllowOrigin")
			s.HlsAllowOrigin.Encode(e)
		}
	}
	{
		if s.HlsTrustedProxies != nil {
			e.FieldStart("hlsTrustedProxies")
			e.ArrStart()
			for _, elem := range s.HlsTrustedProxies {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.HlsAlwaysRemux.Set {
			e.FieldStart("hlsAlwaysRemux")
			s.HlsAlwaysRemux.Encode(e)
		}
	}
	{
		if s.HlsVariant.Set {
			e.FieldStart("hlsVariant")
			s.HlsVariant.Encode(e)
		}
	}
	{
		if s.HlsSegmentCount.Set {
			e.FieldStart("hlsSegmentCount")
			s.HlsSegmentCount.Encode(e)
		}
	}
	{
		if s.HlsSegmentDuration.Set {
			e.FieldStart("hlsSegmentDuration")
			s.HlsSegmentDuration.Encode(e)
		}
	}
	{
		if s.HlsPartDuration.Set {
			e.FieldStart("hlsPartDuration")
			s.HlsPartDuration.Encode(e)
		}
	}
	{
		if s.HlsSegmentMaxSize.Set {
			e.FieldStart("hlsSegmentMaxSize")
			s.HlsSegmentMaxSize.Encode(e)
		}
	}
	{
		if s.HlsDirectory.Set {
			e.FieldStart("hlsDirectory")
			s.HlsDirectory.Encode(e)
		}
	}
	{
		if s.HlsMuxerCloseAfter.Set {
			e.FieldStart("hlsMuxerCloseAfter")
			s.HlsMuxerCloseAfter.Encode(e)
		}
	}
	{
		if s.Webrtc.Set {
			e.FieldStart("webrtc")
			s.Webrtc.Encode(e)
		}
	}
	{
		if s.WebrtcAddress.Set {
			e.FieldStart("webrtcAddress")
			s.WebrtcAddress.Encode(e)
		}
	}
	{
		if s.WebrtcEncryption.Set {
			e.FieldStart("webrtcEncryption")
			s.WebrtcEncryption.Encode(e)
		}
	}
	{
		if s.WebrtcServerKey.Set {
			e.FieldStart("webrtcServerKey")
			s.WebrtcServerKey.Encode(e)
		}
	}
	{
		if s.WebrtcServerCert.Set {
			e.FieldStart("webrtcServerCert")
			s.WebrtcServerCert.Encode(e)
		}
	}
	{
		if s.WebrtcAllowOrigin.Set {
			e.FieldStart("webrtcAllowOrigin")
			s.WebrtcAllowOrigin.Encode(e)
		}
	}
	{
		if s.WebrtcTrustedProxies != nil {
			e.FieldStart("webrtcTrustedProxies")
			e.ArrStart()
			for _, elem := range s.WebrtcTrustedProxies {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.WebrtcLocalUDPAddress.Set {
			e.FieldStart("webrtcLocalUDPAddress")
			s.WebrtcLocalUDPAddress.Encode(e)
		}
	}
	{
		if s.WebrtcLocalTCPAddress.Set {
			e.FieldStart("webrtcLocalTCPAddress")
			s.WebrtcLocalTCPAddress.Encode(e)
		}
	}
	{
		if s.WebrtcIPsFromInterfaces.Set {
			e.FieldStart("webrtcIPsFromInterfaces")
			s.WebrtcIPsFromInterfaces.Encode(e)
		}
	}
	{
		if s.WebrtcIPsFromInterfacesList != nil {
			e.FieldStart("webrtcIPsFromInterfacesList")
			e.ArrStart()
			for _, elem := range s.WebrtcIPsFromInterfacesList {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.WebrtcAdditionalHosts != nil {
			e.FieldStart("webrtcAdditionalHosts")
			e.ArrStart()
			for _, elem := range s.WebrtcAdditionalHosts {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.WebrtcICEServers2 != nil {
			e.FieldStart("webrtcICEServers2")
			e.ArrStart()
			for _, elem := range s.WebrtcICEServers2 {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.WebrtcHandshakeTimeout.Set {
			e.FieldStart("webrtcHandshakeTimeout")
			s.WebrtcHandshakeTimeout.Encode(e)
		}
	}
	{
		if s.WebrtcTrackGatherTimeout.Set {
			e.FieldStart("webrtcTrackGatherTimeout")
			s.WebrtcTrackGatherTimeout.Encode(e)
		}
	}
	{
		if s.WebrtcSTUNGatherTimeout.Set {
			e.FieldStart("webrtcSTUNGatherTimeout")
			s.WebrtcSTUNGatherTimeout.Encode(e)
		}
	}
	{
		if s.Srt.Set {
			e.FieldStart("srt")
			s.Srt.Encode(e)
		}
	}
	{
		if s.SrtAddress.Set {
			e.FieldStart("srtAddress")
			s.SrtAddress.Encode(e)
		}
	}
}

var jsonFieldsNameOfGlobalConf = [100]string{
	0:  "logLevel",
	1:  "logDestinations",
	2:  "logFile",
	3:  "sysLogPrefix",
	4:  "readTimeout",
	5:  "writeTimeout",
	6:  "writeQueueSize",
	7:  "udpMaxPayloadSize",
	8:  "runOnConnect",
	9:  "runOnConnectRestart",
	10: "runOnDisconnect",
	11: "authMethod",
	12: "authInternalUsers",
	13: "authHTTPAddress",
	14: "authHTTPExclude",
	15: "authJWTJWKS",
	16: "authJWTJWKSFingerprint",
	17: "authJWTClaimKey",
	18: "authJWTExclude",
	19: "authJWTInHTTPQuery",
	20: "api",
	21: "apiAddress",
	22: "apiEncryption",
	23: "apiServerKey",
	24: "apiServerCert",
	25: "apiAllowOrigin",
	26: "apiTrustedProxies",
	27: "metrics",
	28: "metricsAddress",
	29: "metricsEncryption",
	30: "metricsServerKey",
	31: "metricsServerCert",
	32: "metricsAllowOrigin",
	33: "metricsTrustedProxies",
	34: "pprof",
	35: "pprofAddress",
	36: "pprofEncryption",
	37: "pprofServerKey",
	38: "pprofServerCert",
	39: "pprofAllowOrigin",
	40: "pprofTrustedProxies",
	41: "playback",
	42: "playbackAddress",
	43: "playbackEncryption",
	44: "playbackServerKey",
	45: "playbackServerCert",
	46: "playbackAllowOrigin",
	47: "playbackTrustedProxies",
	48: "rtsp",
	49: "rtspTransports",
	50: "rtspEncryption",
	51: "rtspAddress",
	52: "rtspsAddress",
	53: "rtpAddress",
	54: "rtcpAddress",
	55: "multicastIPRange",
	56: "multicastRTPPort",
	57: "multicastRTCPPort",
	58: "rtspServerKey",
	59: "rtspServerCert",
	60: "rtspAuthMethods",
	61: "rtmp",
	62: "rtmpAddress",
	63: "rtmpEncryption",
	64: "rtmpsAddress",
	65: "rtmpServerKey",
	66: "rtmpServerCert",
	67: "hls",
	68: "hlsAddress",
	69: "hlsEncryption",
	70: "hlsServerKey",
	71: "hlsServerCert",
	72: "hlsAllowOrigin",
	73: "hlsTrustedProxies",
	74: "hlsAlwaysRemux",
	75: "hlsVariant",
	76: "hlsSegmentCount",
	77: "hlsSegmentDuration",
	78: "hlsPartDuration",
	79: "hlsSegmentMaxSize",
	80: "hlsDirectory",
	81: "hlsMuxerCloseAfter",
	82: "webrtc",
	83: "webrtcAddress",
	84: "webrtcEncryption",
	85: "webrtcServerKey",
	86: "webrtcServerCert",
	87: "webrtcAllowOrigin",
	88: "webrtcTrustedProxies",
	89: "webrtcLocalUDPAddress",
	90: "webrtcLocalTCPAddress",
	91: "webrtcIPsFromInterfaces",
	92: "webrtcIPsFromInterfacesList",
	93: "webrtcAdditionalHosts",
	94: "webrtcICEServers2",
	95: "webrtcHandshakeTimeout",
	96: "webrtcTrackGatherTimeout",
	97: "webrtcSTUNGatherTimeout",
	98: "srt",
	99: "srtAddress",
}

// Decode decodes GlobalConf from json.
func (s *GlobalConf) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GlobalConf to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logLevel":
			if err := func() error {
				s.LogLevel.Reset()
				if err := s.LogLevel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logLevel\"")
			}
		case "logDestinations":
			if err := func() error {
				s.LogDestinations = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.LogDestinations = append(s.LogDestinations, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logDestinations\"")
			}
		case "logFile":
			if err := func() error {
				s.LogFile.Reset()
				if err := s.LogFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logFile\"")
			}
		case "sysLogPrefix":
			if err := func() error {
				s.SysLogPrefix.Reset()
				if err := s.SysLogPrefix.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sysLogPrefix\"")
			}
		case "readTimeout":
			if err := func() error {
				s.ReadTimeout.Reset()
				if err := s.ReadTimeout.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"readTimeout\"")
			}
		case "writeTimeout":
			if err := func() error {
				s.WriteTimeout.Reset()
				if err := s.WriteTimeout.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"writeTimeout\"")
			}
		case "writeQueueSize":
			if err := func() error {
				s.WriteQueueSize.Reset()
				if err := s.WriteQueueSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"writeQueueSize\"")
			}
		case "udpMaxPayloadSize":
			if err := func() error {
				s.UdpMaxPayloadSize.Reset()
				if err := s.UdpMaxPayloadSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"udpMaxPayloadSize\"")
			}
		case "runOnConnect":
			if err := func() error {
				s.RunOnConnect.Reset()
				if err := s.RunOnConnect.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runOnConnect\"")
			}
		case "runOnConnectRestart":
			if err := func() error {
				s.RunOnConnectRestart.Reset()
				if err := s.RunOnConnectRestart.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runOnConnectRestart\"")
			}
		case "runOnDisconnect":
			if err := func() error {
				s.RunOnDisconnect.Reset()
				if err := s.RunOnDisconnect.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runOnDisconnect\"")
			}
		case "authMethod":
			if err := func() error {
				s.AuthMethod.Reset()
				if err := s.AuthMethod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authMethod\"")
			}
		case "authInternalUsers":
			if err := func() error {
				s.AuthInternalUsers = make([]AuthInternalUser, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AuthInternalUser
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AuthInternalUsers = append(s.AuthInternalUsers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authInternalUsers\"")
			}
		case "authHTTPAddress":
			if err := func() error {
				s.AuthHTTPAddress.Reset()
				if err := s.AuthHTTPAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authHTTPAddress\"")
			}
		case "authHTTPExclude":
			if err := func() error {
				s.AuthHTTPExclude = make([]AuthInternalUserPermission, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AuthInternalUserPermission
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AuthHTTPExclude = append(s.AuthHTTPExclude, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authHTTPExclude\"")
			}
		case "authJWTJWKS":
			if err := func() error {
				s.AuthJWTJWKS.Reset()
				if err := s.AuthJWTJWKS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authJWTJWKS\"")
			}
		case "authJWTJWKSFingerprint":
			if err := func() error {
				s.AuthJWTJWKSFingerprint.Reset()
				if err := s.AuthJWTJWKSFingerprint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authJWTJWKSFingerprint\"")
			}
		case "authJWTClaimKey":
			if err := func() error {
				s.AuthJWTClaimKey.Reset()
				if err := s.AuthJWTClaimKey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authJWTClaimKey\"")
			}
		case "authJWTExclude":
			if err := func() error {
				s.AuthJWTExclude = make([]AuthInternalUserPermission, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AuthInternalUserPermission
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AuthJWTExclude = append(s.AuthJWTExclude, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authJWTExclude\"")
			}
		case "authJWTInHTTPQuery":
			if err := func() error {
				s.AuthJWTInHTTPQuery.Reset()
				if err := s.AuthJWTInHTTPQuery.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authJWTInHTTPQuery\"")
			}
		case "api":
			if err := func() error {
				s.API.Reset()
				if err := s.API.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api\"")
			}
		case "apiAddress":
			if err := func() error {
				s.ApiAddress.Reset()
				if err := s.ApiAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiAddress\"")
			}
		case "apiEncryption":
			if err := func() error {
				s.ApiEncryption.Reset()
				if err := s.ApiEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiEncryption\"")
			}
		case "apiServerKey":
			if err := func() error {
				s.ApiServerKey.Reset()
				if err := s.ApiServerKey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiServerKey\"")
			}
		case "apiServerCert":
			if err := func() error {
				s.ApiServerCert.Reset()
				if err := s.ApiServerCert.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiServerCert\"")
			}
		case "apiAllowOrigin":
			if err := func() error {
				s.ApiAllowOrigin.Reset()
				if err := s.ApiAllowOrigin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiAllowOrigin\"")
			}
		case "apiTrustedProxies":
			if err := func() error {
				s.ApiTrustedProxies = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.ApiTrustedProxies = append(s.ApiTrustedProxies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiTrustedProxies\"")
			}
		case "metrics":
			if err := func() error {
				s.Metrics.Reset()
				if err := s.Metrics.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"metrics\"")
			}
		case "metricsAddress":
			if err := func() error {
				s.MetricsAddress.Reset()
				if err := s.MetricsAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"metricsAddress\"")
			}
		case "metricsEncryption":
			if err := func() error {
				s.MetricsEncryption.Reset()
				if err := s.MetricsEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"metricsEncryption\"")
			}
		case "metricsServerKey":
			if err := func() error {
				s.MetricsServerKey.Reset()
				if err := s.MetricsServerKey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"metricsServerKey\"")
			}
		case "metricsServerCert":
			if err := func() error {
				s.MetricsServerCert.Reset()
				if err := s.MetricsServerCert.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"metricsServerCert\"")
			}
		case "metricsAllowOrigin":
			if err := func() error {
				s.MetricsAllowOrigin.Reset()
				if err := s.MetricsAllowOrigin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"metricsAllowOrigin\"")
			}
		case "metricsTrustedProxies":
			if err := func() error {
				s.MetricsTrustedProxies = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.MetricsTrustedProxies = append(s.MetricsTrustedProxies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"metricsTrustedProxies\"")
			}
		case "pprof":
			if err := func() error {
				s.Pprof.Reset()
				if err := s.Pprof.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pprof\"")
			}
		case "pprofAddress":
			if err := func() error {
				s.PprofAddress.Reset()
				if err := s.PprofAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pprofAddress\"")
			}
		case "pprofEncryption":
			if err := func() error {
				s.PprofEncryption.Reset()
				if err := s.PprofEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pprofEncryption\"")
			}
		case "pprofServerKey":
			if err := func() error {
				s.PprofServerKey.Reset()
				if err := s.PprofServerKey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pprofServerKey\"")
			}
		case "pprofServerCert":
			if err := func() error {
				s.PprofServerCert.Reset()
				if err := s.PprofServerCert.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pprofServerCert\"")
			}
		case "pprofAllowOrigin":
			if err := func() error {
				s.PprofAllowOrigin.Reset()
				if err := s.PprofAllowOrigin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pprofAllowOrigin\"")
			}
		case "pprofTrustedProxies":
			if err := func() error {
				s.PprofTrustedProxies = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.PprofTrustedProxies = append(s.PprofTrustedProxies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pprofTrustedProxies\"")
			}
		case "playback":
			if err := func() error {
				s.Playback.Reset()
				if err := s.Playback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"playback\"")
			}
		case "playbackAddress":
			if err := func() error {
				s.PlaybackAddress.Reset()
				if err := s.PlaybackAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"playbackAddress\"")
			}
		case "playbackEncryption":
			if err := func() error {
				s.PlaybackEncryption.Reset()
				if err := s.PlaybackEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"playbackEncryption\"")
			}
		case "playbackServerKey":
			if err := func() error {
				s.PlaybackServerKey.Reset()
				if err := s.PlaybackServerKey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"playbackServerKey\"")
			}
		case "playbackServerCert":
			if err := func() error {
				s.PlaybackServerCert.Reset()
				if err := s.PlaybackServerCert.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"playbackServerCert\"")
			}
		case "playbackAllowOrigin":
			if err := func() error {
				s.PlaybackAllowOrigin.Reset()
				if err := s.PlaybackAllowOrigin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"playbackAllowOrigin\"")
			}
		case "playbackTrustedProxies":
			if err := func() error {
				s.PlaybackTrustedProxies = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.PlaybackTrustedProxies = append(s.PlaybackTrustedProxies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"playbackTrustedProxies\"")
			}
		case "rtsp":
			if err := func() error {
				s.Rtsp.Reset()
				if err := s.Rtsp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtsp\"")
			}
		case "rtspTransports":
			if err := func() error {
				s.RtspTransports = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RtspTransports = append(s.RtspTransports, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtspTransports\"")
			}
		case "rtspEncryption":
			if err := func() error {
				s.RtspEncryption.Reset()
				if err := s.RtspEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtspEncryption\"")
			}
		case "rtspAddress":
			if err := func() error {
				s.RtspAddress.Reset()
				if err := s.RtspAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtspAddress\"")
			}
		case "rtspsAddress":
			if err := func() error {
				s.RtspsAddress.Reset()
				if err := s.RtspsAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtspsAddress\"")
			}
		case "rtpAddress":
			if err := func() error {
				s.RtpAddress.Reset()
				if err := s.RtpAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtpAddress\"")
			}
		case "rtcpAddress":
			if err := func() error {
				s.RtcpAddress.Reset()
				if err := s.RtcpAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtcpAddress\"")
			}
		case "multicastIPRange":
			if err := func() error {
				s.MulticastIPRange.Reset()
				if err := s.MulticastIPRange.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"multicastIPRange\"")
			}
		case "multicastRTPPort":
			if err := func() error {
				s.MulticastRTPPort.Reset()
				if err := s.MulticastRTPPort.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"multicastRTPPort\"")
			}
		case "multicastRTCPPort":
			if err := func() error {
				s.MulticastRTCPPort.Reset()
				if err := s.MulticastRTCPPort.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"multicastRTCPPort\"")
			}
		case "rtspServerKey":
			if err := func() error {
				s.RtspServerKey.Reset()
				if err := s.RtspServerKey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtspServerKey\"")
			}
		case "rtspServerCert":
			if err := func() error {
				s.RtspServerCert.Reset()
				if err := s.RtspServerCert.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtspServerCert\"")
			}
		case "rtspAuthMethods":
			if err := func() error {
				s.RtspAuthMethods = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RtspAuthMethods = append(s.RtspAuthMethods, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtspAuthMethods\"")
			}
		case "rtmp":
			if err := func() error {
				s.Rtmp.Reset()
				if err := s.Rtmp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtmp\"")
			}
		case "rtmpAddress":
			if err := func() error {
				s.RtmpAddress.Reset()
				if err := s.RtmpAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtmpAddress\"")
			}
		case "rtmpEncryption":
			if err := func() error {
				s.RtmpEncryption.Reset()
				if err := s.RtmpEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtmpEncryption\"")
			}
		case "rtmpsAddress":
			if err := func() error {
				s.RtmpsAddress.Reset()
				if err := s.RtmpsAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtmpsAddress\"")
			}
		case "rtmpServerKey":
			if err := func() error {
				s.RtmpServerKey.Reset()
				if err := s.RtmpServerKey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtmpServerKey\"")
			}
		case "rtmpServerCert":
			if err := func() error {
				s.RtmpServerCert.Reset()
				if err := s.RtmpServerCert.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtmpServerCert\"")
			}
		case "hls":
			if err := func() error {
				s.Hls.Reset()
				if err := s.Hls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hls\"")
			}
		case "hlsAddress":
			if err := func() error {
				s.HlsAddress.Reset()
				if err := s.HlsAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hlsAddress\"")
			}
		case "hlsEncryption":
			if err := func() error {
				s.HlsEncryption.Reset()
				if err := s.HlsEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hlsEncryption\"")
			}
		case "hlsServerKey":
			if err := func() error {
				s.HlsServerKey.Reset()
				if err := s.HlsServerKey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hlsServerKey\"")
			}
		case "hlsServerCert":
			if err := func() error {
				s.HlsServerCert.Reset()
				if err := s.HlsServerCert.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hlsServerCert\"")
			}
		case "hlsAllowOrigin":
			if err := func() error {
				s.HlsAllowOrigin.Reset()
				if err := s.HlsAllowOrigin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hlsAllowOrigin\"")
			}
		case "hlsTrustedProxies":
			if err := func() error {
				s.HlsTrustedProxies = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.HlsTrustedProxies = append(s.HlsTrustedProxies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hlsTrustedProxies\"")
			}
		case "hlsAlwaysRemux":
			if err := func() error {
				s.HlsAlwaysRemux.Reset()
				if err := s.HlsAlwaysRemux.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hlsAlwaysRemux\"")
			}
		case "hlsVariant":
			if err := func() error {
				s.HlsVariant.Reset()
				if err := s.HlsVariant.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hlsVariant\"")
			}
		case "hlsSegmentCount":
			if err := func() error {
				s.HlsSegmentCount.Reset()
				if err := s.HlsSegmentCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hlsSegmentCount\"")
			}
		case "hlsSegmentDuration":
			if err := func() error {
				s.HlsSegmentDuration.Reset()
				if err := s.HlsSegmentDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hlsSegmentDuration\"")
			}
		case "hlsPartDuration":
			if err := func() error {
				s.HlsPartDuration.Reset()
				if err := s.HlsPartDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hlsPartDuration\"")
			}
		case "hlsSegmentMaxSize":
			if err := func() error {
				s.HlsSegmentMaxSize.Reset()
				if err := s.HlsSegmentMaxSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hlsSegmentMaxSize\"")
			}
		case "hlsDirectory":
			if err := func() error {
				s.HlsDirectory.Reset()
				if err := s.HlsDirectory.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hlsDirectory\"")
			}
		case "hlsMuxerCloseAfter":
			if err := func() error {
				s.HlsMuxerCloseAfter.Reset()
				if err := s.HlsMuxerCloseAfter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hlsMuxerCloseAfter\"")
			}
		case "webrtc":
			if err := func() error {
				s.Webrtc.Reset()
				if err := s.Webrtc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webrtc\"")
			}
		case "webrtcAddress":
			if err := func() error {
				s.WebrtcAddress.Reset()
				if err := s.WebrtcAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webrtcAddress\"")
			}
		case "webrtcEncryption":
			if err := func() error {
				s.WebrtcEncryption.Reset()
				if err := s.WebrtcEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webrtcEncryption\"")
			}
		case "webrtcServerKey":
			if err := func() error {
				s.WebrtcServerKey.Reset()
				if err := s.WebrtcServerKey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webrtcServerKey\"")
			}
		case "webrtcServerCert":
			if err := func() error {
				s.WebrtcServerCert.Reset()
				if err := s.WebrtcServerCert.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webrtcServerCert\"")
			}
		case "webrtcAllowOrigin":
			if err := func() error {
				s.WebrtcAllowOrigin.Reset()
				if err := s.WebrtcAllowOrigin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webrtcAllowOrigin\"")
			}
		case "webrtcTrustedProxies":
			if err := func() error {
				s.WebrtcTrustedProxies = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.WebrtcTrustedProxies = append(s.WebrtcTrustedProxies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webrtcTrustedProxies\"")
			}
		case "webrtcLocalUDPAddress":
			if err := func() error {
				s.WebrtcLocalUDPAddress.Reset()
				if err := s.WebrtcLocalUDPAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webrtcLocalUDPAddress\"")
			}
		case "webrtcLocalTCPAddress":
			if err := func() error {
				s.WebrtcLocalTCPAddress.Reset()
				if err := s.WebrtcLocalTCPAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webrtcLocalTCPAddress\"")
			}
		case "webrtcIPsFromInterfaces":
			if err := func() error {
				s.WebrtcIPsFromInterfaces.Reset()
				if err := s.WebrtcIPsFromInterfaces.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webrtcIPsFromInterfaces\"")
			}
		case "webrtcIPsFromInterfacesList":
			if err := func() error {
				s.WebrtcIPsFromInterfacesList = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.WebrtcIPsFromInterfacesList = append(s.WebrtcIPsFromInterfacesList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webrtcIPsFromInterfacesList\"")
			}
		case "webrtcAdditionalHosts":
			if err := func() error {
				s.WebrtcAdditionalHosts = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.WebrtcAdditionalHosts = append(s.WebrtcAdditionalHosts, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webrtcAdditionalHosts\"")
			}
		case "webrtcICEServers2":
			if err := func() error {
				s.WebrtcICEServers2 = make([]GlobalConfWebrtcICEServers2Item, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GlobalConfWebrtcICEServers2Item
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.WebrtcICEServers2 = append(s.WebrtcICEServers2, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webrtcICEServers2\"")
			}
		case "webrtcHandshakeTimeout":
			if err := func() error {
				s.WebrtcHandshakeTimeout.Reset()
				if err := s.WebrtcHandshakeTimeout.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webrtcHandshakeTimeout\"")
			}
		case "webrtcTrackGatherTimeout":
			if err := func() error {
				s.WebrtcTrackGatherTimeout.Reset()
				if err := s.WebrtcTrackGatherTimeout.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webrtcTrackGatherTimeout\"")
			}
		case "webrtcSTUNGatherTimeout":
			if err := func() error {
				s.WebrtcSTUNGatherTimeout.Reset()
				if err := s.WebrtcSTUNGatherTimeout.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webrtcSTUNGatherTimeout\"")
			}
		case "srt":
			if err := func() error {
				s.Srt.Reset()
				if err := s.Srt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"srt\"")
			}
		case "srtAddress":
			if err := func() error {
				s.SrtAddress.Reset()
				if err := s.SrtAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"srtAddress\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GlobalConf")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GlobalConf) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GlobalConf) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GlobalConfWebrtcICEServers2Item) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GlobalConfWebrtcICEServers2Item) encodeFields(e *jx.Encoder) {
	{
		if s.URL.Set {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
	{
		if s.Username.Set {
			e.FieldStart("username")
			s.Username.Encode(e)
		}
	}
	{
		if s.Password.Set {
			e.FieldStart("password")
			s.Password.Encode(e)
		}
	}
	{
		if s.ClientOnly.Set {
			e.FieldStart("clientOnly")
			s.ClientOnly.Encode(e)
		}
	}
}

var jsonFieldsNameOfGlobalConfWebrtcICEServers2Item = [4]string{
	0: "url",
	1: "username",
	2: "password",
	3: "clientOnly",
}

// Decode decodes GlobalConfWebrtcICEServers2Item from json.
func (s *GlobalConfWebrtcICEServers2Item) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GlobalConfWebrtcICEServers2Item to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "username":
			if err := func() error {
				s.Username.Reset()
				if err := s.Username.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"username\"")
			}
		case "password":
			if err := func() error {
				s.Password.Reset()
				if err := s.Password.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"password\"")
			}
		case "clientOnly":
			if err := func() error {
				s.ClientOnly.Reset()
				if err := s.ClientOnly.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"clientOnly\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GlobalConfWebrtcICEServers2Item")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GlobalConfWebrtcICEServers2Item) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GlobalConfWebrtcICEServers2Item) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HLSMuxer) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HLSMuxer) encodeFields(e *jx.Encoder) {
	{
		if s.Path.Set {
			e.FieldStart("path")
			s.Path.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.LastRequest.Set {
			e.FieldStart("lastRequest")
			s.LastRequest.Encode(e)
		}
	}
	{
		if s.BytesSent.Set {
			e.FieldStart("bytesSent")
			s.BytesSent.Encode(e)
		}
	}
}

var jsonFieldsNameOfHLSMuxer = [4]string{
	0: "path",
	1: "created",
	2: "lastRequest",
	3: "bytesSent",
}

// Decode decodes HLSMuxer from json.
func (s *HLSMuxer) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HLSMuxer to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "path":
			if err := func() error {
				s.Path.Reset()
				if err := s.Path.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"path\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "lastRequest":
			if err := func() error {
				s.LastRequest.Reset()
				if err := s.LastRequest.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lastRequest\"")
			}
		case "bytesSent":
			if err := func() error {
				s.BytesSent.Reset()
				if err := s.BytesSent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesSent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HLSMuxer")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HLSMuxer) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HLSMuxer) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HLSMuxerList) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HLSMuxerList) encodeFields(e *jx.Encoder) {
	{
		if s.PageCount.Set {
			e.FieldStart("pageCount")
			s.PageCount.Encode(e)
		}
	}
	{
		if s.ItemCount.Set {
			e.FieldStart("itemCount")
			s.ItemCount.Encode(e)
		}
	}
	{
		if s.Items != nil {
			e.FieldStart("items")
			e.ArrStart()
			for _, elem := range s.Items {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfHLSMuxerList = [3]string{
	0: "pageCount",
	1: "itemCount",
	2: "items",
}

// Decode decodes HLSMuxerList from json.
func (s *HLSMuxerList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HLSMuxerList to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pageCount":
			if err := func() error {
				s.PageCount.Reset()
				if err := s.PageCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageCount\"")
			}
		case "itemCount":
			if err := func() error {
				s.ItemCount.Reset()
				if err := s.ItemCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemCount\"")
			}
		case "items":
			if err := func() error {
				s.Items = make([]HLSMuxer, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem HLSMuxer
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Items = append(s.Items, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"items\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HLSMuxerList")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HLSMuxerList) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HLSMuxerList) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HlsMuxersGetBadRequest as json.
func (s *HlsMuxersGetBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes HlsMuxersGetBadRequest from json.
func (s *HlsMuxersGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HlsMuxersGetBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = HlsMuxersGetBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HlsMuxersGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HlsMuxersGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HlsMuxersGetInternalServerError as json.
func (s *HlsMuxersGetInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes HlsMuxersGetInternalServerError from json.
func (s *HlsMuxersGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HlsMuxersGetInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = HlsMuxersGetInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HlsMuxersGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HlsMuxersGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HlsMuxersGetNotFound as json.
func (s *HlsMuxersGetNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes HlsMuxersGetNotFound from json.
func (s *HlsMuxersGetNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HlsMuxersGetNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = HlsMuxersGetNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HlsMuxersGetNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HlsMuxersGetNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HlsMuxersListBadRequest as json.
func (s *HlsMuxersListBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes HlsMuxersListBadRequest from json.
func (s *HlsMuxersListBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HlsMuxersListBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = HlsMuxersListBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HlsMuxersListBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HlsMuxersListBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HlsMuxersListInternalServerError as json.
func (s *HlsMuxersListInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes HlsMuxersListInternalServerError from json.
func (s *HlsMuxersListInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HlsMuxersListInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = HlsMuxersListInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HlsMuxersListInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HlsMuxersListInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBool to nil")
	}
	o.Set = true
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat64 to nil")
	}
	o.Set = true
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt to nil")
	}
	o.Set = true
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o OptInt64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int64(int64(o.Value))
}

// Decode decodes int64 from json.
func (o *OptInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt64 to nil")
	}
	o.Set = true
	v, err := d.Int64()
	if err != nil {
		return err
	}
	o.Value = int64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptNilString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptNilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilString to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v string
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PathReaderType as json.
func (o OptPathReaderType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PathReaderType from json.
func (o *OptPathReaderType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPathReaderType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPathReaderType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPathReaderType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PathSource as json.
func (o OptPathSource) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PathSource from json.
func (o *OptPathSource) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPathSource to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPathSource) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPathSource) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PathSourceType as json.
func (o OptPathSourceType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PathSourceType from json.
func (o *OptPathSourceType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPathSourceType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPathSourceType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPathSourceType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RTMPConnState as json.
func (o OptRTMPConnState) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RTMPConnState from json.
func (o *OptRTMPConnState) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRTMPConnState to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRTMPConnState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRTMPConnState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RTSPSessionState as json.
func (o OptRTSPSessionState) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RTSPSessionState from json.
func (o *OptRTSPSessionState) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRTSPSessionState to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRTSPSessionState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRTSPSessionState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SRTConnState as json.
func (o OptSRTConnState) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SRTConnState from json.
func (o *OptSRTConnState) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSRTConnState to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSRTConnState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSRTConnState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebRTCSessionState as json.
func (o OptWebRTCSessionState) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebRTCSessionState from json.
func (o *OptWebRTCSessionState) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebRTCSessionState to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebRTCSessionState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebRTCSessionState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Path) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Path) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ConfName.Set {
			e.FieldStart("confName")
			s.ConfName.Encode(e)
		}
	}
	{
		if s.Source.Set {
			e.FieldStart("source")
			s.Source.Encode(e)
		}
	}
	{
		if s.Ready.Set {
			e.FieldStart("ready")
			s.Ready.Encode(e)
		}
	}
	{
		if s.ReadyTime.Set {
			e.FieldStart("readyTime")
			s.ReadyTime.Encode(e)
		}
	}
	{
		if s.Tracks != nil {
			e.FieldStart("tracks")
			e.ArrStart()
			for _, elem := range s.Tracks {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.BytesReceived.Set {
			e.FieldStart("bytesReceived")
			s.BytesReceived.Encode(e)
		}
	}
	{
		if s.BytesSent.Set {
			e.FieldStart("bytesSent")
			s.BytesSent.Encode(e)
		}
	}
	{
		if s.Readers != nil {
			e.FieldStart("readers")
			e.ArrStart()
			for _, elem := range s.Readers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPath = [9]string{
	0: "name",
	1: "confName",
	2: "source",
	3: "ready",
	4: "readyTime",
	5: "tracks",
	6: "bytesReceived",
	7: "bytesSent",
	8: "readers",
}

// Decode decodes Path from json.
func (s *Path) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Path to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "confName":
			if err := func() error {
				s.ConfName.Reset()
				if err := s.ConfName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"confName\"")
			}
		case "source":
			if err := func() error {
				s.Source.Reset()
				if err := s.Source.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"source\"")
			}
		case "ready":
			if err := func() error {
				s.Ready.Reset()
				if err := s.Ready.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ready\"")
			}
		case "readyTime":
			if err := func() error {
				s.ReadyTime.Reset()
				if err := s.ReadyTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"readyTime\"")
			}
		case "tracks":
			if err := func() error {
				s.Tracks = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Tracks = append(s.Tracks, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tracks\"")
			}
		case "bytesReceived":
			if err := func() error {
				s.BytesReceived.Reset()
				if err := s.BytesReceived.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesReceived\"")
			}
		case "bytesSent":
			if err := func() error {
				s.BytesSent.Reset()
				if err := s.BytesSent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesSent\"")
			}
		case "readers":
			if err := func() error {
				s.Readers = make([]PathReader, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PathReader
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Readers = append(s.Readers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"readers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Path")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Path) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Path) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PathConf) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PathConf) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Source.Set {
			e.FieldStart("source")
			s.Source.Encode(e)
		}
	}
	{
		if s.SourceFingerprint.Set {
			e.FieldStart("sourceFingerprint")
			s.SourceFingerprint.Encode(e)
		}
	}
	{
		if s.SourceOnDemand.Set {
			e.FieldStart("sourceOnDemand")
			s.SourceOnDemand.Encode(e)
		}
	}
	{
		if s.SourceOnDemandStartTimeout.Set {
			e.FieldStart("sourceOnDemandStartTimeout")
			s.SourceOnDemandStartTimeout.Encode(e)
		}
	}
	{
		if s.SourceOnDemandCloseAfter.Set {
			e.FieldStart("sourceOnDemandCloseAfter")
			s.SourceOnDemandCloseAfter.Encode(e)
		}
	}
	{
		if s.MaxReaders.Set {
			e.FieldStart("maxReaders")
			s.MaxReaders.Encode(e)
		}
	}
	{
		if s.SrtReadPassphrase.Set {
			e.FieldStart("srtReadPassphrase")
			s.SrtReadPassphrase.Encode(e)
		}
	}
	{
		if s.Fallback.Set {
			e.FieldStart("fallback")
			s.Fallback.Encode(e)
		}
	}
	{
		if s.UseAbsoluteTimestamp.Set {
			e.FieldStart("useAbsoluteTimestamp")
			s.UseAbsoluteTimestamp.Encode(e)
		}
	}
	{
		if s.Record.Set {
			e.FieldStart("record")
			s.Record.Encode(e)
		}
	}
	{
		if s.RecordPath.Set {
			e.FieldStart("recordPath")
			s.RecordPath.Encode(e)
		}
	}
	{
		if s.RecordFormat.Set {
			e.FieldStart("recordFormat")
			s.RecordFormat.Encode(e)
		}
	}
	{
		if s.RecordPartDuration.Set {
			e.FieldStart("recordPartDuration")
			s.RecordPartDuration.Encode(e)
		}
	}
	{
		if s.RecordSegmentDuration.Set {
			e.FieldStart("recordSegmentDuration")
			s.RecordSegmentDuration.Encode(e)
		}
	}
	{
		if s.RecordDeleteAfter.Set {
			e.FieldStart("recordDeleteAfter")
			s.RecordDeleteAfter.Encode(e)
		}
	}
	{
		if s.OverridePublisher.Set {
			e.FieldStart("overridePublisher")
			s.OverridePublisher.Encode(e)
		}
	}
	{
		if s.SrtPublishPassphrase.Set {
			e.FieldStart("srtPublishPassphrase")
			s.SrtPublishPassphrase.Encode(e)
		}
	}
	{
		if s.RtspTransport.Set {
			e.FieldStart("rtspTransport")
			s.RtspTransport.Encode(e)
		}
	}
	{
		if s.RtspAnyPort.Set {
			e.FieldStart("rtspAnyPort")
			s.RtspAnyPort.Encode(e)
		}
	}
	{
		if s.RtspRangeType.Set {
			e.FieldStart("rtspRangeType")
			s.RtspRangeType.Encode(e)
		}
	}
	{
		if s.RtspRangeStart.Set {
			e.FieldStart("rtspRangeStart")
			s.RtspRangeStart.Encode(e)
		}
	}
	{
		if s.SourceRedirect.Set {
			e.FieldStart("sourceRedirect")
			s.SourceRedirect.Encode(e)
		}
	}
	{
		if s.RpiCameraCamID.Set {
			e.FieldStart("rpiCameraCamID")
			s.RpiCameraCamID.Encode(e)
		}
	}
	{
		if s.RpiCameraSecondary.Set {
			e.FieldStart("rpiCameraSecondary")
			s.RpiCameraSecondary.Encode(e)
		}
	}
	{
		if s.RpiCameraWidth.Set {
			e.FieldStart("rpiCameraWidth")
			s.RpiCameraWidth.Encode(e)
		}
	}
	{
		if s.RpiCameraHeight.Set {
			e.FieldStart("rpiCameraHeight")
			s.RpiCameraHeight.Encode(e)
		}
	}
	{
		if s.RpiCameraHFlip.Set {
			e.FieldStart("rpiCameraHFlip")
			s.RpiCameraHFlip.Encode(e)
		}
	}
	{
		if s.RpiCameraVFlip.Set {
			e.FieldStart("rpiCameraVFlip")
			s.RpiCameraVFlip.Encode(e)
		}
	}
	{
		if s.RpiCameraBrightness.Set {
			e.FieldStart("rpiCameraBrightness")
			s.RpiCameraBrightness.Encode(e)
		}
	}
	{
		if s.RpiCameraContrast.Set {
			e.FieldStart("rpiCameraContrast")
			s.RpiCameraContrast.Encode(e)
		}
	}
	{
		if s.RpiCameraSaturation.Set {
			e.FieldStart("rpiCameraSaturation")
			s.RpiCameraSaturation.Encode(e)
		}
	}
	{
		if s.RpiCameraSharpness.Set {
			e.FieldStart("rpiCameraSharpness")
			s.RpiCameraSharpness.Encode(e)
		}
	}
	{
		if s.RpiCameraExposure.Set {
			e.FieldStart("rpiCameraExposure")
			s.RpiCameraExposure.Encode(e)
		}
	}
	{
		if s.RpiCameraAWB.Set {
			e.FieldStart("rpiCameraAWB")
			s.RpiCameraAWB.Encode(e)
		}
	}
	{
		if s.RpiCameraAWBGains != nil {
			e.FieldStart("rpiCameraAWBGains")
			e.ArrStart()
			for _, elem := range s.RpiCameraAWBGains {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.RpiCameraDenoise.Set {
			e.FieldStart("rpiCameraDenoise")
			s.RpiCameraDenoise.Encode(e)
		}
	}
	{
		if s.RpiCameraShutter.Set {
			e.FieldStart("rpiCameraShutter")
			s.RpiCameraShutter.Encode(e)
		}
	}
	{
		if s.RpiCameraMetering.Set {
			e.FieldStart("rpiCameraMetering")
			s.RpiCameraMetering.Encode(e)
		}
	}
	{
		if s.RpiCameraGain.Set {
			e.FieldStart("rpiCameraGain")
			s.RpiCameraGain.Encode(e)
		}
	}
	{
		if s.RpiCameraEV.Set {
			e.FieldStart("rpiCameraEV")
			s.RpiCameraEV.Encode(e)
		}
	}
	{
		if s.RpiCameraROI.Set {
			e.FieldStart("rpiCameraROI")
			s.RpiCameraROI.Encode(e)
		}
	}
	{
		if s.RpiCameraHDR.Set {
			e.FieldStart("rpiCameraHDR")
			s.RpiCameraHDR.Encode(e)
		}
	}
	{
		if s.RpiCameraTuningFile.Set {
			e.FieldStart("rpiCameraTuningFile")
			s.RpiCameraTuningFile.Encode(e)
		}
	}
	{
		if s.RpiCameraMode.Set {
			e.FieldStart("rpiCameraMode")
			s.RpiCameraMode.Encode(e)
		}
	}
	{
		if s.RpiCameraFPS.Set {
			e.FieldStart("rpiCameraFPS")
			s.RpiCameraFPS.Encode(e)
		}
	}
	{
		if s.RpiCameraAfMode.Set {
			e.FieldStart("rpiCameraAfMode")
			s.RpiCameraAfMode.Encode(e)
		}
	}
	{
		if s.RpiCameraAfRange.Set {
			e.FieldStart("rpiCameraAfRange")
			s.RpiCameraAfRange.Encode(e)
		}
	}
	{
		if s.RpiCameraAfSpeed.Set {
			e.FieldStart("rpiCameraAfSpeed")
			s.RpiCameraAfSpeed.Encode(e)
		}
	}
	{
		if s.RpiCameraLensPosition.Set {
			e.FieldStart("rpiCameraLensPosition")
			s.RpiCameraLensPosition.Encode(e)
		}
	}
	{
		if s.RpiCameraAfWindow.Set {
			e.FieldStart("rpiCameraAfWindow")
			s.RpiCameraAfWindow.Encode(e)
		}
	}
	{
		if s.RpiCameraFlickerPeriod.Set {
			e.FieldStart("rpiCameraFlickerPeriod")
			s.RpiCameraFlickerPeriod.Encode(e)
		}
	}
	{
		if s.RpiCameraTextOverlayEnable.Set {
			e.FieldStart("rpiCameraTextOverlayEnable")
			s.RpiCameraTextOverlayEnable.Encode(e)
		}
	}
	{
		if s.RpiCameraTextOverlay.Set {
			e.FieldStart("rpiCameraTextOverlay")
			s.RpiCameraTextOverlay.Encode(e)
		}
	}
	{
		if s.RpiCameraCodec.Set {
			e.FieldStart("rpiCameraCodec")
			s.RpiCameraCodec.Encode(e)
		}
	}
	{
		if s.RpiCameraIDRPeriod.Set {
			e.FieldStart("rpiCameraIDRPeriod")
			s.RpiCameraIDRPeriod.Encode(e)
		}
	}
	{
		if s.RpiCameraBitrate.Set {
			e.FieldStart("rpiCameraBitrate")
			s.RpiCameraBitrate.Encode(e)
		}
	}
	{
		if s.RpiCameraProfile.Set {
			e.FieldStart("rpiCameraProfile")
			s.RpiCameraProfile.Encode(e)
		}
	}
	{
		if s.RpiCameraLevel.Set {
			e.FieldStart("rpiCameraLevel")
			s.RpiCameraLevel.Encode(e)
		}
	}
	{
		if s.RpiCameraJPEGQuality.Set {
			e.FieldStart("rpiCameraJPEGQuality")
			s.RpiCameraJPEGQuality.Encode(e)
		}
	}
	{
		if s.RunOnInit.Set {
			e.FieldStart("runOnInit")
			s.RunOnInit.Encode(e)
		}
	}
	{
		if s.RunOnInitRestart.Set {
			e.FieldStart("runOnInitRestart")
			s.RunOnInitRestart.Encode(e)
		}
	}
	{
		if s.RunOnDemand.Set {
			e.FieldStart("runOnDemand")
			s.RunOnDemand.Encode(e)
		}
	}
	{
		if s.RunOnDemandRestart.Set {
			e.FieldStart("runOnDemandRestart")
			s.RunOnDemandRestart.Encode(e)
		}
	}
	{
		if s.RunOnDemandStartTimeout.Set {
			e.FieldStart("runOnDemandStartTimeout")
			s.RunOnDemandStartTimeout.Encode(e)
		}
	}
	{
		if s.RunOnDemandCloseAfter.Set {
			e.FieldStart("runOnDemandCloseAfter")
			s.RunOnDemandCloseAfter.Encode(e)
		}
	}
	{
		if s.RunOnUnDemand.Set {
			e.FieldStart("runOnUnDemand")
			s.RunOnUnDemand.Encode(e)
		}
	}
	{
		if s.RunOnReady.Set {
			e.FieldStart("runOnReady")
			s.RunOnReady.Encode(e)
		}
	}
	{
		if s.RunOnReadyRestart.Set {
			e.FieldStart("runOnReadyRestart")
			s.RunOnReadyRestart.Encode(e)
		}
	}
	{
		if s.RunOnNotReady.Set {
			e.FieldStart("runOnNotReady")
			s.RunOnNotReady.Encode(e)
		}
	}
	{
		if s.RunOnRead.Set {
			e.FieldStart("runOnRead")
			s.RunOnRead.Encode(e)
		}
	}
	{
		if s.RunOnReadRestart.Set {
			e.FieldStart("runOnReadRestart")
			s.RunOnReadRestart.Encode(e)
		}
	}
	{
		if s.RunOnUnread.Set {
			e.FieldStart("runOnUnread")
			s.RunOnUnread.Encode(e)
		}
	}
	{
		if s.RunOnRecordSegmentCreate.Set {
			e.FieldStart("runOnRecordSegmentCreate")
			s.RunOnRecordSegmentCreate.Encode(e)
		}
	}
	{
		if s.RunOnRecordSegmentComplete.Set {
			e.FieldStart("runOnRecordSegmentComplete")
			s.RunOnRecordSegmentComplete.Encode(e)
		}
	}
}

var jsonFieldsNameOfPathConf = [75]string{
	0:  "name",
	1:  "source",
	2:  "sourceFingerprint",
	3:  "sourceOnDemand",
	4:  "sourceOnDemandStartTimeout",
	5:  "sourceOnDemandCloseAfter",
	6:  "maxReaders",
	7:  "srtReadPassphrase",
	8:  "fallback",
	9:  "useAbsoluteTimestamp",
	10: "record",
	11: "recordPath",
	12: "recordFormat",
	13: "recordPartDuration",
	14: "recordSegmentDuration",
	15: "recordDeleteAfter",
	16: "overridePublisher",
	17: "srtPublishPassphrase",
	18: "rtspTransport",
	19: "rtspAnyPort",
	20: "rtspRangeType",
	21: "rtspRangeStart",
	22: "sourceRedirect",
	23: "rpiCameraCamID",
	24: "rpiCameraSecondary",
	25: "rpiCameraWidth",
	26: "rpiCameraHeight",
	27: "rpiCameraHFlip",
	28: "rpiCameraVFlip",
	29: "rpiCameraBrightness",
	30: "rpiCameraContrast",
	31: "rpiCameraSaturation",
	32: "rpiCameraSharpness",
	33: "rpiCameraExposure",
	34: "rpiCameraAWB",
	35: "rpiCameraAWBGains",
	36: "rpiCameraDenoise",
	37: "rpiCameraShutter",
	38: "rpiCameraMetering",
	39: "rpiCameraGain",
	40: "rpiCameraEV",
	41: "rpiCameraROI",
	42: "rpiCameraHDR",
	43: "rpiCameraTuningFile",
	44: "rpiCameraMode",
	45: "rpiCameraFPS",
	46: "rpiCameraAfMode",
	47: "rpiCameraAfRange",
	48: "rpiCameraAfSpeed",
	49: "rpiCameraLensPosition",
	50: "rpiCameraAfWindow",
	51: "rpiCameraFlickerPeriod",
	52: "rpiCameraTextOverlayEnable",
	53: "rpiCameraTextOverlay",
	54: "rpiCameraCodec",
	55: "rpiCameraIDRPeriod",
	56: "rpiCameraBitrate",
	57: "rpiCameraProfile",
	58: "rpiCameraLevel",
	59: "rpiCameraJPEGQuality",
	60: "runOnInit",
	61: "runOnInitRestart",
	62: "runOnDemand",
	63: "runOnDemandRestart",
	64: "runOnDemandStartTimeout",
	65: "runOnDemandCloseAfter",
	66: "runOnUnDemand",
	67: "runOnReady",
	68: "runOnReadyRestart",
	69: "runOnNotReady",
	70: "runOnRead",
	71: "runOnReadRestart",
	72: "runOnUnread",
	73: "runOnRecordSegmentCreate",
	74: "runOnRecordSegmentComplete",
}

// Decode decodes PathConf from json.
func (s *PathConf) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PathConf to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "source":
			if err := func() error {
				s.Source.Reset()
				if err := s.Source.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"source\"")
			}
		case "sourceFingerprint":
			if err := func() error {
				s.SourceFingerprint.Reset()
				if err := s.SourceFingerprint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sourceFingerprint\"")
			}
		case "sourceOnDemand":
			if err := func() error {
				s.SourceOnDemand.Reset()
				if err := s.SourceOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sourceOnDemand\"")
			}
		case "sourceOnDemandStartTimeout":
			if err := func() error {
				s.SourceOnDemandStartTimeout.Reset()
				if err := s.SourceOnDemandStartTimeout.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sourceOnDemandStartTimeout\"")
			}
		case "sourceOnDemandCloseAfter":
			if err := func() error {
				s.SourceOnDemandCloseAfter.Reset()
				if err := s.SourceOnDemandCloseAfter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sourceOnDemandCloseAfter\"")
			}
		case "maxReaders":
			if err := func() error {
				s.MaxReaders.Reset()
				if err := s.MaxReaders.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"maxReaders\"")
			}
		case "srtReadPassphrase":
			if err := func() error {
				s.SrtReadPassphrase.Reset()
				if err := s.SrtReadPassphrase.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"srtReadPassphrase\"")
			}
		case "fallback":
			if err := func() error {
				s.Fallback.Reset()
				if err := s.Fallback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fallback\"")
			}
		case "useAbsoluteTimestamp":
			if err := func() error {
				s.UseAbsoluteTimestamp.Reset()
				if err := s.UseAbsoluteTimestamp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"useAbsoluteTimestamp\"")
			}
		case "record":
			if err := func() error {
				s.Record.Reset()
				if err := s.Record.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record\"")
			}
		case "recordPath":
			if err := func() error {
				s.RecordPath.Reset()
				if err := s.RecordPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recordPath\"")
			}
		case "recordFormat":
			if err := func() error {
				s.RecordFormat.Reset()
				if err := s.RecordFormat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recordFormat\"")
			}
		case "recordPartDuration":
			if err := func() error {
				s.RecordPartDuration.Reset()
				if err := s.RecordPartDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recordPartDuration\"")
			}
		case "recordSegmentDuration":
			if err := func() error {
				s.RecordSegmentDuration.Reset()
				if err := s.RecordSegmentDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recordSegmentDuration\"")
			}
		case "recordDeleteAfter":
			if err := func() error {
				s.RecordDeleteAfter.Reset()
				if err := s.RecordDeleteAfter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recordDeleteAfter\"")
			}
		case "overridePublisher":
			if err := func() error {
				s.OverridePublisher.Reset()
				if err := s.OverridePublisher.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overridePublisher\"")
			}
		case "srtPublishPassphrase":
			if err := func() error {
				s.SrtPublishPassphrase.Reset()
				if err := s.SrtPublishPassphrase.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"srtPublishPassphrase\"")
			}
		case "rtspTransport":
			if err := func() error {
				s.RtspTransport.Reset()
				if err := s.RtspTransport.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtspTransport\"")
			}
		case "rtspAnyPort":
			if err := func() error {
				s.RtspAnyPort.Reset()
				if err := s.RtspAnyPort.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtspAnyPort\"")
			}
		case "rtspRangeType":
			if err := func() error {
				s.RtspRangeType.Reset()
				if err := s.RtspRangeType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtspRangeType\"")
			}
		case "rtspRangeStart":
			if err := func() error {
				s.RtspRangeStart.Reset()
				if err := s.RtspRangeStart.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtspRangeStart\"")
			}
		case "sourceRedirect":
			if err := func() error {
				s.SourceRedirect.Reset()
				if err := s.SourceRedirect.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sourceRedirect\"")
			}
		case "rpiCameraCamID":
			if err := func() error {
				s.RpiCameraCamID.Reset()
				if err := s.RpiCameraCamID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraCamID\"")
			}
		case "rpiCameraSecondary":
			if err := func() error {
				s.RpiCameraSecondary.Reset()
				if err := s.RpiCameraSecondary.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraSecondary\"")
			}
		case "rpiCameraWidth":
			if err := func() error {
				s.RpiCameraWidth.Reset()
				if err := s.RpiCameraWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraWidth\"")
			}
		case "rpiCameraHeight":
			if err := func() error {
				s.RpiCameraHeight.Reset()
				if err := s.RpiCameraHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraHeight\"")
			}
		case "rpiCameraHFlip":
			if err := func() error {
				s.RpiCameraHFlip.Reset()
				if err := s.RpiCameraHFlip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraHFlip\"")
			}
		case "rpiCameraVFlip":
			if err := func() error {
				s.RpiCameraVFlip.Reset()
				if err := s.RpiCameraVFlip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraVFlip\"")
			}
		case "rpiCameraBrightness":
			if err := func() error {
				s.RpiCameraBrightness.Reset()
				if err := s.RpiCameraBrightness.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraBrightness\"")
			}
		case "rpiCameraContrast":
			if err := func() error {
				s.RpiCameraContrast.Reset()
				if err := s.RpiCameraContrast.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraContrast\"")
			}
		case "rpiCameraSaturation":
			if err := func() error {
				s.RpiCameraSaturation.Reset()
				if err := s.RpiCameraSaturation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraSaturation\"")
			}
		case "rpiCameraSharpness":
			if err := func() error {
				s.RpiCameraSharpness.Reset()
				if err := s.RpiCameraSharpness.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraSharpness\"")
			}
		case "rpiCameraExposure":
			if err := func() error {
				s.RpiCameraExposure.Reset()
				if err := s.RpiCameraExposure.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraExposure\"")
			}
		case "rpiCameraAWB":
			if err := func() error {
				s.RpiCameraAWB.Reset()
				if err := s.RpiCameraAWB.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraAWB\"")
			}
		case "rpiCameraAWBGains":
			if err := func() error {
				s.RpiCameraAWBGains = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.RpiCameraAWBGains = append(s.RpiCameraAWBGains, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraAWBGains\"")
			}
		case "rpiCameraDenoise":
			if err := func() error {
				s.RpiCameraDenoise.Reset()
				if err := s.RpiCameraDenoise.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraDenoise\"")
			}
		case "rpiCameraShutter":
			if err := func() error {
				s.RpiCameraShutter.Reset()
				if err := s.RpiCameraShutter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraShutter\"")
			}
		case "rpiCameraMetering":
			if err := func() error {
				s.RpiCameraMetering.Reset()
				if err := s.RpiCameraMetering.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraMetering\"")
			}
		case "rpiCameraGain":
			if err := func() error {
				s.RpiCameraGain.Reset()
				if err := s.RpiCameraGain.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraGain\"")
			}
		case "rpiCameraEV":
			if err := func() error {
				s.RpiCameraEV.Reset()
				if err := s.RpiCameraEV.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraEV\"")
			}
		case "rpiCameraROI":
			if err := func() error {
				s.RpiCameraROI.Reset()
				if err := s.RpiCameraROI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraROI\"")
			}
		case "rpiCameraHDR":
			if err := func() error {
				s.RpiCameraHDR.Reset()
				if err := s.RpiCameraHDR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraHDR\"")
			}
		case "rpiCameraTuningFile":
			if err := func() error {
				s.RpiCameraTuningFile.Reset()
				if err := s.RpiCameraTuningFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraTuningFile\"")
			}
		case "rpiCameraMode":
			if err := func() error {
				s.RpiCameraMode.Reset()
				if err := s.RpiCameraMode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraMode\"")
			}
		case "rpiCameraFPS":
			if err := func() error {
				s.RpiCameraFPS.Reset()
				if err := s.RpiCameraFPS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraFPS\"")
			}
		case "rpiCameraAfMode":
			if err := func() error {
				s.RpiCameraAfMode.Reset()
				if err := s.RpiCameraAfMode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraAfMode\"")
			}
		case "rpiCameraAfRange":
			if err := func() error {
				s.RpiCameraAfRange.Reset()
				if err := s.RpiCameraAfRange.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraAfRange\"")
			}
		case "rpiCameraAfSpeed":
			if err := func() error {
				s.RpiCameraAfSpeed.Reset()
				if err := s.RpiCameraAfSpeed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraAfSpeed\"")
			}
		case "rpiCameraLensPosition":
			if err := func() error {
				s.RpiCameraLensPosition.Reset()
				if err := s.RpiCameraLensPosition.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraLensPosition\"")
			}
		case "rpiCameraAfWindow":
			if err := func() error {
				s.RpiCameraAfWindow.Reset()
				if err := s.RpiCameraAfWindow.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraAfWindow\"")
			}
		case "rpiCameraFlickerPeriod":
			if err := func() error {
				s.RpiCameraFlickerPeriod.Reset()
				if err := s.RpiCameraFlickerPeriod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraFlickerPeriod\"")
			}
		case "rpiCameraTextOverlayEnable":
			if err := func() error {
				s.RpiCameraTextOverlayEnable.Reset()
				if err := s.RpiCameraTextOverlayEnable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraTextOverlayEnable\"")
			}
		case "rpiCameraTextOverlay":
			if err := func() error {
				s.RpiCameraTextOverlay.Reset()
				if err := s.RpiCameraTextOverlay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraTextOverlay\"")
			}
		case "rpiCameraCodec":
			if err := func() error {
				s.RpiCameraCodec.Reset()
				if err := s.RpiCameraCodec.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraCodec\"")
			}
		case "rpiCameraIDRPeriod":
			if err := func() error {
				s.RpiCameraIDRPeriod.Reset()
				if err := s.RpiCameraIDRPeriod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraIDRPeriod\"")
			}
		case "rpiCameraBitrate":
			if err := func() error {
				s.RpiCameraBitrate.Reset()
				if err := s.RpiCameraBitrate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraBitrate\"")
			}
		case "rpiCameraProfile":
			if err := func() error {
				s.RpiCameraProfile.Reset()
				if err := s.RpiCameraProfile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraProfile\"")
			}
		case "rpiCameraLevel":
			if err := func() error {
				s.RpiCameraLevel.Reset()
				if err := s.RpiCameraLevel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraLevel\"")
			}
		case "rpiCameraJPEGQuality":
			if err := func() error {
				s.RpiCameraJPEGQuality.Reset()
				if err := s.RpiCameraJPEGQuality.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rpiCameraJPEGQuality\"")
			}
		case "runOnInit":
			if err := func() error {
				s.RunOnInit.Reset()
				if err := s.RunOnInit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runOnInit\"")
			}
		case "runOnInitRestart":
			if err := func() error {
				s.RunOnInitRestart.Reset()
				if err := s.RunOnInitRestart.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runOnInitRestart\"")
			}
		case "runOnDemand":
			if err := func() error {
				s.RunOnDemand.Reset()
				if err := s.RunOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runOnDemand\"")
			}
		case "runOnDemandRestart":
			if err := func() error {
				s.RunOnDemandRestart.Reset()
				if err := s.RunOnDemandRestart.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runOnDemandRestart\"")
			}
		case "runOnDemandStartTimeout":
			if err := func() error {
				s.RunOnDemandStartTimeout.Reset()
				if err := s.RunOnDemandStartTimeout.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runOnDemandStartTimeout\"")
			}
		case "runOnDemandCloseAfter":
			if err := func() error {
				s.RunOnDemandCloseAfter.Reset()
				if err := s.RunOnDemandCloseAfter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runOnDemandCloseAfter\"")
			}
		case "runOnUnDemand":
			if err := func() error {
				s.RunOnUnDemand.Reset()
				if err := s.RunOnUnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runOnUnDemand\"")
			}
		case "runOnReady":
			if err := func() error {
				s.RunOnReady.Reset()
				if err := s.RunOnReady.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runOnReady\"")
			}
		case "runOnReadyRestart":
			if err := func() error {
				s.RunOnReadyRestart.Reset()
				if err := s.RunOnReadyRestart.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runOnReadyRestart\"")
			}
		case "runOnNotReady":
			if err := func() error {
				s.RunOnNotReady.Reset()
				if err := s.RunOnNotReady.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runOnNotReady\"")
			}
		case "runOnRead":
			if err := func() error {
				s.RunOnRead.Reset()
				if err := s.RunOnRead.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runOnRead\"")
			}
		case "runOnReadRestart":
			if err := func() error {
				s.RunOnReadRestart.Reset()
				if err := s.RunOnReadRestart.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runOnReadRestart\"")
			}
		case "runOnUnread":
			if err := func() error {
				s.RunOnUnread.Reset()
				if err := s.RunOnUnread.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runOnUnread\"")
			}
		case "runOnRecordSegmentCreate":
			if err := func() error {
				s.RunOnRecordSegmentCreate.Reset()
				if err := s.RunOnRecordSegmentCreate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runOnRecordSegmentCreate\"")
			}
		case "runOnRecordSegmentComplete":
			if err := func() error {
				s.RunOnRecordSegmentComplete.Reset()
				if err := s.RunOnRecordSegmentComplete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runOnRecordSegmentComplete\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PathConf")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PathConf) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PathConf) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PathConfList) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PathConfList) encodeFields(e *jx.Encoder) {
	{
		if s.PageCount.Set {
			e.FieldStart("pageCount")
			s.PageCount.Encode(e)
		}
	}
	{
		if s.ItemCount.Set {
			e.FieldStart("itemCount")
			s.ItemCount.Encode(e)
		}
	}
	{
		if s.Items != nil {
			e.FieldStart("items")
			e.ArrStart()
			for _, elem := range s.Items {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPathConfList = [3]string{
	0: "pageCount",
	1: "itemCount",
	2: "items",
}

// Decode decodes PathConfList from json.
func (s *PathConfList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PathConfList to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pageCount":
			if err := func() error {
				s.PageCount.Reset()
				if err := s.PageCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageCount\"")
			}
		case "itemCount":
			if err := func() error {
				s.ItemCount.Reset()
				if err := s.ItemCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemCount\"")
			}
		case "items":
			if err := func() error {
				s.Items = make([]PathConf, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PathConf
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Items = append(s.Items, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"items\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PathConfList")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PathConfList) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PathConfList) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PathList) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PathList) encodeFields(e *jx.Encoder) {
	{
		if s.PageCount.Set {
			e.FieldStart("pageCount")
			s.PageCount.Encode(e)
		}
	}
	{
		if s.ItemCount.Set {
			e.FieldStart("itemCount")
			s.ItemCount.Encode(e)
		}
	}
	{
		if s.Items != nil {
			e.FieldStart("items")
			e.ArrStart()
			for _, elem := range s.Items {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPathList = [3]string{
	0: "pageCount",
	1: "itemCount",
	2: "items",
}

// Decode decodes PathList from json.
func (s *PathList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PathList to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pageCount":
			if err := func() error {
				s.PageCount.Reset()
				if err := s.PageCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageCount\"")
			}
		case "itemCount":
			if err := func() error {
				s.ItemCount.Reset()
				if err := s.ItemCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemCount\"")
			}
		case "items":
			if err := func() error {
				s.Items = make([]Path, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Path
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Items = append(s.Items, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"items\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PathList")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PathList) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PathList) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PathReader) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PathReader) encodeFields(e *jx.Encoder) {
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPathReader = [2]string{
	0: "type",
	1: "id",
}

// Decode decodes PathReader from json.
func (s *PathReader) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PathReader to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PathReader")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PathReader) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PathReader) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PathReaderType as json.
func (s PathReaderType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PathReaderType from json.
func (s *PathReaderType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PathReaderType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PathReaderType(v) {
	case PathReaderTypeHlsMuxer:
		*s = PathReaderTypeHlsMuxer
	case PathReaderTypeRtmpConn:
		*s = PathReaderTypeRtmpConn
	case PathReaderTypeRtspSession:
		*s = PathReaderTypeRtspSession
	case PathReaderTypeRtspsSession:
		*s = PathReaderTypeRtspsSession
	case PathReaderTypeSrtConn:
		*s = PathReaderTypeSrtConn
	case PathReaderTypeWebRTCSession:
		*s = PathReaderTypeWebRTCSession
	default:
		*s = PathReaderType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PathReaderType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PathReaderType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PathSource) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PathSource) encodeFields(e *jx.Encoder) {
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPathSource = [2]string{
	0: "type",
	1: "id",
}

// Decode decodes PathSource from json.
func (s *PathSource) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PathSource to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PathSource")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PathSource) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PathSource) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PathSourceType as json.
func (s PathSourceType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PathSourceType from json.
func (s *PathSourceType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PathSourceType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PathSourceType(v) {
	case PathSourceTypeHlsSource:
		*s = PathSourceTypeHlsSource
	case PathSourceTypeRedirect:
		*s = PathSourceTypeRedirect
	case PathSourceTypeRpiCameraSource:
		*s = PathSourceTypeRpiCameraSource
	case PathSourceTypeRtmpConn:
		*s = PathSourceTypeRtmpConn
	case PathSourceTypeRtmpSource:
		*s = PathSourceTypeRtmpSource
	case PathSourceTypeRtspSession:
		*s = PathSourceTypeRtspSession
	case PathSourceTypeRtspSource:
		*s = PathSourceTypeRtspSource
	case PathSourceTypeRtspsSession:
		*s = PathSourceTypeRtspsSession
	case PathSourceTypeSrtConn:
		*s = PathSourceTypeSrtConn
	case PathSourceTypeSrtSource:
		*s = PathSourceTypeSrtSource
	case PathSourceTypeUdpSource:
		*s = PathSourceTypeUdpSource
	case PathSourceTypeWebRTCSession:
		*s = PathSourceTypeWebRTCSession
	case PathSourceTypeWebRTCSource:
		*s = PathSourceTypeWebRTCSource
	default:
		*s = PathSourceType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PathSourceType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PathSourceType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PathsGetBadRequest as json.
func (s *PathsGetBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes PathsGetBadRequest from json.
func (s *PathsGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PathsGetBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PathsGetBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PathsGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PathsGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PathsGetInternalServerError as json.
func (s *PathsGetInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes PathsGetInternalServerError from json.
func (s *PathsGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PathsGetInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PathsGetInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PathsGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PathsGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PathsGetNotFound as json.
func (s *PathsGetNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes PathsGetNotFound from json.
func (s *PathsGetNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PathsGetNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PathsGetNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PathsGetNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PathsGetNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PathsListBadRequest as json.
func (s *PathsListBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes PathsListBadRequest from json.
func (s *PathsListBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PathsListBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PathsListBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PathsListBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PathsListBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PathsListInternalServerError as json.
func (s *PathsListInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes PathsListInternalServerError from json.
func (s *PathsListInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PathsListInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PathsListInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PathsListInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PathsListInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RTMPConn) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RTMPConn) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.RemoteAddr.Set {
			e.FieldStart("remoteAddr")
			s.RemoteAddr.Encode(e)
		}
	}
	{
		if s.State.Set {
			e.FieldStart("state")
			s.State.Encode(e)
		}
	}
	{
		if s.Path.Set {
			e.FieldStart("path")
			s.Path.Encode(e)
		}
	}
	{
		if s.Query.Set {
			e.FieldStart("query")
			s.Query.Encode(e)
		}
	}
	{
		if s.BytesReceived.Set {
			e.FieldStart("bytesReceived")
			s.BytesReceived.Encode(e)
		}
	}
	{
		if s.BytesSent.Set {
			e.FieldStart("bytesSent")
			s.BytesSent.Encode(e)
		}
	}
}

var jsonFieldsNameOfRTMPConn = [8]string{
	0: "id",
	1: "created",
	2: "remoteAddr",
	3: "state",
	4: "path",
	5: "query",
	6: "bytesReceived",
	7: "bytesSent",
}

// Decode decodes RTMPConn from json.
func (s *RTMPConn) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RTMPConn to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "remoteAddr":
			if err := func() error {
				s.RemoteAddr.Reset()
				if err := s.RemoteAddr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remoteAddr\"")
			}
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state\"")
			}
		case "path":
			if err := func() error {
				s.Path.Reset()
				if err := s.Path.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"path\"")
			}
		case "query":
			if err := func() error {
				s.Query.Reset()
				if err := s.Query.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"query\"")
			}
		case "bytesReceived":
			if err := func() error {
				s.BytesReceived.Reset()
				if err := s.BytesReceived.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesReceived\"")
			}
		case "bytesSent":
			if err := func() error {
				s.BytesSent.Reset()
				if err := s.BytesSent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesSent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RTMPConn")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RTMPConn) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RTMPConn) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RTMPConnList) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RTMPConnList) encodeFields(e *jx.Encoder) {
	{
		if s.PageCount.Set {
			e.FieldStart("pageCount")
			s.PageCount.Encode(e)
		}
	}
	{
		if s.ItemCount.Set {
			e.FieldStart("itemCount")
			s.ItemCount.Encode(e)
		}
	}
	{
		if s.Items != nil {
			e.FieldStart("items")
			e.ArrStart()
			for _, elem := range s.Items {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfRTMPConnList = [3]string{
	0: "pageCount",
	1: "itemCount",
	2: "items",
}

// Decode decodes RTMPConnList from json.
func (s *RTMPConnList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RTMPConnList to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pageCount":
			if err := func() error {
				s.PageCount.Reset()
				if err := s.PageCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageCount\"")
			}
		case "itemCount":
			if err := func() error {
				s.ItemCount.Reset()
				if err := s.ItemCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemCount\"")
			}
		case "items":
			if err := func() error {
				s.Items = make([]RTMPConn, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem RTMPConn
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Items = append(s.Items, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"items\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RTMPConnList")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RTMPConnList) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RTMPConnList) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RTMPConnState as json.
func (s RTMPConnState) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RTMPConnState from json.
func (s *RTMPConnState) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RTMPConnState to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RTMPConnState(v) {
	case RTMPConnStateIdle:
		*s = RTMPConnStateIdle
	case RTMPConnStateRead:
		*s = RTMPConnStateRead
	case RTMPConnStatePublish:
		*s = RTMPConnStatePublish
	default:
		*s = RTMPConnState(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RTMPConnState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RTMPConnState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RTSPConn) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RTSPConn) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.RemoteAddr.Set {
			e.FieldStart("remoteAddr")
			s.RemoteAddr.Encode(e)
		}
	}
	{
		if s.BytesReceived.Set {
			e.FieldStart("bytesReceived")
			s.BytesReceived.Encode(e)
		}
	}
	{
		if s.BytesSent.Set {
			e.FieldStart("bytesSent")
			s.BytesSent.Encode(e)
		}
	}
	{
		if s.Session.Set {
			e.FieldStart("session")
			s.Session.Encode(e)
		}
	}
}

var jsonFieldsNameOfRTSPConn = [6]string{
	0: "id",
	1: "created",
	2: "remoteAddr",
	3: "bytesReceived",
	4: "bytesSent",
	5: "session",
}

// Decode decodes RTSPConn from json.
func (s *RTSPConn) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RTSPConn to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "remoteAddr":
			if err := func() error {
				s.RemoteAddr.Reset()
				if err := s.RemoteAddr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remoteAddr\"")
			}
		case "bytesReceived":
			if err := func() error {
				s.BytesReceived.Reset()
				if err := s.BytesReceived.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesReceived\"")
			}
		case "bytesSent":
			if err := func() error {
				s.BytesSent.Reset()
				if err := s.BytesSent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesSent\"")
			}
		case "session":
			if err := func() error {
				s.Session.Reset()
				if err := s.Session.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"session\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RTSPConn")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RTSPConn) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RTSPConn) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RTSPConnList) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RTSPConnList) encodeFields(e *jx.Encoder) {
	{
		if s.PageCount.Set {
			e.FieldStart("pageCount")
			s.PageCount.Encode(e)
		}
	}
	{
		if s.ItemCount.Set {
			e.FieldStart("itemCount")
			s.ItemCount.Encode(e)
		}
	}
	{
		if s.Items != nil {
			e.FieldStart("items")
			e.ArrStart()
			for _, elem := range s.Items {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfRTSPConnList = [3]string{
	0: "pageCount",
	1: "itemCount",
	2: "items",
}

// Decode decodes RTSPConnList from json.
func (s *RTSPConnList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RTSPConnList to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pageCount":
			if err := func() error {
				s.PageCount.Reset()
				if err := s.PageCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageCount\"")
			}
		case "itemCount":
			if err := func() error {
				s.ItemCount.Reset()
				if err := s.ItemCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemCount\"")
			}
		case "items":
			if err := func() error {
				s.Items = make([]RTSPConn, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem RTSPConn
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Items = append(s.Items, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"items\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RTSPConnList")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RTSPConnList) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RTSPConnList) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RTSPSession) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RTSPSession) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.RemoteAddr.Set {
			e.FieldStart("remoteAddr")
			s.RemoteAddr.Encode(e)
		}
	}
	{
		if s.State.Set {
			e.FieldStart("state")
			s.State.Encode(e)
		}
	}
	{
		if s.Path.Set {
			e.FieldStart("path")
			s.Path.Encode(e)
		}
	}
	{
		if s.Query.Set {
			e.FieldStart("query")
			s.Query.Encode(e)
		}
	}
	{
		if s.Transport.Set {
			e.FieldStart("transport")
			s.Transport.Encode(e)
		}
	}
	{
		if s.BytesReceived.Set {
			e.FieldStart("bytesReceived")
			s.BytesReceived.Encode(e)
		}
	}
	{
		if s.BytesSent.Set {
			e.FieldStart("bytesSent")
			s.BytesSent.Encode(e)
		}
	}
	{
		if s.RtpPacketsReceived.Set {
			e.FieldStart("rtpPacketsReceived")
			s.RtpPacketsReceived.Encode(e)
		}
	}
	{
		if s.RtpPacketsSent.Set {
			e.FieldStart("rtpPacketsSent")
			s.RtpPacketsSent.Encode(e)
		}
	}
	{
		if s.RtpPacketsLost.Set {
			e.FieldStart("rtpPacketsLost")
			s.RtpPacketsLost.Encode(e)
		}
	}
	{
		if s.RtpPacketsInError.Set {
			e.FieldStart("rtpPacketsInError")
			s.RtpPacketsInError.Encode(e)
		}
	}
	{
		if s.RtpPacketsJitter.Set {
			e.FieldStart("rtpPacketsJitter")
			s.RtpPacketsJitter.Encode(e)
		}
	}
	{
		if s.RtcpPacketsReceived.Set {
			e.FieldStart("rtcpPacketsReceived")
			s.RtcpPacketsReceived.Encode(e)
		}
	}
	{
		if s.RtcpPacketsSent.Set {
			e.FieldStart("rtcpPacketsSent")
			s.RtcpPacketsSent.Encode(e)
		}
	}
	{
		if s.RtcpPacketsInError.Set {
			e.FieldStart("rtcpPacketsInError")
			s.RtcpPacketsInError.Encode(e)
		}
	}
}

var jsonFieldsNameOfRTSPSession = [17]string{
	0:  "id",
	1:  "created",
	2:  "remoteAddr",
	3:  "state",
	4:  "path",
	5:  "query",
	6:  "transport",
	7:  "bytesReceived",
	8:  "bytesSent",
	9:  "rtpPacketsReceived",
	10: "rtpPacketsSent",
	11: "rtpPacketsLost",
	12: "rtpPacketsInError",
	13: "rtpPacketsJitter",
	14: "rtcpPacketsReceived",
	15: "rtcpPacketsSent",
	16: "rtcpPacketsInError",
}

// Decode decodes RTSPSession from json.
func (s *RTSPSession) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RTSPSession to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "remoteAddr":
			if err := func() error {
				s.RemoteAddr.Reset()
				if err := s.RemoteAddr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remoteAddr\"")
			}
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state\"")
			}
		case "path":
			if err := func() error {
				s.Path.Reset()
				if err := s.Path.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"path\"")
			}
		case "query":
			if err := func() error {
				s.Query.Reset()
				if err := s.Query.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"query\"")
			}
		case "transport":
			if err := func() error {
				s.Transport.Reset()
				if err := s.Transport.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transport\"")
			}
		case "bytesReceived":
			if err := func() error {
				s.BytesReceived.Reset()
				if err := s.BytesReceived.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesReceived\"")
			}
		case "bytesSent":
			if err := func() error {
				s.BytesSent.Reset()
				if err := s.BytesSent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesSent\"")
			}
		case "rtpPacketsReceived":
			if err := func() error {
				s.RtpPacketsReceived.Reset()
				if err := s.RtpPacketsReceived.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtpPacketsReceived\"")
			}
		case "rtpPacketsSent":
			if err := func() error {
				s.RtpPacketsSent.Reset()
				if err := s.RtpPacketsSent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtpPacketsSent\"")
			}
		case "rtpPacketsLost":
			if err := func() error {
				s.RtpPacketsLost.Reset()
				if err := s.RtpPacketsLost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtpPacketsLost\"")
			}
		case "rtpPacketsInError":
			if err := func() error {
				s.RtpPacketsInError.Reset()
				if err := s.RtpPacketsInError.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtpPacketsInError\"")
			}
		case "rtpPacketsJitter":
			if err := func() error {
				s.RtpPacketsJitter.Reset()
				if err := s.RtpPacketsJitter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtpPacketsJitter\"")
			}
		case "rtcpPacketsReceived":
			if err := func() error {
				s.RtcpPacketsReceived.Reset()
				if err := s.RtcpPacketsReceived.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtcpPacketsReceived\"")
			}
		case "rtcpPacketsSent":
			if err := func() error {
				s.RtcpPacketsSent.Reset()
				if err := s.RtcpPacketsSent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtcpPacketsSent\"")
			}
		case "rtcpPacketsInError":
			if err := func() error {
				s.RtcpPacketsInError.Reset()
				if err := s.RtcpPacketsInError.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rtcpPacketsInError\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RTSPSession")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RTSPSession) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RTSPSession) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RTSPSessionList) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RTSPSessionList) encodeFields(e *jx.Encoder) {
	{
		if s.PageCount.Set {
			e.FieldStart("pageCount")
			s.PageCount.Encode(e)
		}
	}
	{
		if s.ItemCount.Set {
			e.FieldStart("itemCount")
			s.ItemCount.Encode(e)
		}
	}
	{
		if s.Items != nil {
			e.FieldStart("items")
			e.ArrStart()
			for _, elem := range s.Items {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfRTSPSessionList = [3]string{
	0: "pageCount",
	1: "itemCount",
	2: "items",
}

// Decode decodes RTSPSessionList from json.
func (s *RTSPSessionList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RTSPSessionList to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pageCount":
			if err := func() error {
				s.PageCount.Reset()
				if err := s.PageCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageCount\"")
			}
		case "itemCount":
			if err := func() error {
				s.ItemCount.Reset()
				if err := s.ItemCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemCount\"")
			}
		case "items":
			if err := func() error {
				s.Items = make([]RTSPSession, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem RTSPSession
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Items = append(s.Items, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"items\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RTSPSessionList")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RTSPSessionList) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RTSPSessionList) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RTSPSessionState as json.
func (s RTSPSessionState) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RTSPSessionState from json.
func (s *RTSPSessionState) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RTSPSessionState to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RTSPSessionState(v) {
	case RTSPSessionStateIdle:
		*s = RTSPSessionStateIdle
	case RTSPSessionStateRead:
		*s = RTSPSessionStateRead
	case RTSPSessionStatePublish:
		*s = RTSPSessionStatePublish
	default:
		*s = RTSPSessionState(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RTSPSessionState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RTSPSessionState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Recording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Recording) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Segments != nil {
			e.FieldStart("segments")
			e.ArrStart()
			for _, elem := range s.Segments {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfRecording = [2]string{
	0: "name",
	1: "segments",
}

// Decode decodes Recording from json.
func (s *Recording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Recording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "segments":
			if err := func() error {
				s.Segments = make([]RecordingSegment, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem RecordingSegment
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Segments = append(s.Segments, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"segments\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Recording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Recording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Recording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RecordingList) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RecordingList) encodeFields(e *jx.Encoder) {
	{
		if s.PageCount.Set {
			e.FieldStart("pageCount")
			s.PageCount.Encode(e)
		}
	}
	{
		if s.ItemCount.Set {
			e.FieldStart("itemCount")
			s.ItemCount.Encode(e)
		}
	}
	{
		if s.Items != nil {
			e.FieldStart("items")
			e.ArrStart()
			for _, elem := range s.Items {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfRecordingList = [3]string{
	0: "pageCount",
	1: "itemCount",
	2: "items",
}

// Decode decodes RecordingList from json.
func (s *RecordingList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RecordingList to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pageCount":
			if err := func() error {
				s.PageCount.Reset()
				if err := s.PageCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageCount\"")
			}
		case "itemCount":
			if err := func() error {
				s.ItemCount.Reset()
				if err := s.ItemCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemCount\"")
			}
		case "items":
			if err := func() error {
				s.Items = make([]Recording, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Recording
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Items = append(s.Items, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"items\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RecordingList")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RecordingList) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RecordingList) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RecordingSegment) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RecordingSegment) encodeFields(e *jx.Encoder) {
	{
		if s.Start.Set {
			e.FieldStart("start")
			s.Start.Encode(e)
		}
	}
}

var jsonFieldsNameOfRecordingSegment = [1]string{
	0: "start",
}

// Decode decodes RecordingSegment from json.
func (s *RecordingSegment) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RecordingSegment to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "start":
			if err := func() error {
				s.Start.Reset()
				if err := s.Start.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RecordingSegment")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RecordingSegment) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RecordingSegment) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RecordingsDeleteSegmentBadRequest as json.
func (s *RecordingsDeleteSegmentBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RecordingsDeleteSegmentBadRequest from json.
func (s *RecordingsDeleteSegmentBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RecordingsDeleteSegmentBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RecordingsDeleteSegmentBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RecordingsDeleteSegmentBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RecordingsDeleteSegmentBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RecordingsDeleteSegmentInternalServerError as json.
func (s *RecordingsDeleteSegmentInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RecordingsDeleteSegmentInternalServerError from json.
func (s *RecordingsDeleteSegmentInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RecordingsDeleteSegmentInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RecordingsDeleteSegmentInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RecordingsDeleteSegmentInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RecordingsDeleteSegmentInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RecordingsDeleteSegmentNotFound as json.
func (s *RecordingsDeleteSegmentNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RecordingsDeleteSegmentNotFound from json.
func (s *RecordingsDeleteSegmentNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RecordingsDeleteSegmentNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RecordingsDeleteSegmentNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RecordingsDeleteSegmentNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RecordingsDeleteSegmentNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RecordingsGetBadRequest as json.
func (s *RecordingsGetBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RecordingsGetBadRequest from json.
func (s *RecordingsGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RecordingsGetBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RecordingsGetBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RecordingsGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RecordingsGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RecordingsGetInternalServerError as json.
func (s *RecordingsGetInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RecordingsGetInternalServerError from json.
func (s *RecordingsGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RecordingsGetInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RecordingsGetInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RecordingsGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RecordingsGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RecordingsGetNotFound as json.
func (s *RecordingsGetNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RecordingsGetNotFound from json.
func (s *RecordingsGetNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RecordingsGetNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RecordingsGetNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RecordingsGetNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RecordingsGetNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RecordingsListBadRequest as json.
func (s *RecordingsListBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RecordingsListBadRequest from json.
func (s *RecordingsListBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RecordingsListBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RecordingsListBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RecordingsListBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RecordingsListBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RecordingsListInternalServerError as json.
func (s *RecordingsListInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RecordingsListInternalServerError from json.
func (s *RecordingsListInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RecordingsListInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RecordingsListInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RecordingsListInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RecordingsListInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtmpConnectionsGetBadRequest as json.
func (s *RtmpConnectionsGetBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtmpConnectionsGetBadRequest from json.
func (s *RtmpConnectionsGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtmpConnectionsGetBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtmpConnectionsGetBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtmpConnectionsGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtmpConnectionsGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtmpConnectionsGetInternalServerError as json.
func (s *RtmpConnectionsGetInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtmpConnectionsGetInternalServerError from json.
func (s *RtmpConnectionsGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtmpConnectionsGetInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtmpConnectionsGetInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtmpConnectionsGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtmpConnectionsGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtmpConnectionsGetNotFound as json.
func (s *RtmpConnectionsGetNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtmpConnectionsGetNotFound from json.
func (s *RtmpConnectionsGetNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtmpConnectionsGetNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtmpConnectionsGetNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtmpConnectionsGetNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtmpConnectionsGetNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtmpConnsKickBadRequest as json.
func (s *RtmpConnsKickBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtmpConnsKickBadRequest from json.
func (s *RtmpConnsKickBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtmpConnsKickBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtmpConnsKickBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtmpConnsKickBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtmpConnsKickBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtmpConnsKickInternalServerError as json.
func (s *RtmpConnsKickInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtmpConnsKickInternalServerError from json.
func (s *RtmpConnsKickInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtmpConnsKickInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtmpConnsKickInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtmpConnsKickInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtmpConnsKickInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtmpConnsKickNotFound as json.
func (s *RtmpConnsKickNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtmpConnsKickNotFound from json.
func (s *RtmpConnsKickNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtmpConnsKickNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtmpConnsKickNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtmpConnsKickNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtmpConnsKickNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtmpConnsListBadRequest as json.
func (s *RtmpConnsListBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtmpConnsListBadRequest from json.
func (s *RtmpConnsListBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtmpConnsListBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtmpConnsListBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtmpConnsListBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtmpConnsListBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtmpConnsListInternalServerError as json.
func (s *RtmpConnsListInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtmpConnsListInternalServerError from json.
func (s *RtmpConnsListInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtmpConnsListInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtmpConnsListInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtmpConnsListInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtmpConnsListInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtmpsConnectionsGetBadRequest as json.
func (s *RtmpsConnectionsGetBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtmpsConnectionsGetBadRequest from json.
func (s *RtmpsConnectionsGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtmpsConnectionsGetBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtmpsConnectionsGetBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtmpsConnectionsGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtmpsConnectionsGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtmpsConnectionsGetInternalServerError as json.
func (s *RtmpsConnectionsGetInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtmpsConnectionsGetInternalServerError from json.
func (s *RtmpsConnectionsGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtmpsConnectionsGetInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtmpsConnectionsGetInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtmpsConnectionsGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtmpsConnectionsGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtmpsConnectionsGetNotFound as json.
func (s *RtmpsConnectionsGetNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtmpsConnectionsGetNotFound from json.
func (s *RtmpsConnectionsGetNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtmpsConnectionsGetNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtmpsConnectionsGetNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtmpsConnectionsGetNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtmpsConnectionsGetNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtmpsConnsKickBadRequest as json.
func (s *RtmpsConnsKickBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtmpsConnsKickBadRequest from json.
func (s *RtmpsConnsKickBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtmpsConnsKickBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtmpsConnsKickBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtmpsConnsKickBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtmpsConnsKickBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtmpsConnsKickInternalServerError as json.
func (s *RtmpsConnsKickInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtmpsConnsKickInternalServerError from json.
func (s *RtmpsConnsKickInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtmpsConnsKickInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtmpsConnsKickInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtmpsConnsKickInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtmpsConnsKickInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtmpsConnsKickNotFound as json.
func (s *RtmpsConnsKickNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtmpsConnsKickNotFound from json.
func (s *RtmpsConnsKickNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtmpsConnsKickNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtmpsConnsKickNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtmpsConnsKickNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtmpsConnsKickNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtmpsConnsListBadRequest as json.
func (s *RtmpsConnsListBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtmpsConnsListBadRequest from json.
func (s *RtmpsConnsListBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtmpsConnsListBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtmpsConnsListBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtmpsConnsListBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtmpsConnsListBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtmpsConnsListInternalServerError as json.
func (s *RtmpsConnsListInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtmpsConnsListInternalServerError from json.
func (s *RtmpsConnsListInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtmpsConnsListInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtmpsConnsListInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtmpsConnsListInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtmpsConnsListInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspConnsGetBadRequest as json.
func (s *RtspConnsGetBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspConnsGetBadRequest from json.
func (s *RtspConnsGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspConnsGetBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspConnsGetBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspConnsGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspConnsGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspConnsGetInternalServerError as json.
func (s *RtspConnsGetInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspConnsGetInternalServerError from json.
func (s *RtspConnsGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspConnsGetInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspConnsGetInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspConnsGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspConnsGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspConnsGetNotFound as json.
func (s *RtspConnsGetNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspConnsGetNotFound from json.
func (s *RtspConnsGetNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspConnsGetNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspConnsGetNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspConnsGetNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspConnsGetNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspConnsListBadRequest as json.
func (s *RtspConnsListBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspConnsListBadRequest from json.
func (s *RtspConnsListBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspConnsListBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspConnsListBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspConnsListBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspConnsListBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspConnsListInternalServerError as json.
func (s *RtspConnsListInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspConnsListInternalServerError from json.
func (s *RtspConnsListInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspConnsListInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspConnsListInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspConnsListInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspConnsListInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspSessionsGetBadRequest as json.
func (s *RtspSessionsGetBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspSessionsGetBadRequest from json.
func (s *RtspSessionsGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspSessionsGetBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspSessionsGetBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspSessionsGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspSessionsGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspSessionsGetInternalServerError as json.
func (s *RtspSessionsGetInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspSessionsGetInternalServerError from json.
func (s *RtspSessionsGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspSessionsGetInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspSessionsGetInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspSessionsGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspSessionsGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspSessionsGetNotFound as json.
func (s *RtspSessionsGetNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspSessionsGetNotFound from json.
func (s *RtspSessionsGetNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspSessionsGetNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspSessionsGetNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspSessionsGetNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspSessionsGetNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspSessionsKickBadRequest as json.
func (s *RtspSessionsKickBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspSessionsKickBadRequest from json.
func (s *RtspSessionsKickBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspSessionsKickBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspSessionsKickBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspSessionsKickBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspSessionsKickBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspSessionsKickInternalServerError as json.
func (s *RtspSessionsKickInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspSessionsKickInternalServerError from json.
func (s *RtspSessionsKickInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspSessionsKickInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspSessionsKickInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspSessionsKickInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspSessionsKickInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspSessionsKickNotFound as json.
func (s *RtspSessionsKickNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspSessionsKickNotFound from json.
func (s *RtspSessionsKickNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspSessionsKickNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspSessionsKickNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspSessionsKickNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspSessionsKickNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspSessionsListBadRequest as json.
func (s *RtspSessionsListBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspSessionsListBadRequest from json.
func (s *RtspSessionsListBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspSessionsListBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspSessionsListBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspSessionsListBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspSessionsListBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspSessionsListInternalServerError as json.
func (s *RtspSessionsListInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspSessionsListInternalServerError from json.
func (s *RtspSessionsListInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspSessionsListInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspSessionsListInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspSessionsListInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspSessionsListInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspsConnsGetBadRequest as json.
func (s *RtspsConnsGetBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspsConnsGetBadRequest from json.
func (s *RtspsConnsGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspsConnsGetBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspsConnsGetBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspsConnsGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspsConnsGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspsConnsGetInternalServerError as json.
func (s *RtspsConnsGetInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspsConnsGetInternalServerError from json.
func (s *RtspsConnsGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspsConnsGetInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspsConnsGetInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspsConnsGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspsConnsGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspsConnsGetNotFound as json.
func (s *RtspsConnsGetNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspsConnsGetNotFound from json.
func (s *RtspsConnsGetNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspsConnsGetNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspsConnsGetNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspsConnsGetNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspsConnsGetNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspsConnsListBadRequest as json.
func (s *RtspsConnsListBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspsConnsListBadRequest from json.
func (s *RtspsConnsListBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspsConnsListBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspsConnsListBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspsConnsListBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspsConnsListBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspsConnsListInternalServerError as json.
func (s *RtspsConnsListInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspsConnsListInternalServerError from json.
func (s *RtspsConnsListInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspsConnsListInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspsConnsListInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspsConnsListInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspsConnsListInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspsSessionsGetBadRequest as json.
func (s *RtspsSessionsGetBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspsSessionsGetBadRequest from json.
func (s *RtspsSessionsGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspsSessionsGetBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspsSessionsGetBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspsSessionsGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspsSessionsGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspsSessionsGetInternalServerError as json.
func (s *RtspsSessionsGetInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspsSessionsGetInternalServerError from json.
func (s *RtspsSessionsGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspsSessionsGetInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspsSessionsGetInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspsSessionsGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspsSessionsGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspsSessionsGetNotFound as json.
func (s *RtspsSessionsGetNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspsSessionsGetNotFound from json.
func (s *RtspsSessionsGetNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspsSessionsGetNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspsSessionsGetNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspsSessionsGetNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspsSessionsGetNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspsSessionsKickBadRequest as json.
func (s *RtspsSessionsKickBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspsSessionsKickBadRequest from json.
func (s *RtspsSessionsKickBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspsSessionsKickBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspsSessionsKickBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspsSessionsKickBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspsSessionsKickBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspsSessionsKickInternalServerError as json.
func (s *RtspsSessionsKickInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspsSessionsKickInternalServerError from json.
func (s *RtspsSessionsKickInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspsSessionsKickInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspsSessionsKickInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspsSessionsKickInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspsSessionsKickInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspsSessionsKickNotFound as json.
func (s *RtspsSessionsKickNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspsSessionsKickNotFound from json.
func (s *RtspsSessionsKickNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspsSessionsKickNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspsSessionsKickNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspsSessionsKickNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspsSessionsKickNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspsSessionsListBadRequest as json.
func (s *RtspsSessionsListBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspsSessionsListBadRequest from json.
func (s *RtspsSessionsListBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspsSessionsListBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspsSessionsListBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspsSessionsListBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspsSessionsListBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RtspsSessionsListInternalServerError as json.
func (s *RtspsSessionsListInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes RtspsSessionsListInternalServerError from json.
func (s *RtspsSessionsListInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RtspsSessionsListInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RtspsSessionsListInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RtspsSessionsListInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RtspsSessionsListInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SRTConn) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SRTConn) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.RemoteAddr.Set {
			e.FieldStart("remoteAddr")
			s.RemoteAddr.Encode(e)
		}
	}
	{
		if s.State.Set {
			e.FieldStart("state")
			s.State.Encode(e)
		}
	}
	{
		if s.Path.Set {
			e.FieldStart("path")
			s.Path.Encode(e)
		}
	}
	{
		if s.Query.Set {
			e.FieldStart("query")
			s.Query.Encode(e)
		}
	}
	{
		if s.PacketsSent.Set {
			e.FieldStart("packetsSent")
			s.PacketsSent.Encode(e)
		}
	}
	{
		if s.PacketsReceived.Set {
			e.FieldStart("packetsReceived")
			s.PacketsReceived.Encode(e)
		}
	}
	{
		if s.PacketsReceivedBelated.Set {
			e.FieldStart("packetsReceivedBelated")
			s.PacketsReceivedBelated.Encode(e)
		}
	}
	{
		if s.PacketsSentUnique.Set {
			e.FieldStart("packetsSentUnique")
			s.PacketsSentUnique.Encode(e)
		}
	}
	{
		if s.PacketsReceivedUnique.Set {
			e.FieldStart("packetsReceivedUnique")
			s.PacketsReceivedUnique.Encode(e)
		}
	}
	{
		if s.PacketsSendLoss.Set {
			e.FieldStart("packetsSendLoss")
			s.PacketsSendLoss.Encode(e)
		}
	}
	{
		if s.PacketsReceivedLoss.Set {
			e.FieldStart("packetsReceivedLoss")
			s.PacketsReceivedLoss.Encode(e)
		}
	}
	{
		if s.PacketsRetrans.Set {
			e.FieldStart("packetsRetrans")
			s.PacketsRetrans.Encode(e)
		}
	}
	{
		if s.PacketsReceivedRetrans.Set {
			e.FieldStart("packetsReceivedRetrans")
			s.PacketsReceivedRetrans.Encode(e)
		}
	}
	{
		if s.PacketsSentACK.Set {
			e.FieldStart("packetsSentACK")
			s.PacketsSentACK.Encode(e)
		}
	}
	{
		if s.PacketsReceivedACK.Set {
			e.FieldStart("packetsReceivedACK")
			s.PacketsReceivedACK.Encode(e)
		}
	}
	{
		if s.PacketsSentNAK.Set {
			e.FieldStart("packetsSentNAK")
			s.PacketsSentNAK.Encode(e)
		}
	}
	{
		if s.PacketsReceivedNAK.Set {
			e.FieldStart("packetsReceivedNAK")
			s.PacketsReceivedNAK.Encode(e)
		}
	}
	{
		if s.PacketsSentKM.Set {
			e.FieldStart("packetsSentKM")
			s.PacketsSentKM.Encode(e)
		}
	}
	{
		if s.PacketsReceivedKM.Set {
			e.FieldStart("packetsReceivedKM")
			s.PacketsReceivedKM.Encode(e)
		}
	}
	{
		if s.UsSndDuration.Set {
			e.FieldStart("usSndDuration")
			s.UsSndDuration.Encode(e)
		}
	}
	{
		if s.PacketsSendDrop.Set {
			e.FieldStart("packetsSendDrop")
			s.PacketsSendDrop.Encode(e)
		}
	}
	{
		if s.PacketsReceivedDrop.Set {
			e.FieldStart("packetsReceivedDrop")
			s.PacketsReceivedDrop.Encode(e)
		}
	}
	{
		if s.PacketsReceivedUndecrypt.Set {
			e.FieldStart("packetsReceivedUndecrypt")
			s.PacketsReceivedUndecrypt.Encode(e)
		}
	}
	{
		if s.BytesSent.Set {
			e.FieldStart("bytesSent")
			s.BytesSent.Encode(e)
		}
	}
	{
		if s.BytesReceived.Set {
			e.FieldStart("bytesReceived")
			s.BytesReceived.Encode(e)
		}
	}
	{
		if s.BytesReceivedBelated.Set {
			e.FieldStart("bytesReceivedBelated")
			s.BytesReceivedBelated.Encode(e)
		}
	}
	{
		if s.BytesSentUnique.Set {
			e.FieldStart("bytesSentUnique")
			s.BytesSentUnique.Encode(e)
		}
	}
	{
		if s.BytesReceivedUnique.Set {
			e.FieldStart("bytesReceivedUnique")
			s.BytesReceivedUnique.Encode(e)
		}
	}
	{
		if s.BytesReceivedLoss.Set {
			e.FieldStart("bytesReceivedLoss")
			s.BytesReceivedLoss.Encode(e)
		}
	}
	{
		if s.BytesRetrans.Set {
			e.FieldStart("bytesRetrans")
			s.BytesRetrans.Encode(e)
		}
	}
	{
		if s.BytesReceivedRetrans.Set {
			e.FieldStart("bytesReceivedRetrans")
			s.BytesReceivedRetrans.Encode(e)
		}
	}
	{
		if s.BytesSendDrop.Set {
			e.FieldStart("bytesSendDrop")
			s.BytesSendDrop.Encode(e)
		}
	}
	{
		if s.BytesReceivedDrop.Set {
			e.FieldStart("bytesReceivedDrop")
			s.BytesReceivedDrop.Encode(e)
		}
	}
	{
		if s.BytesReceivedUndecrypt.Set {
			e.FieldStart("bytesReceivedUndecrypt")
			s.BytesReceivedUndecrypt.Encode(e)
		}
	}
	{
		if s.UsPacketsSendPeriod.Set {
			e.FieldStart("usPacketsSendPeriod")
			s.UsPacketsSendPeriod.Encode(e)
		}
	}
	{
		if s.PacketsFlowWindow.Set {
			e.FieldStart("packetsFlowWindow")
			s.PacketsFlowWindow.Encode(e)
		}
	}
	{
		if s.PacketsFlightSize.Set {
			e.FieldStart("packetsFlightSize")
			s.PacketsFlightSize.Encode(e)
		}
	}
	{
		if s.MsRTT.Set {
			e.FieldStart("msRTT")
			s.MsRTT.Encode(e)
		}
	}
	{
		if s.MbpsSendRate.Set {
			e.FieldStart("mbpsSendRate")
			s.MbpsSendRate.Encode(e)
		}
	}
	{
		if s.MbpsReceiveRate.Set {
			e.FieldStart("mbpsReceiveRate")
			s.MbpsReceiveRate.Encode(e)
		}
	}
	{
		if s.MbpsLinkCapacity.Set {
			e.FieldStart("mbpsLinkCapacity")
			s.MbpsLinkCapacity.Encode(e)
		}
	}
	{
		if s.BytesAvailSendBuf.Set {
			e.FieldStart("bytesAvailSendBuf")
			s.BytesAvailSendBuf.Encode(e)
		}
	}
	{
		if s.BytesAvailReceiveBuf.Set {
			e.FieldStart("bytesAvailReceiveBuf")
			s.BytesAvailReceiveBuf.Encode(e)
		}
	}
	{
		if s.MbpsMaxBW.Set {
			e.FieldStart("mbpsMaxBW")
			s.MbpsMaxBW.Encode(e)
		}
	}
	{
		if s.ByteMSS.Set {
			e.FieldStart("byteMSS")
			s.ByteMSS.Encode(e)
		}
	}
	{
		if s.PacketsSendBuf.Set {
			e.FieldStart("packetsSendBuf")
			s.PacketsSendBuf.Encode(e)
		}
	}
	{
		if s.BytesSendBuf.Set {
			e.FieldStart("bytesSendBuf")
			s.BytesSendBuf.Encode(e)
		}
	}
	{
		if s.MsSendBuf.Set {
			e.FieldStart("msSendBuf")
			s.MsSendBuf.Encode(e)
		}
	}
	{
		if s.MsSendTsbPdDelay.Set {
			e.FieldStart("msSendTsbPdDelay")
			s.MsSendTsbPdDelay.Encode(e)
		}
	}
	{
		if s.PacketsReceiveBuf.Set {
			e.FieldStart("packetsReceiveBuf")
			s.PacketsReceiveBuf.Encode(e)
		}
	}
	{
		if s.BytesReceiveBuf.Set {
			e.FieldStart("bytesReceiveBuf")
			s.BytesReceiveBuf.Encode(e)
		}
	}
	{
		if s.MsReceiveBuf.Set {
			e.FieldStart("msReceiveBuf")
			s.MsReceiveBuf.Encode(e)
		}
	}
	{
		if s.MsReceiveTsbPdDelay.Set {
			e.FieldStart("msReceiveTsbPdDelay")
			s.MsReceiveTsbPdDelay.Encode(e)
		}
	}
	{
		if s.PacketsReorderTolerance.Set {
			e.FieldStart("packetsReorderTolerance")
			s.PacketsReorderTolerance.Encode(e)
		}
	}
	{
		if s.PacketsReceivedAvgBelatedTime.Set {
			e.FieldStart("packetsReceivedAvgBelatedTime")
			s.PacketsReceivedAvgBelatedTime.Encode(e)
		}
	}
	{
		if s.PacketsSendLossRate.Set {
			e.FieldStart("packetsSendLossRate")
			s.PacketsSendLossRate.Encode(e)
		}
	}
	{
		if s.PacketsReceivedLossRate.Set {
			e.FieldStart("packetsReceivedLossRate")
			s.PacketsReceivedLossRate.Encode(e)
		}
	}
}

var jsonFieldsNameOfSRTConn = [59]string{
	0:  "id",
	1:  "created",
	2:  "remoteAddr",
	3:  "state",
	4:  "path",
	5:  "query",
	6:  "packetsSent",
	7:  "packetsReceived",
	8:  "packetsReceivedBelated",
	9:  "packetsSentUnique",
	10: "packetsReceivedUnique",
	11: "packetsSendLoss",
	12: "packetsReceivedLoss",
	13: "packetsRetrans",
	14: "packetsReceivedRetrans",
	15: "packetsSentACK",
	16: "packetsReceivedACK",
	17: "packetsSentNAK",
	18: "packetsReceivedNAK",
	19: "packetsSentKM",
	20: "packetsReceivedKM",
	21: "usSndDuration",
	22: "packetsSendDrop",
	23: "packetsReceivedDrop",
	24: "packetsReceivedUndecrypt",
	25: "bytesSent",
	26: "bytesReceived",
	27: "bytesReceivedBelated",
	28: "bytesSentUnique",
	29: "bytesReceivedUnique",
	30: "bytesReceivedLoss",
	31: "bytesRetrans",
	32: "bytesReceivedRetrans",
	33: "bytesSendDrop",
	34: "bytesReceivedDrop",
	35: "bytesReceivedUndecrypt",
	36: "usPacketsSendPeriod",
	37: "packetsFlowWindow",
	38: "packetsFlightSize",
	39: "msRTT",
	40: "mbpsSendRate",
	41: "mbpsReceiveRate",
	42: "mbpsLinkCapacity",
	43: "bytesAvailSendBuf",
	44: "bytesAvailReceiveBuf",
	45: "mbpsMaxBW",
	46: "byteMSS",
	47: "packetsSendBuf",
	48: "bytesSendBuf",
	49: "msSendBuf",
	50: "msSendTsbPdDelay",
	51: "packetsReceiveBuf",
	52: "bytesReceiveBuf",
	53: "msReceiveBuf",
	54: "msReceiveTsbPdDelay",
	55: "packetsReorderTolerance",
	56: "packetsReceivedAvgBelatedTime",
	57: "packetsSendLossRate",
	58: "packetsReceivedLossRate",
}

// Decode decodes SRTConn from json.
func (s *SRTConn) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SRTConn to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "remoteAddr":
			if err := func() error {
				s.RemoteAddr.Reset()
				if err := s.RemoteAddr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remoteAddr\"")
			}
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state\"")
			}
		case "path":
			if err := func() error {
				s.Path.Reset()
				if err := s.Path.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"path\"")
			}
		case "query":
			if err := func() error {
				s.Query.Reset()
				if err := s.Query.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"query\"")
			}
		case "packetsSent":
			if err := func() error {
				s.PacketsSent.Reset()
				if err := s.PacketsSent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsSent\"")
			}
		case "packetsReceived":
			if err := func() error {
				s.PacketsReceived.Reset()
				if err := s.PacketsReceived.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsReceived\"")
			}
		case "packetsReceivedBelated":
			if err := func() error {
				s.PacketsReceivedBelated.Reset()
				if err := s.PacketsReceivedBelated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsReceivedBelated\"")
			}
		case "packetsSentUnique":
			if err := func() error {
				s.PacketsSentUnique.Reset()
				if err := s.PacketsSentUnique.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsSentUnique\"")
			}
		case "packetsReceivedUnique":
			if err := func() error {
				s.PacketsReceivedUnique.Reset()
				if err := s.PacketsReceivedUnique.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsReceivedUnique\"")
			}
		case "packetsSendLoss":
			if err := func() error {
				s.PacketsSendLoss.Reset()
				if err := s.PacketsSendLoss.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsSendLoss\"")
			}
		case "packetsReceivedLoss":
			if err := func() error {
				s.PacketsReceivedLoss.Reset()
				if err := s.PacketsReceivedLoss.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsReceivedLoss\"")
			}
		case "packetsRetrans":
			if err := func() error {
				s.PacketsRetrans.Reset()
				if err := s.PacketsRetrans.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsRetrans\"")
			}
		case "packetsReceivedRetrans":
			if err := func() error {
				s.PacketsReceivedRetrans.Reset()
				if err := s.PacketsReceivedRetrans.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsReceivedRetrans\"")
			}
		case "packetsSentACK":
			if err := func() error {
				s.PacketsSentACK.Reset()
				if err := s.PacketsSentACK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsSentACK\"")
			}
		case "packetsReceivedACK":
			if err := func() error {
				s.PacketsReceivedACK.Reset()
				if err := s.PacketsReceivedACK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsReceivedACK\"")
			}
		case "packetsSentNAK":
			if err := func() error {
				s.PacketsSentNAK.Reset()
				if err := s.PacketsSentNAK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsSentNAK\"")
			}
		case "packetsReceivedNAK":
			if err := func() error {
				s.PacketsReceivedNAK.Reset()
				if err := s.PacketsReceivedNAK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsReceivedNAK\"")
			}
		case "packetsSentKM":
			if err := func() error {
				s.PacketsSentKM.Reset()
				if err := s.PacketsSentKM.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsSentKM\"")
			}
		case "packetsReceivedKM":
			if err := func() error {
				s.PacketsReceivedKM.Reset()
				if err := s.PacketsReceivedKM.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsReceivedKM\"")
			}
		case "usSndDuration":
			if err := func() error {
				s.UsSndDuration.Reset()
				if err := s.UsSndDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usSndDuration\"")
			}
		case "packetsSendDrop":
			if err := func() error {
				s.PacketsSendDrop.Reset()
				if err := s.PacketsSendDrop.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsSendDrop\"")
			}
		case "packetsReceivedDrop":
			if err := func() error {
				s.PacketsReceivedDrop.Reset()
				if err := s.PacketsReceivedDrop.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsReceivedDrop\"")
			}
		case "packetsReceivedUndecrypt":
			if err := func() error {
				s.PacketsReceivedUndecrypt.Reset()
				if err := s.PacketsReceivedUndecrypt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsReceivedUndecrypt\"")
			}
		case "bytesSent":
			if err := func() error {
				s.BytesSent.Reset()
				if err := s.BytesSent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesSent\"")
			}
		case "bytesReceived":
			if err := func() error {
				s.BytesReceived.Reset()
				if err := s.BytesReceived.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesReceived\"")
			}
		case "bytesReceivedBelated":
			if err := func() error {
				s.BytesReceivedBelated.Reset()
				if err := s.BytesReceivedBelated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesReceivedBelated\"")
			}
		case "bytesSentUnique":
			if err := func() error {
				s.BytesSentUnique.Reset()
				if err := s.BytesSentUnique.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesSentUnique\"")
			}
		case "bytesReceivedUnique":
			if err := func() error {
				s.BytesReceivedUnique.Reset()
				if err := s.BytesReceivedUnique.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesReceivedUnique\"")
			}
		case "bytesReceivedLoss":
			if err := func() error {
				s.BytesReceivedLoss.Reset()
				if err := s.BytesReceivedLoss.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesReceivedLoss\"")
			}
		case "bytesRetrans":
			if err := func() error {
				s.BytesRetrans.Reset()
				if err := s.BytesRetrans.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesRetrans\"")
			}
		case "bytesReceivedRetrans":
			if err := func() error {
				s.BytesReceivedRetrans.Reset()
				if err := s.BytesReceivedRetrans.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesReceivedRetrans\"")
			}
		case "bytesSendDrop":
			if err := func() error {
				s.BytesSendDrop.Reset()
				if err := s.BytesSendDrop.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesSendDrop\"")
			}
		case "bytesReceivedDrop":
			if err := func() error {
				s.BytesReceivedDrop.Reset()
				if err := s.BytesReceivedDrop.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesReceivedDrop\"")
			}
		case "bytesReceivedUndecrypt":
			if err := func() error {
				s.BytesReceivedUndecrypt.Reset()
				if err := s.BytesReceivedUndecrypt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesReceivedUndecrypt\"")
			}
		case "usPacketsSendPeriod":
			if err := func() error {
				s.UsPacketsSendPeriod.Reset()
				if err := s.UsPacketsSendPeriod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usPacketsSendPeriod\"")
			}
		case "packetsFlowWindow":
			if err := func() error {
				s.PacketsFlowWindow.Reset()
				if err := s.PacketsFlowWindow.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsFlowWindow\"")
			}
		case "packetsFlightSize":
			if err := func() error {
				s.PacketsFlightSize.Reset()
				if err := s.PacketsFlightSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsFlightSize\"")
			}
		case "msRTT":
			if err := func() error {
				s.MsRTT.Reset()
				if err := s.MsRTT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"msRTT\"")
			}
		case "mbpsSendRate":
			if err := func() error {
				s.MbpsSendRate.Reset()
				if err := s.MbpsSendRate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mbpsSendRate\"")
			}
		case "mbpsReceiveRate":
			if err := func() error {
				s.MbpsReceiveRate.Reset()
				if err := s.MbpsReceiveRate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mbpsReceiveRate\"")
			}
		case "mbpsLinkCapacity":
			if err := func() error {
				s.MbpsLinkCapacity.Reset()
				if err := s.MbpsLinkCapacity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mbpsLinkCapacity\"")
			}
		case "bytesAvailSendBuf":
			if err := func() error {
				s.BytesAvailSendBuf.Reset()
				if err := s.BytesAvailSendBuf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesAvailSendBuf\"")
			}
		case "bytesAvailReceiveBuf":
			if err := func() error {
				s.BytesAvailReceiveBuf.Reset()
				if err := s.BytesAvailReceiveBuf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesAvailReceiveBuf\"")
			}
		case "mbpsMaxBW":
			if err := func() error {
				s.MbpsMaxBW.Reset()
				if err := s.MbpsMaxBW.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mbpsMaxBW\"")
			}
		case "byteMSS":
			if err := func() error {
				s.ByteMSS.Reset()
				if err := s.ByteMSS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"byteMSS\"")
			}
		case "packetsSendBuf":
			if err := func() error {
				s.PacketsSendBuf.Reset()
				if err := s.PacketsSendBuf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsSendBuf\"")
			}
		case "bytesSendBuf":
			if err := func() error {
				s.BytesSendBuf.Reset()
				if err := s.BytesSendBuf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesSendBuf\"")
			}
		case "msSendBuf":
			if err := func() error {
				s.MsSendBuf.Reset()
				if err := s.MsSendBuf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"msSendBuf\"")
			}
		case "msSendTsbPdDelay":
			if err := func() error {
				s.MsSendTsbPdDelay.Reset()
				if err := s.MsSendTsbPdDelay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"msSendTsbPdDelay\"")
			}
		case "packetsReceiveBuf":
			if err := func() error {
				s.PacketsReceiveBuf.Reset()
				if err := s.PacketsReceiveBuf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsReceiveBuf\"")
			}
		case "bytesReceiveBuf":
			if err := func() error {
				s.BytesReceiveBuf.Reset()
				if err := s.BytesReceiveBuf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesReceiveBuf\"")
			}
		case "msReceiveBuf":
			if err := func() error {
				s.MsReceiveBuf.Reset()
				if err := s.MsReceiveBuf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"msReceiveBuf\"")
			}
		case "msReceiveTsbPdDelay":
			if err := func() error {
				s.MsReceiveTsbPdDelay.Reset()
				if err := s.MsReceiveTsbPdDelay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"msReceiveTsbPdDelay\"")
			}
		case "packetsReorderTolerance":
			if err := func() error {
				s.PacketsReorderTolerance.Reset()
				if err := s.PacketsReorderTolerance.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsReorderTolerance\"")
			}
		case "packetsReceivedAvgBelatedTime":
			if err := func() error {
				s.PacketsReceivedAvgBelatedTime.Reset()
				if err := s.PacketsReceivedAvgBelatedTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsReceivedAvgBelatedTime\"")
			}
		case "packetsSendLossRate":
			if err := func() error {
				s.PacketsSendLossRate.Reset()
				if err := s.PacketsSendLossRate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsSendLossRate\"")
			}
		case "packetsReceivedLossRate":
			if err := func() error {
				s.PacketsReceivedLossRate.Reset()
				if err := s.PacketsReceivedLossRate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packetsReceivedLossRate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SRTConn")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SRTConn) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SRTConn) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SRTConnList) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SRTConnList) encodeFields(e *jx.Encoder) {
	{
		if s.PageCount.Set {
			e.FieldStart("pageCount")
			s.PageCount.Encode(e)
		}
	}
	{
		if s.ItemCount.Set {
			e.FieldStart("itemCount")
			s.ItemCount.Encode(e)
		}
	}
	{
		if s.Items != nil {
			e.FieldStart("items")
			e.ArrStart()
			for _, elem := range s.Items {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfSRTConnList = [3]string{
	0: "pageCount",
	1: "itemCount",
	2: "items",
}

// Decode decodes SRTConnList from json.
func (s *SRTConnList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SRTConnList to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pageCount":
			if err := func() error {
				s.PageCount.Reset()
				if err := s.PageCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageCount\"")
			}
		case "itemCount":
			if err := func() error {
				s.ItemCount.Reset()
				if err := s.ItemCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemCount\"")
			}
		case "items":
			if err := func() error {
				s.Items = make([]SRTConn, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem SRTConn
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Items = append(s.Items, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"items\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SRTConnList")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SRTConnList) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SRTConnList) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SRTConnState as json.
func (s SRTConnState) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SRTConnState from json.
func (s *SRTConnState) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SRTConnState to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SRTConnState(v) {
	case SRTConnStateIdle:
		*s = SRTConnStateIdle
	case SRTConnStateRead:
		*s = SRTConnStateRead
	case SRTConnStatePublish:
		*s = SRTConnStatePublish
	default:
		*s = SRTConnState(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SRTConnState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SRTConnState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SrtConnsGetBadRequest as json.
func (s *SrtConnsGetBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes SrtConnsGetBadRequest from json.
func (s *SrtConnsGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SrtConnsGetBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = SrtConnsGetBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SrtConnsGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SrtConnsGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SrtConnsGetInternalServerError as json.
func (s *SrtConnsGetInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes SrtConnsGetInternalServerError from json.
func (s *SrtConnsGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SrtConnsGetInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = SrtConnsGetInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SrtConnsGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SrtConnsGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SrtConnsGetNotFound as json.
func (s *SrtConnsGetNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes SrtConnsGetNotFound from json.
func (s *SrtConnsGetNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SrtConnsGetNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = SrtConnsGetNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SrtConnsGetNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SrtConnsGetNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SrtConnsKickBadRequest as json.
func (s *SrtConnsKickBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes SrtConnsKickBadRequest from json.
func (s *SrtConnsKickBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SrtConnsKickBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = SrtConnsKickBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SrtConnsKickBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SrtConnsKickBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SrtConnsKickInternalServerError as json.
func (s *SrtConnsKickInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes SrtConnsKickInternalServerError from json.
func (s *SrtConnsKickInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SrtConnsKickInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = SrtConnsKickInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SrtConnsKickInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SrtConnsKickInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SrtConnsKickNotFound as json.
func (s *SrtConnsKickNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes SrtConnsKickNotFound from json.
func (s *SrtConnsKickNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SrtConnsKickNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = SrtConnsKickNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SrtConnsKickNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SrtConnsKickNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SrtConnsListBadRequest as json.
func (s *SrtConnsListBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes SrtConnsListBadRequest from json.
func (s *SrtConnsListBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SrtConnsListBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = SrtConnsListBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SrtConnsListBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SrtConnsListBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SrtConnsListInternalServerError as json.
func (s *SrtConnsListInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes SrtConnsListInternalServerError from json.
func (s *SrtConnsListInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SrtConnsListInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = SrtConnsListInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SrtConnsListInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SrtConnsListInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebRTCSession) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebRTCSession) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.RemoteAddr.Set {
			e.FieldStart("remoteAddr")
			s.RemoteAddr.Encode(e)
		}
	}
	{
		if s.PeerConnectionEstablished.Set {
			e.FieldStart("peerConnectionEstablished")
			s.PeerConnectionEstablished.Encode(e)
		}
	}
	{
		if s.LocalCandidate.Set {
			e.FieldStart("localCandidate")
			s.LocalCandidate.Encode(e)
		}
	}
	{
		if s.RemoteCandidate.Set {
			e.FieldStart("remoteCandidate")
			s.RemoteCandidate.Encode(e)
		}
	}
	{
		if s.State.Set {
			e.FieldStart("state")
			s.State.Encode(e)
		}
	}
	{
		if s.Path.Set {
			e.FieldStart("path")
			s.Path.Encode(e)
		}
	}
	{
		if s.Query.Set {
			e.FieldStart("query")
			s.Query.Encode(e)
		}
	}
	{
		if s.BytesReceived.Set {
			e.FieldStart("bytesReceived")
			s.BytesReceived.Encode(e)
		}
	}
	{
		if s.BytesSent.Set {
			e.FieldStart("bytesSent")
			s.BytesSent.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebRTCSession = [11]string{
	0:  "id",
	1:  "created",
	2:  "remoteAddr",
	3:  "peerConnectionEstablished",
	4:  "localCandidate",
	5:  "remoteCandidate",
	6:  "state",
	7:  "path",
	8:  "query",
	9:  "bytesReceived",
	10: "bytesSent",
}

// Decode decodes WebRTCSession from json.
func (s *WebRTCSession) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebRTCSession to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "remoteAddr":
			if err := func() error {
				s.RemoteAddr.Reset()
				if err := s.RemoteAddr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remoteAddr\"")
			}
		case "peerConnectionEstablished":
			if err := func() error {
				s.PeerConnectionEstablished.Reset()
				if err := s.PeerConnectionEstablished.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"peerConnectionEstablished\"")
			}
		case "localCandidate":
			if err := func() error {
				s.LocalCandidate.Reset()
				if err := s.LocalCandidate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"localCandidate\"")
			}
		case "remoteCandidate":
			if err := func() error {
				s.RemoteCandidate.Reset()
				if err := s.RemoteCandidate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remoteCandidate\"")
			}
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state\"")
			}
		case "path":
			if err := func() error {
				s.Path.Reset()
				if err := s.Path.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"path\"")
			}
		case "query":
			if err := func() error {
				s.Query.Reset()
				if err := s.Query.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"query\"")
			}
		case "bytesReceived":
			if err := func() error {
				s.BytesReceived.Reset()
				if err := s.BytesReceived.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesReceived\"")
			}
		case "bytesSent":
			if err := func() error {
				s.BytesSent.Reset()
				if err := s.BytesSent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bytesSent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebRTCSession")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebRTCSession) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebRTCSession) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebRTCSessionList) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebRTCSessionList) encodeFields(e *jx.Encoder) {
	{
		if s.PageCount.Set {
			e.FieldStart("pageCount")
			s.PageCount.Encode(e)
		}
	}
	{
		if s.ItemCount.Set {
			e.FieldStart("itemCount")
			s.ItemCount.Encode(e)
		}
	}
	{
		if s.Items != nil {
			e.FieldStart("items")
			e.ArrStart()
			for _, elem := range s.Items {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfWebRTCSessionList = [3]string{
	0: "pageCount",
	1: "itemCount",
	2: "items",
}

// Decode decodes WebRTCSessionList from json.
func (s *WebRTCSessionList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebRTCSessionList to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pageCount":
			if err := func() error {
				s.PageCount.Reset()
				if err := s.PageCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageCount\"")
			}
		case "itemCount":
			if err := func() error {
				s.ItemCount.Reset()
				if err := s.ItemCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemCount\"")
			}
		case "items":
			if err := func() error {
				s.Items = make([]WebRTCSession, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem WebRTCSession
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Items = append(s.Items, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"items\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebRTCSessionList")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebRTCSessionList) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebRTCSessionList) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebRTCSessionState as json.
func (s WebRTCSessionState) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebRTCSessionState from json.
func (s *WebRTCSessionState) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebRTCSessionState to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebRTCSessionState(v) {
	case WebRTCSessionStateRead:
		*s = WebRTCSessionStateRead
	case WebRTCSessionStatePublish:
		*s = WebRTCSessionStatePublish
	default:
		*s = WebRTCSessionState(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebRTCSessionState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebRTCSessionState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebrtcSessionsGetBadRequest as json.
func (s *WebrtcSessionsGetBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes WebrtcSessionsGetBadRequest from json.
func (s *WebrtcSessionsGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebrtcSessionsGetBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = WebrtcSessionsGetBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebrtcSessionsGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebrtcSessionsGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebrtcSessionsGetInternalServerError as json.
func (s *WebrtcSessionsGetInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes WebrtcSessionsGetInternalServerError from json.
func (s *WebrtcSessionsGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebrtcSessionsGetInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = WebrtcSessionsGetInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebrtcSessionsGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebrtcSessionsGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebrtcSessionsGetNotFound as json.
func (s *WebrtcSessionsGetNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes WebrtcSessionsGetNotFound from json.
func (s *WebrtcSessionsGetNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebrtcSessionsGetNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = WebrtcSessionsGetNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebrtcSessionsGetNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebrtcSessionsGetNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebrtcSessionsKickBadRequest as json.
func (s *WebrtcSessionsKickBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes WebrtcSessionsKickBadRequest from json.
func (s *WebrtcSessionsKickBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebrtcSessionsKickBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = WebrtcSessionsKickBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebrtcSessionsKickBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebrtcSessionsKickBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebrtcSessionsKickInternalServerError as json.
func (s *WebrtcSessionsKickInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes WebrtcSessionsKickInternalServerError from json.
func (s *WebrtcSessionsKickInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebrtcSessionsKickInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = WebrtcSessionsKickInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebrtcSessionsKickInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebrtcSessionsKickInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebrtcSessionsKickNotFound as json.
func (s *WebrtcSessionsKickNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes WebrtcSessionsKickNotFound from json.
func (s *WebrtcSessionsKickNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebrtcSessionsKickNotFound to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = WebrtcSessionsKickNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebrtcSessionsKickNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebrtcSessionsKickNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebrtcSessionsListBadRequest as json.
func (s *WebrtcSessionsListBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes WebrtcSessionsListBadRequest from json.
func (s *WebrtcSessionsListBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebrtcSessionsListBadRequest to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = WebrtcSessionsListBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebrtcSessionsListBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebrtcSessionsListBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebrtcSessionsListInternalServerError as json.
func (s *WebrtcSessionsListInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*Error)(s)

	unwrapped.Encode(e)
}

// Decode decodes WebrtcSessionsListInternalServerError from json.
func (s *WebrtcSessionsListInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebrtcSessionsListInternalServerError to nil")
	}
	var unwrapped Error
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = WebrtcSessionsListInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebrtcSessionsListInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebrtcSessionsListInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
